/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// JobEvaluateRequest struct for JobEvaluateRequest
type JobEvaluateRequest struct {
	EvalOptions *EvalOptions `json:"EvalOptions,omitempty"`
	JobID *string `json:"JobID,omitempty"`
	Namespace *string `json:"Namespace,omitempty"`
	Region *string `json:"Region,omitempty"`
	SecretID *string `json:"SecretID,omitempty"`
}

// NewJobEvaluateRequest instantiates a new JobEvaluateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobEvaluateRequest() *JobEvaluateRequest {
	this := JobEvaluateRequest{}
	return &this
}

// NewJobEvaluateRequestWithDefaults instantiates a new JobEvaluateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobEvaluateRequestWithDefaults() *JobEvaluateRequest {
	this := JobEvaluateRequest{}
	return &this
}

// GetEvalOptions returns the EvalOptions field value if set, zero value otherwise.
func (o *JobEvaluateRequest) GetEvalOptions() EvalOptions {
	if o == nil || o.EvalOptions == nil {
		var ret EvalOptions
		return ret
	}
	return *o.EvalOptions
}

// GetEvalOptionsOk returns a tuple with the EvalOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobEvaluateRequest) GetEvalOptionsOk() (*EvalOptions, bool) {
	if o == nil || o.EvalOptions == nil {
		return nil, false
	}
	return o.EvalOptions, true
}

// HasEvalOptions returns a boolean if a field has been set.
func (o *JobEvaluateRequest) HasEvalOptions() bool {
	if o != nil && o.EvalOptions != nil {
		return true
	}

	return false
}

// SetEvalOptions gets a reference to the given EvalOptions and assigns it to the EvalOptions field.
func (o *JobEvaluateRequest) SetEvalOptions(v EvalOptions) {
	o.EvalOptions = &v
}

// GetJobID returns the JobID field value if set, zero value otherwise.
func (o *JobEvaluateRequest) GetJobID() string {
	if o == nil || o.JobID == nil {
		var ret string
		return ret
	}
	return *o.JobID
}

// GetJobIDOk returns a tuple with the JobID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobEvaluateRequest) GetJobIDOk() (*string, bool) {
	if o == nil || o.JobID == nil {
		return nil, false
	}
	return o.JobID, true
}

// HasJobID returns a boolean if a field has been set.
func (o *JobEvaluateRequest) HasJobID() bool {
	if o != nil && o.JobID != nil {
		return true
	}

	return false
}

// SetJobID gets a reference to the given string and assigns it to the JobID field.
func (o *JobEvaluateRequest) SetJobID(v string) {
	o.JobID = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *JobEvaluateRequest) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobEvaluateRequest) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *JobEvaluateRequest) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *JobEvaluateRequest) SetNamespace(v string) {
	o.Namespace = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *JobEvaluateRequest) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobEvaluateRequest) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *JobEvaluateRequest) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *JobEvaluateRequest) SetRegion(v string) {
	o.Region = &v
}

// GetSecretID returns the SecretID field value if set, zero value otherwise.
func (o *JobEvaluateRequest) GetSecretID() string {
	if o == nil || o.SecretID == nil {
		var ret string
		return ret
	}
	return *o.SecretID
}

// GetSecretIDOk returns a tuple with the SecretID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobEvaluateRequest) GetSecretIDOk() (*string, bool) {
	if o == nil || o.SecretID == nil {
		return nil, false
	}
	return o.SecretID, true
}

// HasSecretID returns a boolean if a field has been set.
func (o *JobEvaluateRequest) HasSecretID() bool {
	if o != nil && o.SecretID != nil {
		return true
	}

	return false
}

// SetSecretID gets a reference to the given string and assigns it to the SecretID field.
func (o *JobEvaluateRequest) SetSecretID(v string) {
	o.SecretID = &v
}

func (o JobEvaluateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EvalOptions != nil {
		toSerialize["EvalOptions"] = o.EvalOptions
	}
	if o.JobID != nil {
		toSerialize["JobID"] = o.JobID
	}
	if o.Namespace != nil {
		toSerialize["Namespace"] = o.Namespace
	}
	if o.Region != nil {
		toSerialize["Region"] = o.Region
	}
	if o.SecretID != nil {
		toSerialize["SecretID"] = o.SecretID
	}
	return json.Marshal(toSerialize)
}

type NullableJobEvaluateRequest struct {
	value *JobEvaluateRequest
	isSet bool
}

func (v NullableJobEvaluateRequest) Get() *JobEvaluateRequest {
	return v.value
}

func (v *NullableJobEvaluateRequest) Set(val *JobEvaluateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableJobEvaluateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableJobEvaluateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobEvaluateRequest(val *JobEvaluateRequest) *NullableJobEvaluateRequest {
	return &NullableJobEvaluateRequest{value: val, isSet: true}
}

func (v NullableJobEvaluateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobEvaluateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


