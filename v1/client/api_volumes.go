/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// VolumesApiService VolumesApi service
type VolumesApiService service

type ApiCreateVolumeRequest struct {
	ctx _context.Context
	ApiService *VolumesApiService
	volumeId string
	action string
	cSIVolumeCreateRequest *CSIVolumeCreateRequest
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiCreateVolumeRequest) CSIVolumeCreateRequest(cSIVolumeCreateRequest CSIVolumeCreateRequest) ApiCreateVolumeRequest {
	r.cSIVolumeCreateRequest = &cSIVolumeCreateRequest
	return r
}
func (r ApiCreateVolumeRequest) Region(region string) ApiCreateVolumeRequest {
	r.region = &region
	return r
}
func (r ApiCreateVolumeRequest) Namespace(namespace string) ApiCreateVolumeRequest {
	r.namespace = &namespace
	return r
}
func (r ApiCreateVolumeRequest) XNomadToken(xNomadToken string) ApiCreateVolumeRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiCreateVolumeRequest) IdempotencyToken(idempotencyToken string) ApiCreateVolumeRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiCreateVolumeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CreateVolumeExecute(r)
}

/*
 * CreateVolume Method for CreateVolume
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param volumeId Volume unique identifier.
 * @param action The action to perform on the Volume (create, detach, delete).
 * @return ApiCreateVolumeRequest
 */
func (a *VolumesApiService) CreateVolume(ctx _context.Context, volumeId string, action string) ApiCreateVolumeRequest {
	return ApiCreateVolumeRequest{
		ApiService: a,
		ctx: ctx,
		volumeId: volumeId,
		action: action,
	}
}

/*
 * Execute executes the request
 */
func (a *VolumesApiService) CreateVolumeExecute(r ApiCreateVolumeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumesApiService.CreateVolume")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volume/csi/{volumeId}/{action}"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeId"+"}", _neturl.PathEscape(parameterToString(r.volumeId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"action"+"}", _neturl.PathEscape(parameterToString(r.action, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.cSIVolumeCreateRequest == nil {
		return nil, reportError("cSIVolumeCreateRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.cSIVolumeCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSnapshotRequest struct {
	ctx _context.Context
	ApiService *VolumesApiService
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
	pluginId *string
	snapshotId *string
}

func (r ApiDeleteSnapshotRequest) Region(region string) ApiDeleteSnapshotRequest {
	r.region = &region
	return r
}
func (r ApiDeleteSnapshotRequest) Namespace(namespace string) ApiDeleteSnapshotRequest {
	r.namespace = &namespace
	return r
}
func (r ApiDeleteSnapshotRequest) XNomadToken(xNomadToken string) ApiDeleteSnapshotRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiDeleteSnapshotRequest) IdempotencyToken(idempotencyToken string) ApiDeleteSnapshotRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}
func (r ApiDeleteSnapshotRequest) PluginId(pluginId string) ApiDeleteSnapshotRequest {
	r.pluginId = &pluginId
	return r
}
func (r ApiDeleteSnapshotRequest) SnapshotId(snapshotId string) ApiDeleteSnapshotRequest {
	r.snapshotId = &snapshotId
	return r
}

func (r ApiDeleteSnapshotRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteSnapshotExecute(r)
}

/*
 * DeleteSnapshot Method for DeleteSnapshot
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDeleteSnapshotRequest
 */
func (a *VolumesApiService) DeleteSnapshot(ctx _context.Context) ApiDeleteSnapshotRequest {
	return ApiDeleteSnapshotRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *VolumesApiService) DeleteSnapshotExecute(r ApiDeleteSnapshotRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumesApiService.DeleteSnapshot")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/snapshot"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	if r.pluginId != nil {
		localVarQueryParams.Add("plugin_id", parameterToString(*r.pluginId, ""))
	}
	if r.snapshotId != nil {
		localVarQueryParams.Add("snapshot_id", parameterToString(*r.snapshotId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteVolumeRegistrationRequest struct {
	ctx _context.Context
	ApiService *VolumesApiService
	volumeId string
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
	force *string
}

func (r ApiDeleteVolumeRegistrationRequest) Region(region string) ApiDeleteVolumeRegistrationRequest {
	r.region = &region
	return r
}
func (r ApiDeleteVolumeRegistrationRequest) Namespace(namespace string) ApiDeleteVolumeRegistrationRequest {
	r.namespace = &namespace
	return r
}
func (r ApiDeleteVolumeRegistrationRequest) XNomadToken(xNomadToken string) ApiDeleteVolumeRegistrationRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiDeleteVolumeRegistrationRequest) IdempotencyToken(idempotencyToken string) ApiDeleteVolumeRegistrationRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}
func (r ApiDeleteVolumeRegistrationRequest) Force(force string) ApiDeleteVolumeRegistrationRequest {
	r.force = &force
	return r
}

func (r ApiDeleteVolumeRegistrationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteVolumeRegistrationExecute(r)
}

/*
 * DeleteVolumeRegistration Method for DeleteVolumeRegistration
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param volumeId Volume unique identifier.
 * @return ApiDeleteVolumeRegistrationRequest
 */
func (a *VolumesApiService) DeleteVolumeRegistration(ctx _context.Context, volumeId string) ApiDeleteVolumeRegistrationRequest {
	return ApiDeleteVolumeRegistrationRequest{
		ApiService: a,
		ctx: ctx,
		volumeId: volumeId,
	}
}

/*
 * Execute executes the request
 */
func (a *VolumesApiService) DeleteVolumeRegistrationExecute(r ApiDeleteVolumeRegistrationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumesApiService.DeleteVolumeRegistration")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volume/csi/{volumeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeId"+"}", _neturl.PathEscape(parameterToString(r.volumeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDetachOrDeleteVolumeRequest struct {
	ctx _context.Context
	ApiService *VolumesApiService
	volumeId string
	action string
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
	node *string
}

func (r ApiDetachOrDeleteVolumeRequest) Region(region string) ApiDetachOrDeleteVolumeRequest {
	r.region = &region
	return r
}
func (r ApiDetachOrDeleteVolumeRequest) Namespace(namespace string) ApiDetachOrDeleteVolumeRequest {
	r.namespace = &namespace
	return r
}
func (r ApiDetachOrDeleteVolumeRequest) XNomadToken(xNomadToken string) ApiDetachOrDeleteVolumeRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiDetachOrDeleteVolumeRequest) IdempotencyToken(idempotencyToken string) ApiDetachOrDeleteVolumeRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}
func (r ApiDetachOrDeleteVolumeRequest) Node(node string) ApiDetachOrDeleteVolumeRequest {
	r.node = &node
	return r
}

func (r ApiDetachOrDeleteVolumeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DetachOrDeleteVolumeExecute(r)
}

/*
 * DetachOrDeleteVolume Method for DetachOrDeleteVolume
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param volumeId Volume unique identifier.
 * @param action The action to perform on the Volume (create, detach, delete).
 * @return ApiDetachOrDeleteVolumeRequest
 */
func (a *VolumesApiService) DetachOrDeleteVolume(ctx _context.Context, volumeId string, action string) ApiDetachOrDeleteVolumeRequest {
	return ApiDetachOrDeleteVolumeRequest{
		ApiService: a,
		ctx: ctx,
		volumeId: volumeId,
		action: action,
	}
}

/*
 * Execute executes the request
 */
func (a *VolumesApiService) DetachOrDeleteVolumeExecute(r ApiDetachOrDeleteVolumeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumesApiService.DetachOrDeleteVolume")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volume/csi/{volumeId}/{action}"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeId"+"}", _neturl.PathEscape(parameterToString(r.volumeId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"action"+"}", _neturl.PathEscape(parameterToString(r.action, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	if r.node != nil {
		localVarQueryParams.Add("node", parameterToString(*r.node, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetExternalVolumesRequest struct {
	ctx _context.Context
	ApiService *VolumesApiService
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
	pluginId *string
}

func (r ApiGetExternalVolumesRequest) Region(region string) ApiGetExternalVolumesRequest {
	r.region = &region
	return r
}
func (r ApiGetExternalVolumesRequest) Namespace(namespace string) ApiGetExternalVolumesRequest {
	r.namespace = &namespace
	return r
}
func (r ApiGetExternalVolumesRequest) Index(index int32) ApiGetExternalVolumesRequest {
	r.index = &index
	return r
}
func (r ApiGetExternalVolumesRequest) Wait(wait string) ApiGetExternalVolumesRequest {
	r.wait = &wait
	return r
}
func (r ApiGetExternalVolumesRequest) Stale(stale string) ApiGetExternalVolumesRequest {
	r.stale = &stale
	return r
}
func (r ApiGetExternalVolumesRequest) Prefix(prefix string) ApiGetExternalVolumesRequest {
	r.prefix = &prefix
	return r
}
func (r ApiGetExternalVolumesRequest) XNomadToken(xNomadToken string) ApiGetExternalVolumesRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiGetExternalVolumesRequest) PerPage(perPage int32) ApiGetExternalVolumesRequest {
	r.perPage = &perPage
	return r
}
func (r ApiGetExternalVolumesRequest) NextToken(nextToken string) ApiGetExternalVolumesRequest {
	r.nextToken = &nextToken
	return r
}
func (r ApiGetExternalVolumesRequest) PluginId(pluginId string) ApiGetExternalVolumesRequest {
	r.pluginId = &pluginId
	return r
}

func (r ApiGetExternalVolumesRequest) Execute() (CSIVolumeListExternalResponse, *_nethttp.Response, error) {
	return r.ApiService.GetExternalVolumesExecute(r)
}

/*
 * GetExternalVolumes Method for GetExternalVolumes
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetExternalVolumesRequest
 */
func (a *VolumesApiService) GetExternalVolumes(ctx _context.Context) ApiGetExternalVolumesRequest {
	return ApiGetExternalVolumesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CSIVolumeListExternalResponse
 */
func (a *VolumesApiService) GetExternalVolumesExecute(r ApiGetExternalVolumesRequest) (CSIVolumeListExternalResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CSIVolumeListExternalResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumesApiService.GetExternalVolumes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/external"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	if r.pluginId != nil {
		localVarQueryParams.Add("plugin_id", parameterToString(*r.pluginId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSnapshotsRequest struct {
	ctx _context.Context
	ApiService *VolumesApiService
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
	pluginId *string
}

func (r ApiGetSnapshotsRequest) Region(region string) ApiGetSnapshotsRequest {
	r.region = &region
	return r
}
func (r ApiGetSnapshotsRequest) Namespace(namespace string) ApiGetSnapshotsRequest {
	r.namespace = &namespace
	return r
}
func (r ApiGetSnapshotsRequest) Index(index int32) ApiGetSnapshotsRequest {
	r.index = &index
	return r
}
func (r ApiGetSnapshotsRequest) Wait(wait string) ApiGetSnapshotsRequest {
	r.wait = &wait
	return r
}
func (r ApiGetSnapshotsRequest) Stale(stale string) ApiGetSnapshotsRequest {
	r.stale = &stale
	return r
}
func (r ApiGetSnapshotsRequest) Prefix(prefix string) ApiGetSnapshotsRequest {
	r.prefix = &prefix
	return r
}
func (r ApiGetSnapshotsRequest) XNomadToken(xNomadToken string) ApiGetSnapshotsRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiGetSnapshotsRequest) PerPage(perPage int32) ApiGetSnapshotsRequest {
	r.perPage = &perPage
	return r
}
func (r ApiGetSnapshotsRequest) NextToken(nextToken string) ApiGetSnapshotsRequest {
	r.nextToken = &nextToken
	return r
}
func (r ApiGetSnapshotsRequest) PluginId(pluginId string) ApiGetSnapshotsRequest {
	r.pluginId = &pluginId
	return r
}

func (r ApiGetSnapshotsRequest) Execute() (CSISnapshotListResponse, *_nethttp.Response, error) {
	return r.ApiService.GetSnapshotsExecute(r)
}

/*
 * GetSnapshots Method for GetSnapshots
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetSnapshotsRequest
 */
func (a *VolumesApiService) GetSnapshots(ctx _context.Context) ApiGetSnapshotsRequest {
	return ApiGetSnapshotsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CSISnapshotListResponse
 */
func (a *VolumesApiService) GetSnapshotsExecute(r ApiGetSnapshotsRequest) (CSISnapshotListResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CSISnapshotListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumesApiService.GetSnapshots")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/snapshot"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	if r.pluginId != nil {
		localVarQueryParams.Add("plugin_id", parameterToString(*r.pluginId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVolumeRequest struct {
	ctx _context.Context
	ApiService *VolumesApiService
	volumeId string
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiGetVolumeRequest) Region(region string) ApiGetVolumeRequest {
	r.region = &region
	return r
}
func (r ApiGetVolumeRequest) Namespace(namespace string) ApiGetVolumeRequest {
	r.namespace = &namespace
	return r
}
func (r ApiGetVolumeRequest) Index(index int32) ApiGetVolumeRequest {
	r.index = &index
	return r
}
func (r ApiGetVolumeRequest) Wait(wait string) ApiGetVolumeRequest {
	r.wait = &wait
	return r
}
func (r ApiGetVolumeRequest) Stale(stale string) ApiGetVolumeRequest {
	r.stale = &stale
	return r
}
func (r ApiGetVolumeRequest) Prefix(prefix string) ApiGetVolumeRequest {
	r.prefix = &prefix
	return r
}
func (r ApiGetVolumeRequest) XNomadToken(xNomadToken string) ApiGetVolumeRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiGetVolumeRequest) PerPage(perPage int32) ApiGetVolumeRequest {
	r.perPage = &perPage
	return r
}
func (r ApiGetVolumeRequest) NextToken(nextToken string) ApiGetVolumeRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiGetVolumeRequest) Execute() (CSIVolume, *_nethttp.Response, error) {
	return r.ApiService.GetVolumeExecute(r)
}

/*
 * GetVolume Method for GetVolume
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param volumeId Volume unique identifier.
 * @return ApiGetVolumeRequest
 */
func (a *VolumesApiService) GetVolume(ctx _context.Context, volumeId string) ApiGetVolumeRequest {
	return ApiGetVolumeRequest{
		ApiService: a,
		ctx: ctx,
		volumeId: volumeId,
	}
}

/*
 * Execute executes the request
 * @return CSIVolume
 */
func (a *VolumesApiService) GetVolumeExecute(r ApiGetVolumeRequest) (CSIVolume, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CSIVolume
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumesApiService.GetVolume")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volume/csi/{volumeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeId"+"}", _neturl.PathEscape(parameterToString(r.volumeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVolumesRequest struct {
	ctx _context.Context
	ApiService *VolumesApiService
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
	nodeId *string
	pluginId *string
	type_ *string
}

func (r ApiGetVolumesRequest) Region(region string) ApiGetVolumesRequest {
	r.region = &region
	return r
}
func (r ApiGetVolumesRequest) Namespace(namespace string) ApiGetVolumesRequest {
	r.namespace = &namespace
	return r
}
func (r ApiGetVolumesRequest) Index(index int32) ApiGetVolumesRequest {
	r.index = &index
	return r
}
func (r ApiGetVolumesRequest) Wait(wait string) ApiGetVolumesRequest {
	r.wait = &wait
	return r
}
func (r ApiGetVolumesRequest) Stale(stale string) ApiGetVolumesRequest {
	r.stale = &stale
	return r
}
func (r ApiGetVolumesRequest) Prefix(prefix string) ApiGetVolumesRequest {
	r.prefix = &prefix
	return r
}
func (r ApiGetVolumesRequest) XNomadToken(xNomadToken string) ApiGetVolumesRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiGetVolumesRequest) PerPage(perPage int32) ApiGetVolumesRequest {
	r.perPage = &perPage
	return r
}
func (r ApiGetVolumesRequest) NextToken(nextToken string) ApiGetVolumesRequest {
	r.nextToken = &nextToken
	return r
}
func (r ApiGetVolumesRequest) NodeId(nodeId string) ApiGetVolumesRequest {
	r.nodeId = &nodeId
	return r
}
func (r ApiGetVolumesRequest) PluginId(pluginId string) ApiGetVolumesRequest {
	r.pluginId = &pluginId
	return r
}
func (r ApiGetVolumesRequest) Type_(type_ string) ApiGetVolumesRequest {
	r.type_ = &type_
	return r
}

func (r ApiGetVolumesRequest) Execute() ([]CSIVolumeListStub, *_nethttp.Response, error) {
	return r.ApiService.GetVolumesExecute(r)
}

/*
 * GetVolumes Method for GetVolumes
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetVolumesRequest
 */
func (a *VolumesApiService) GetVolumes(ctx _context.Context) ApiGetVolumesRequest {
	return ApiGetVolumesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []CSIVolumeListStub
 */
func (a *VolumesApiService) GetVolumesExecute(r ApiGetVolumesRequest) ([]CSIVolumeListStub, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []CSIVolumeListStub
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumesApiService.GetVolumes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	if r.nodeId != nil {
		localVarQueryParams.Add("node_id", parameterToString(*r.nodeId, ""))
	}
	if r.pluginId != nil {
		localVarQueryParams.Add("plugin_id", parameterToString(*r.pluginId, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSnapshotRequest struct {
	ctx _context.Context
	ApiService *VolumesApiService
	cSISnapshotCreateRequest *CSISnapshotCreateRequest
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiPostSnapshotRequest) CSISnapshotCreateRequest(cSISnapshotCreateRequest CSISnapshotCreateRequest) ApiPostSnapshotRequest {
	r.cSISnapshotCreateRequest = &cSISnapshotCreateRequest
	return r
}
func (r ApiPostSnapshotRequest) Region(region string) ApiPostSnapshotRequest {
	r.region = &region
	return r
}
func (r ApiPostSnapshotRequest) Namespace(namespace string) ApiPostSnapshotRequest {
	r.namespace = &namespace
	return r
}
func (r ApiPostSnapshotRequest) XNomadToken(xNomadToken string) ApiPostSnapshotRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiPostSnapshotRequest) IdempotencyToken(idempotencyToken string) ApiPostSnapshotRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiPostSnapshotRequest) Execute() (CSISnapshotCreateResponse, *_nethttp.Response, error) {
	return r.ApiService.PostSnapshotExecute(r)
}

/*
 * PostSnapshot Method for PostSnapshot
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPostSnapshotRequest
 */
func (a *VolumesApiService) PostSnapshot(ctx _context.Context) ApiPostSnapshotRequest {
	return ApiPostSnapshotRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CSISnapshotCreateResponse
 */
func (a *VolumesApiService) PostSnapshotExecute(r ApiPostSnapshotRequest) (CSISnapshotCreateResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CSISnapshotCreateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumesApiService.PostSnapshot")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/snapshot"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.cSISnapshotCreateRequest == nil {
		return localVarReturnValue, nil, reportError("cSISnapshotCreateRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.cSISnapshotCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostVolumeRequest struct {
	ctx _context.Context
	ApiService *VolumesApiService
	cSIVolumeRegisterRequest *CSIVolumeRegisterRequest
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiPostVolumeRequest) CSIVolumeRegisterRequest(cSIVolumeRegisterRequest CSIVolumeRegisterRequest) ApiPostVolumeRequest {
	r.cSIVolumeRegisterRequest = &cSIVolumeRegisterRequest
	return r
}
func (r ApiPostVolumeRequest) Region(region string) ApiPostVolumeRequest {
	r.region = &region
	return r
}
func (r ApiPostVolumeRequest) Namespace(namespace string) ApiPostVolumeRequest {
	r.namespace = &namespace
	return r
}
func (r ApiPostVolumeRequest) XNomadToken(xNomadToken string) ApiPostVolumeRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiPostVolumeRequest) IdempotencyToken(idempotencyToken string) ApiPostVolumeRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiPostVolumeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PostVolumeExecute(r)
}

/*
 * PostVolume Method for PostVolume
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPostVolumeRequest
 */
func (a *VolumesApiService) PostVolume(ctx _context.Context) ApiPostVolumeRequest {
	return ApiPostVolumeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *VolumesApiService) PostVolumeExecute(r ApiPostVolumeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumesApiService.PostVolume")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.cSIVolumeRegisterRequest == nil {
		return nil, reportError("cSIVolumeRegisterRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.cSIVolumeRegisterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostVolumeRegistrationRequest struct {
	ctx _context.Context
	ApiService *VolumesApiService
	volumeId string
	cSIVolumeRegisterRequest *CSIVolumeRegisterRequest
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiPostVolumeRegistrationRequest) CSIVolumeRegisterRequest(cSIVolumeRegisterRequest CSIVolumeRegisterRequest) ApiPostVolumeRegistrationRequest {
	r.cSIVolumeRegisterRequest = &cSIVolumeRegisterRequest
	return r
}
func (r ApiPostVolumeRegistrationRequest) Region(region string) ApiPostVolumeRegistrationRequest {
	r.region = &region
	return r
}
func (r ApiPostVolumeRegistrationRequest) Namespace(namespace string) ApiPostVolumeRegistrationRequest {
	r.namespace = &namespace
	return r
}
func (r ApiPostVolumeRegistrationRequest) XNomadToken(xNomadToken string) ApiPostVolumeRegistrationRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiPostVolumeRegistrationRequest) IdempotencyToken(idempotencyToken string) ApiPostVolumeRegistrationRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiPostVolumeRegistrationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PostVolumeRegistrationExecute(r)
}

/*
 * PostVolumeRegistration Method for PostVolumeRegistration
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param volumeId Volume unique identifier.
 * @return ApiPostVolumeRegistrationRequest
 */
func (a *VolumesApiService) PostVolumeRegistration(ctx _context.Context, volumeId string) ApiPostVolumeRegistrationRequest {
	return ApiPostVolumeRegistrationRequest{
		ApiService: a,
		ctx: ctx,
		volumeId: volumeId,
	}
}

/*
 * Execute executes the request
 */
func (a *VolumesApiService) PostVolumeRegistrationExecute(r ApiPostVolumeRegistrationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumesApiService.PostVolumeRegistration")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volume/csi/{volumeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeId"+"}", _neturl.PathEscape(parameterToString(r.volumeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.cSIVolumeRegisterRequest == nil {
		return nil, reportError("cSIVolumeRegisterRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.cSIVolumeRegisterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
