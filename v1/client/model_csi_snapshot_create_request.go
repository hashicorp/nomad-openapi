/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CSISnapshotCreateRequest struct for CSISnapshotCreateRequest
type CSISnapshotCreateRequest struct {
	Namespace *string `json:"Namespace,omitempty"`
	Region *string `json:"Region,omitempty"`
	SecretID *string `json:"SecretID,omitempty"`
	Snapshots *[]CSISnapshot `json:"Snapshots,omitempty"`
}

// NewCSISnapshotCreateRequest instantiates a new CSISnapshotCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSISnapshotCreateRequest() *CSISnapshotCreateRequest {
	this := CSISnapshotCreateRequest{}
	return &this
}

// NewCSISnapshotCreateRequestWithDefaults instantiates a new CSISnapshotCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSISnapshotCreateRequestWithDefaults() *CSISnapshotCreateRequest {
	this := CSISnapshotCreateRequest{}
	return &this
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *CSISnapshotCreateRequest) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSISnapshotCreateRequest) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *CSISnapshotCreateRequest) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *CSISnapshotCreateRequest) SetNamespace(v string) {
	o.Namespace = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CSISnapshotCreateRequest) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSISnapshotCreateRequest) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CSISnapshotCreateRequest) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CSISnapshotCreateRequest) SetRegion(v string) {
	o.Region = &v
}

// GetSecretID returns the SecretID field value if set, zero value otherwise.
func (o *CSISnapshotCreateRequest) GetSecretID() string {
	if o == nil || o.SecretID == nil {
		var ret string
		return ret
	}
	return *o.SecretID
}

// GetSecretIDOk returns a tuple with the SecretID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSISnapshotCreateRequest) GetSecretIDOk() (*string, bool) {
	if o == nil || o.SecretID == nil {
		return nil, false
	}
	return o.SecretID, true
}

// HasSecretID returns a boolean if a field has been set.
func (o *CSISnapshotCreateRequest) HasSecretID() bool {
	if o != nil && o.SecretID != nil {
		return true
	}

	return false
}

// SetSecretID gets a reference to the given string and assigns it to the SecretID field.
func (o *CSISnapshotCreateRequest) SetSecretID(v string) {
	o.SecretID = &v
}

// GetSnapshots returns the Snapshots field value if set, zero value otherwise.
func (o *CSISnapshotCreateRequest) GetSnapshots() []CSISnapshot {
	if o == nil || o.Snapshots == nil {
		var ret []CSISnapshot
		return ret
	}
	return *o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSISnapshotCreateRequest) GetSnapshotsOk() (*[]CSISnapshot, bool) {
	if o == nil || o.Snapshots == nil {
		return nil, false
	}
	return o.Snapshots, true
}

// HasSnapshots returns a boolean if a field has been set.
func (o *CSISnapshotCreateRequest) HasSnapshots() bool {
	if o != nil && o.Snapshots != nil {
		return true
	}

	return false
}

// SetSnapshots gets a reference to the given []CSISnapshot and assigns it to the Snapshots field.
func (o *CSISnapshotCreateRequest) SetSnapshots(v []CSISnapshot) {
	o.Snapshots = &v
}

func (o CSISnapshotCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Namespace != nil {
		toSerialize["Namespace"] = o.Namespace
	}
	if o.Region != nil {
		toSerialize["Region"] = o.Region
	}
	if o.SecretID != nil {
		toSerialize["SecretID"] = o.SecretID
	}
	if o.Snapshots != nil {
		toSerialize["Snapshots"] = o.Snapshots
	}
	return json.Marshal(toSerialize)
}

type NullableCSISnapshotCreateRequest struct {
	value *CSISnapshotCreateRequest
	isSet bool
}

func (v NullableCSISnapshotCreateRequest) Get() *CSISnapshotCreateRequest {
	return v.value
}

func (v *NullableCSISnapshotCreateRequest) Set(val *CSISnapshotCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCSISnapshotCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCSISnapshotCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSISnapshotCreateRequest(val *CSISnapshotCreateRequest) *NullableCSISnapshotCreateRequest {
	return &NullableCSISnapshotCreateRequest{value: val, isSet: true}
}

func (v NullableCSISnapshotCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSISnapshotCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


