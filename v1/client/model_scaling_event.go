/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ScalingEvent struct for ScalingEvent
type ScalingEvent struct {
	Count *int64 `json:"Count,omitempty"`
	CreateIndex *int32 `json:"CreateIndex,omitempty"`
	Error *bool `json:"Error,omitempty"`
	EvalID *string `json:"EvalID,omitempty"`
	Message *string `json:"Message,omitempty"`
	Meta *map[string]interface{} `json:"Meta,omitempty"`
	PreviousCount *int64 `json:"PreviousCount,omitempty"`
	Time *int32 `json:"Time,omitempty"`
}

// NewScalingEvent instantiates a new ScalingEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScalingEvent() *ScalingEvent {
	this := ScalingEvent{}
	return &this
}

// NewScalingEventWithDefaults instantiates a new ScalingEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScalingEventWithDefaults() *ScalingEvent {
	this := ScalingEvent{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ScalingEvent) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalingEvent) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ScalingEvent) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *ScalingEvent) SetCount(v int64) {
	o.Count = &v
}

// GetCreateIndex returns the CreateIndex field value if set, zero value otherwise.
func (o *ScalingEvent) GetCreateIndex() int32 {
	if o == nil || o.CreateIndex == nil {
		var ret int32
		return ret
	}
	return *o.CreateIndex
}

// GetCreateIndexOk returns a tuple with the CreateIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalingEvent) GetCreateIndexOk() (*int32, bool) {
	if o == nil || o.CreateIndex == nil {
		return nil, false
	}
	return o.CreateIndex, true
}

// HasCreateIndex returns a boolean if a field has been set.
func (o *ScalingEvent) HasCreateIndex() bool {
	if o != nil && o.CreateIndex != nil {
		return true
	}

	return false
}

// SetCreateIndex gets a reference to the given int32 and assigns it to the CreateIndex field.
func (o *ScalingEvent) SetCreateIndex(v int32) {
	o.CreateIndex = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ScalingEvent) GetError() bool {
	if o == nil || o.Error == nil {
		var ret bool
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalingEvent) GetErrorOk() (*bool, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ScalingEvent) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given bool and assigns it to the Error field.
func (o *ScalingEvent) SetError(v bool) {
	o.Error = &v
}

// GetEvalID returns the EvalID field value if set, zero value otherwise.
func (o *ScalingEvent) GetEvalID() string {
	if o == nil || o.EvalID == nil {
		var ret string
		return ret
	}
	return *o.EvalID
}

// GetEvalIDOk returns a tuple with the EvalID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalingEvent) GetEvalIDOk() (*string, bool) {
	if o == nil || o.EvalID == nil {
		return nil, false
	}
	return o.EvalID, true
}

// HasEvalID returns a boolean if a field has been set.
func (o *ScalingEvent) HasEvalID() bool {
	if o != nil && o.EvalID != nil {
		return true
	}

	return false
}

// SetEvalID gets a reference to the given string and assigns it to the EvalID field.
func (o *ScalingEvent) SetEvalID(v string) {
	o.EvalID = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ScalingEvent) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalingEvent) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ScalingEvent) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ScalingEvent) SetMessage(v string) {
	o.Message = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ScalingEvent) GetMeta() map[string]interface{} {
	if o == nil || o.Meta == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalingEvent) GetMetaOk() (*map[string]interface{}, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ScalingEvent) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *ScalingEvent) SetMeta(v map[string]interface{}) {
	o.Meta = &v
}

// GetPreviousCount returns the PreviousCount field value if set, zero value otherwise.
func (o *ScalingEvent) GetPreviousCount() int64 {
	if o == nil || o.PreviousCount == nil {
		var ret int64
		return ret
	}
	return *o.PreviousCount
}

// GetPreviousCountOk returns a tuple with the PreviousCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalingEvent) GetPreviousCountOk() (*int64, bool) {
	if o == nil || o.PreviousCount == nil {
		return nil, false
	}
	return o.PreviousCount, true
}

// HasPreviousCount returns a boolean if a field has been set.
func (o *ScalingEvent) HasPreviousCount() bool {
	if o != nil && o.PreviousCount != nil {
		return true
	}

	return false
}

// SetPreviousCount gets a reference to the given int64 and assigns it to the PreviousCount field.
func (o *ScalingEvent) SetPreviousCount(v int64) {
	o.PreviousCount = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ScalingEvent) GetTime() int32 {
	if o == nil || o.Time == nil {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalingEvent) GetTimeOk() (*int32, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ScalingEvent) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *ScalingEvent) SetTime(v int32) {
	o.Time = &v
}

func (o ScalingEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["Count"] = o.Count
	}
	if o.CreateIndex != nil {
		toSerialize["CreateIndex"] = o.CreateIndex
	}
	if o.Error != nil {
		toSerialize["Error"] = o.Error
	}
	if o.EvalID != nil {
		toSerialize["EvalID"] = o.EvalID
	}
	if o.Message != nil {
		toSerialize["Message"] = o.Message
	}
	if o.Meta != nil {
		toSerialize["Meta"] = o.Meta
	}
	if o.PreviousCount != nil {
		toSerialize["PreviousCount"] = o.PreviousCount
	}
	if o.Time != nil {
		toSerialize["Time"] = o.Time
	}
	return json.Marshal(toSerialize)
}

type NullableScalingEvent struct {
	value *ScalingEvent
	isSet bool
}

func (v NullableScalingEvent) Get() *ScalingEvent {
	return v.value
}

func (v *NullableScalingEvent) Set(val *ScalingEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableScalingEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableScalingEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScalingEvent(val *ScalingEvent) *NullableScalingEvent {
	return &NullableScalingEvent{value: val, isSet: true}
}

func (v NullableScalingEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScalingEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


