"""
    Nomad

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.1.4
    Contact: support@hashicorp.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.allocation_list_stub import AllocationListStub
from openapi_client.model.deployment import Deployment
from openapi_client.model.evaluation import Evaluation
from openapi_client.model.job import Job
from openapi_client.model.job_deregister_response import JobDeregisterResponse
from openapi_client.model.job_dispatch_request import JobDispatchRequest
from openapi_client.model.job_dispatch_response import JobDispatchResponse
from openapi_client.model.job_evaluate_request import JobEvaluateRequest
from openapi_client.model.job_list_stub import JobListStub
from openapi_client.model.job_plan_request import JobPlanRequest
from openapi_client.model.job_plan_response import JobPlanResponse
from openapi_client.model.job_register_request import JobRegisterRequest
from openapi_client.model.job_register_response import JobRegisterResponse
from openapi_client.model.job_revert_request import JobRevertRequest
from openapi_client.model.job_scale_status_response import JobScaleStatusResponse
from openapi_client.model.job_stability_request import JobStabilityRequest
from openapi_client.model.job_stability_response import JobStabilityResponse
from openapi_client.model.job_summary import JobSummary
from openapi_client.model.job_validate_request import JobValidateRequest
from openapi_client.model.job_validate_response import JobValidateResponse
from openapi_client.model.job_versions_response import JobVersionsResponse
from openapi_client.model.jobs_parse_request import JobsParseRequest
from openapi_client.model.periodic_force_response import PeriodicForceResponse
from openapi_client.model.scaling_request import ScalingRequest


class JobsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __delete_job(
            self,
            job_name,
            **kwargs
        ):
            """delete_job  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_job(job_name, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                purge (bool): Boolean flag indicating whether to purge allocations of the job after deleting.. [optional]
                _global (bool): Boolean flag indicating whether the operation should apply to all instances of the job globally.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobDeregisterResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            return self.call_with_http_info(**kwargs)

        self.delete_job = _Endpoint(
            settings={
                'response_type': (JobDeregisterResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}',
                'operation_id': 'delete_job',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                    'purge',
                    '_global',
                ],
                'required': [
                    'job_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                    'purge':
                        (bool,),
                    '_global':
                        (bool,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                    'purge': 'purge',
                    '_global': 'global',
                },
                'location_map': {
                    'job_name': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                    'purge': 'query',
                    '_global': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_job
        )

        def __get_job(
            self,
            job_name,
            **kwargs
        ):
            """get_job  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_job(job_name, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
                wait (str): Provided with IndexParam to wait for change.. [optional]
                stale (str): If present, results will include stale reads.. [optional]
                prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                per_page (int): Maximum number of results to return.. [optional]
                next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Job
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            return self.call_with_http_info(**kwargs)

        self.get_job = _Endpoint(
            settings={
                'response_type': (Job,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}',
                'operation_id': 'get_job',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                ],
                'required': [
                    'job_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_job
        )

        def __get_job_allocations(
            self,
            job_name,
            **kwargs
        ):
            """get_job_allocations  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_job_allocations(job_name, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
                wait (str): Provided with IndexParam to wait for change.. [optional]
                stale (str): If present, results will include stale reads.. [optional]
                prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                per_page (int): Maximum number of results to return.. [optional]
                next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
                all (bool): Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AllocationListStub]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            return self.call_with_http_info(**kwargs)

        self.get_job_allocations = _Endpoint(
            settings={
                'response_type': ([AllocationListStub],),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/allocations',
                'operation_id': 'get_job_allocations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                    'all',
                ],
                'required': [
                    'job_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                    'all':
                        (bool,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                    'all': 'all',
                },
                'location_map': {
                    'job_name': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                    'all': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_job_allocations
        )

        def __get_job_deployment(
            self,
            job_name,
            **kwargs
        ):
            """get_job_deployment  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_job_deployment(job_name, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
                wait (str): Provided with IndexParam to wait for change.. [optional]
                stale (str): If present, results will include stale reads.. [optional]
                prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                per_page (int): Maximum number of results to return.. [optional]
                next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Deployment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            return self.call_with_http_info(**kwargs)

        self.get_job_deployment = _Endpoint(
            settings={
                'response_type': (Deployment,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/deployment',
                'operation_id': 'get_job_deployment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                ],
                'required': [
                    'job_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_job_deployment
        )

        def __get_job_deployments(
            self,
            job_name,
            **kwargs
        ):
            """get_job_deployments  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_job_deployments(job_name, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
                wait (str): Provided with IndexParam to wait for change.. [optional]
                stale (str): If present, results will include stale reads.. [optional]
                prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                per_page (int): Maximum number of results to return.. [optional]
                next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
                all (int): Flag indicating whether to constrain by job creation index or not.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Deployment]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            return self.call_with_http_info(**kwargs)

        self.get_job_deployments = _Endpoint(
            settings={
                'response_type': ([Deployment],),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/deployments',
                'operation_id': 'get_job_deployments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                    'all',
                ],
                'required': [
                    'job_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                    'all':
                        (int,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                    'all': 'all',
                },
                'location_map': {
                    'job_name': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                    'all': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_job_deployments
        )

        def __get_job_evaluations(
            self,
            job_name,
            **kwargs
        ):
            """get_job_evaluations  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_job_evaluations(job_name, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
                wait (str): Provided with IndexParam to wait for change.. [optional]
                stale (str): If present, results will include stale reads.. [optional]
                prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                per_page (int): Maximum number of results to return.. [optional]
                next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Evaluation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            return self.call_with_http_info(**kwargs)

        self.get_job_evaluations = _Endpoint(
            settings={
                'response_type': ([Evaluation],),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/evaluations',
                'operation_id': 'get_job_evaluations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                ],
                'required': [
                    'job_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_job_evaluations
        )

        def __get_job_scale_status(
            self,
            job_name,
            **kwargs
        ):
            """get_job_scale_status  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_job_scale_status(job_name, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
                wait (str): Provided with IndexParam to wait for change.. [optional]
                stale (str): If present, results will include stale reads.. [optional]
                prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                per_page (int): Maximum number of results to return.. [optional]
                next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobScaleStatusResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            return self.call_with_http_info(**kwargs)

        self.get_job_scale_status = _Endpoint(
            settings={
                'response_type': (JobScaleStatusResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/scale',
                'operation_id': 'get_job_scale_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                ],
                'required': [
                    'job_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_job_scale_status
        )

        def __get_job_summary(
            self,
            job_name,
            **kwargs
        ):
            """get_job_summary  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_job_summary(job_name, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
                wait (str): Provided with IndexParam to wait for change.. [optional]
                stale (str): If present, results will include stale reads.. [optional]
                prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                per_page (int): Maximum number of results to return.. [optional]
                next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobSummary
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            return self.call_with_http_info(**kwargs)

        self.get_job_summary = _Endpoint(
            settings={
                'response_type': (JobSummary,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/summary',
                'operation_id': 'get_job_summary',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                ],
                'required': [
                    'job_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_job_summary
        )

        def __get_job_versions(
            self,
            job_name,
            **kwargs
        ):
            """get_job_versions  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_job_versions(job_name, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
                wait (str): Provided with IndexParam to wait for change.. [optional]
                stale (str): If present, results will include stale reads.. [optional]
                prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                per_page (int): Maximum number of results to return.. [optional]
                next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
                diffs (bool): Boolean flag indicating whether to compute job diffs.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobVersionsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            return self.call_with_http_info(**kwargs)

        self.get_job_versions = _Endpoint(
            settings={
                'response_type': (JobVersionsResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/versions',
                'operation_id': 'get_job_versions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                    'diffs',
                ],
                'required': [
                    'job_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                    'diffs':
                        (bool,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                    'diffs': 'diffs',
                },
                'location_map': {
                    'job_name': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                    'diffs': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_job_versions
        )

        def __get_jobs(
            self,
            **kwargs
        ):
            """get_jobs  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_jobs(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
                wait (str): Provided with IndexParam to wait for change.. [optional]
                stale (str): If present, results will include stale reads.. [optional]
                prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                per_page (int): Maximum number of results to return.. [optional]
                next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [JobListStub]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_jobs = _Endpoint(
            settings={
                'response_type': ([JobListStub],),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/jobs',
                'operation_id': 'get_jobs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                },
                'location_map': {
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_jobs
        )

        def __post_job(
            self,
            job_name,
            job_register_request,
            **kwargs
        ):
            """post_job  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_job(job_name, job_register_request, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.
                job_register_request (JobRegisterRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobRegisterResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            kwargs['job_register_request'] = \
                job_register_request
            return self.call_with_http_info(**kwargs)

        self.post_job = _Endpoint(
            settings={
                'response_type': (JobRegisterResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}',
                'operation_id': 'post_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'job_register_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'job_name',
                    'job_register_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'job_register_request':
                        (JobRegisterRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'job_register_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_job
        )

        def __post_job_dispatch(
            self,
            job_name,
            job_dispatch_request,
            **kwargs
        ):
            """post_job_dispatch  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_job_dispatch(job_name, job_dispatch_request, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.
                job_dispatch_request (JobDispatchRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobDispatchResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            kwargs['job_dispatch_request'] = \
                job_dispatch_request
            return self.call_with_http_info(**kwargs)

        self.post_job_dispatch = _Endpoint(
            settings={
                'response_type': (JobDispatchResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/dispatch',
                'operation_id': 'post_job_dispatch',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'job_dispatch_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'job_name',
                    'job_dispatch_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'job_dispatch_request':
                        (JobDispatchRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'job_dispatch_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_job_dispatch
        )

        def __post_job_evaluate(
            self,
            job_name,
            job_evaluate_request,
            **kwargs
        ):
            """post_job_evaluate  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_job_evaluate(job_name, job_evaluate_request, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.
                job_evaluate_request (JobEvaluateRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobRegisterResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            kwargs['job_evaluate_request'] = \
                job_evaluate_request
            return self.call_with_http_info(**kwargs)

        self.post_job_evaluate = _Endpoint(
            settings={
                'response_type': (JobRegisterResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/evaluate',
                'operation_id': 'post_job_evaluate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'job_evaluate_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'job_name',
                    'job_evaluate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'job_evaluate_request':
                        (JobEvaluateRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'job_evaluate_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_job_evaluate
        )

        def __post_job_parse(
            self,
            jobs_parse_request,
            **kwargs
        ):
            """post_job_parse  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_job_parse(jobs_parse_request, async_req=True)
            >>> result = thread.get()

            Args:
                jobs_parse_request (JobsParseRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Job
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['jobs_parse_request'] = \
                jobs_parse_request
            return self.call_with_http_info(**kwargs)

        self.post_job_parse = _Endpoint(
            settings={
                'response_type': (Job,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/jobs/parse',
                'operation_id': 'post_job_parse',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobs_parse_request',
                ],
                'required': [
                    'jobs_parse_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobs_parse_request':
                        (JobsParseRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'jobs_parse_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_job_parse
        )

        def __post_job_periodic_force(
            self,
            job_name,
            **kwargs
        ):
            """post_job_periodic_force  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_job_periodic_force(job_name, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PeriodicForceResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            return self.call_with_http_info(**kwargs)

        self.post_job_periodic_force = _Endpoint(
            settings={
                'response_type': (PeriodicForceResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/periodic/force',
                'operation_id': 'post_job_periodic_force',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'job_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_job_periodic_force
        )

        def __post_job_plan(
            self,
            job_name,
            job_plan_request,
            **kwargs
        ):
            """post_job_plan  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_job_plan(job_name, job_plan_request, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.
                job_plan_request (JobPlanRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobPlanResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            kwargs['job_plan_request'] = \
                job_plan_request
            return self.call_with_http_info(**kwargs)

        self.post_job_plan = _Endpoint(
            settings={
                'response_type': (JobPlanResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/plan',
                'operation_id': 'post_job_plan',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'job_plan_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'job_name',
                    'job_plan_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'job_plan_request':
                        (JobPlanRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'job_plan_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_job_plan
        )

        def __post_job_revert(
            self,
            job_name,
            job_revert_request,
            **kwargs
        ):
            """post_job_revert  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_job_revert(job_name, job_revert_request, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.
                job_revert_request (JobRevertRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobRegisterResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            kwargs['job_revert_request'] = \
                job_revert_request
            return self.call_with_http_info(**kwargs)

        self.post_job_revert = _Endpoint(
            settings={
                'response_type': (JobRegisterResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/revert',
                'operation_id': 'post_job_revert',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'job_revert_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'job_name',
                    'job_revert_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'job_revert_request':
                        (JobRevertRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'job_revert_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_job_revert
        )

        def __post_job_scaling_request(
            self,
            job_name,
            scaling_request,
            **kwargs
        ):
            """post_job_scaling_request  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_job_scaling_request(job_name, scaling_request, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.
                scaling_request (ScalingRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobRegisterResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            kwargs['scaling_request'] = \
                scaling_request
            return self.call_with_http_info(**kwargs)

        self.post_job_scaling_request = _Endpoint(
            settings={
                'response_type': (JobRegisterResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/scale',
                'operation_id': 'post_job_scaling_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'scaling_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'job_name',
                    'scaling_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'scaling_request':
                        (ScalingRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'scaling_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_job_scaling_request
        )

        def __post_job_stability(
            self,
            job_name,
            job_stability_request,
            **kwargs
        ):
            """post_job_stability  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_job_stability(job_name, job_stability_request, async_req=True)
            >>> result = thread.get()

            Args:
                job_name (str): The job identifier.
                job_stability_request (JobStabilityRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobStabilityResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_name'] = \
                job_name
            kwargs['job_stability_request'] = \
                job_stability_request
            return self.call_with_http_info(**kwargs)

        self.post_job_stability = _Endpoint(
            settings={
                'response_type': (JobStabilityResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/job/{jobName}/stable',
                'operation_id': 'post_job_stability',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_name',
                    'job_stability_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'job_name',
                    'job_stability_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_name':
                        (str,),
                    'job_stability_request':
                        (JobStabilityRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'job_name': 'jobName',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'job_name': 'path',
                    'job_stability_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_job_stability
        )

        def __post_job_validate_request(
            self,
            job_validate_request,
            **kwargs
        ):
            """post_job_validate_request  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_job_validate_request(job_validate_request, async_req=True)
            >>> result = thread.get()

            Args:
                job_validate_request (JobValidateRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobValidateResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_validate_request'] = \
                job_validate_request
            return self.call_with_http_info(**kwargs)

        self.post_job_validate_request = _Endpoint(
            settings={
                'response_type': (JobValidateResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/validate/job',
                'operation_id': 'post_job_validate_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_validate_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'job_validate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_validate_request':
                        (JobValidateRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'job_validate_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_job_validate_request
        )

        def __register_job(
            self,
            job_register_request,
            **kwargs
        ):
            """register_job  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.register_job(job_register_request, async_req=True)
            >>> result = thread.get()

            Args:
                job_register_request (JobRegisterRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobRegisterResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['job_register_request'] = \
                job_register_request
            return self.call_with_http_info(**kwargs)

        self.register_job = _Endpoint(
            settings={
                'response_type': (JobRegisterResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/jobs',
                'operation_id': 'register_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'job_register_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'job_register_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'job_register_request':
                        (JobRegisterRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'job_register_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__register_job
        )
