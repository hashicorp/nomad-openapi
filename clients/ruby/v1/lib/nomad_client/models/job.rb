=begin
#Nomad

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.1.4
Contact: support@hashicorp.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module NomadClient
  class Job
    attr_accessor :affinities

    attr_accessor :all_at_once

    attr_accessor :constraints

    attr_accessor :consul_namespace

    attr_accessor :consul_token

    attr_accessor :create_index

    attr_accessor :datacenters

    attr_accessor :dispatched

    attr_accessor :id

    attr_accessor :job_modify_index

    attr_accessor :meta

    attr_accessor :migrate

    attr_accessor :modify_index

    attr_accessor :multiregion

    attr_accessor :name

    attr_accessor :namespace

    attr_accessor :nomad_token_id

    attr_accessor :parameterized_job

    attr_accessor :parent_id

    attr_accessor :payload

    attr_accessor :periodic

    attr_accessor :priority

    attr_accessor :region

    attr_accessor :reschedule

    attr_accessor :spreads

    attr_accessor :stable

    attr_accessor :status

    attr_accessor :status_description

    attr_accessor :stop

    attr_accessor :submit_time

    attr_accessor :task_groups

    attr_accessor :type

    attr_accessor :update

    attr_accessor :vault_namespace

    attr_accessor :vault_token

    attr_accessor :version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'affinities' => :'Affinities',
        :'all_at_once' => :'AllAtOnce',
        :'constraints' => :'Constraints',
        :'consul_namespace' => :'ConsulNamespace',
        :'consul_token' => :'ConsulToken',
        :'create_index' => :'CreateIndex',
        :'datacenters' => :'Datacenters',
        :'dispatched' => :'Dispatched',
        :'id' => :'ID',
        :'job_modify_index' => :'JobModifyIndex',
        :'meta' => :'Meta',
        :'migrate' => :'Migrate',
        :'modify_index' => :'ModifyIndex',
        :'multiregion' => :'Multiregion',
        :'name' => :'Name',
        :'namespace' => :'Namespace',
        :'nomad_token_id' => :'NomadTokenID',
        :'parameterized_job' => :'ParameterizedJob',
        :'parent_id' => :'ParentID',
        :'payload' => :'Payload',
        :'periodic' => :'Periodic',
        :'priority' => :'Priority',
        :'region' => :'Region',
        :'reschedule' => :'Reschedule',
        :'spreads' => :'Spreads',
        :'stable' => :'Stable',
        :'status' => :'Status',
        :'status_description' => :'StatusDescription',
        :'stop' => :'Stop',
        :'submit_time' => :'SubmitTime',
        :'task_groups' => :'TaskGroups',
        :'type' => :'Type',
        :'update' => :'Update',
        :'vault_namespace' => :'VaultNamespace',
        :'vault_token' => :'VaultToken',
        :'version' => :'Version'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'affinities' => :'Array<Affinity>',
        :'all_at_once' => :'Boolean',
        :'constraints' => :'Array<Constraint>',
        :'consul_namespace' => :'String',
        :'consul_token' => :'String',
        :'create_index' => :'Integer',
        :'datacenters' => :'Array<String>',
        :'dispatched' => :'Boolean',
        :'id' => :'String',
        :'job_modify_index' => :'Integer',
        :'meta' => :'Hash<String, String>',
        :'migrate' => :'MigrateStrategy',
        :'modify_index' => :'Integer',
        :'multiregion' => :'Multiregion',
        :'name' => :'String',
        :'namespace' => :'String',
        :'nomad_token_id' => :'String',
        :'parameterized_job' => :'ParameterizedJobConfig',
        :'parent_id' => :'String',
        :'payload' => :'String',
        :'periodic' => :'PeriodicConfig',
        :'priority' => :'Integer',
        :'region' => :'String',
        :'reschedule' => :'ReschedulePolicy',
        :'spreads' => :'Array<Spread>',
        :'stable' => :'Boolean',
        :'status' => :'String',
        :'status_description' => :'String',
        :'stop' => :'Boolean',
        :'submit_time' => :'Integer',
        :'task_groups' => :'Array<TaskGroup>',
        :'type' => :'String',
        :'update' => :'UpdateStrategy',
        :'vault_namespace' => :'String',
        :'vault_token' => :'String',
        :'version' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NomadClient::Job` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NomadClient::Job`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'affinities')
        if (value = attributes[:'affinities']).is_a?(Array)
          self.affinities = value
        end
      end

      if attributes.key?(:'all_at_once')
        self.all_at_once = attributes[:'all_at_once']
      end

      if attributes.key?(:'constraints')
        if (value = attributes[:'constraints']).is_a?(Array)
          self.constraints = value
        end
      end

      if attributes.key?(:'consul_namespace')
        self.consul_namespace = attributes[:'consul_namespace']
      end

      if attributes.key?(:'consul_token')
        self.consul_token = attributes[:'consul_token']
      end

      if attributes.key?(:'create_index')
        self.create_index = attributes[:'create_index']
      end

      if attributes.key?(:'datacenters')
        if (value = attributes[:'datacenters']).is_a?(Array)
          self.datacenters = value
        end
      end

      if attributes.key?(:'dispatched')
        self.dispatched = attributes[:'dispatched']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'job_modify_index')
        self.job_modify_index = attributes[:'job_modify_index']
      end

      if attributes.key?(:'meta')
        if (value = attributes[:'meta']).is_a?(Hash)
          self.meta = value
        end
      end

      if attributes.key?(:'migrate')
        self.migrate = attributes[:'migrate']
      end

      if attributes.key?(:'modify_index')
        self.modify_index = attributes[:'modify_index']
      end

      if attributes.key?(:'multiregion')
        self.multiregion = attributes[:'multiregion']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'namespace')
        self.namespace = attributes[:'namespace']
      end

      if attributes.key?(:'nomad_token_id')
        self.nomad_token_id = attributes[:'nomad_token_id']
      end

      if attributes.key?(:'parameterized_job')
        self.parameterized_job = attributes[:'parameterized_job']
      end

      if attributes.key?(:'parent_id')
        self.parent_id = attributes[:'parent_id']
      end

      if attributes.key?(:'payload')
        self.payload = attributes[:'payload']
      end

      if attributes.key?(:'periodic')
        self.periodic = attributes[:'periodic']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.key?(:'reschedule')
        self.reschedule = attributes[:'reschedule']
      end

      if attributes.key?(:'spreads')
        if (value = attributes[:'spreads']).is_a?(Array)
          self.spreads = value
        end
      end

      if attributes.key?(:'stable')
        self.stable = attributes[:'stable']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_description')
        self.status_description = attributes[:'status_description']
      end

      if attributes.key?(:'stop')
        self.stop = attributes[:'stop']
      end

      if attributes.key?(:'submit_time')
        self.submit_time = attributes[:'submit_time']
      end

      if attributes.key?(:'task_groups')
        if (value = attributes[:'task_groups']).is_a?(Array)
          self.task_groups = value
        end
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'update')
        self.update = attributes[:'update']
      end

      if attributes.key?(:'vault_namespace')
        self.vault_namespace = attributes[:'vault_namespace']
      end

      if attributes.key?(:'vault_token')
        self.vault_token = attributes[:'vault_token']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@create_index.nil? && @create_index > 384
        invalid_properties.push('invalid value for "create_index", must be smaller than or equal to 384.')
      end

      if !@create_index.nil? && @create_index < 0
        invalid_properties.push('invalid value for "create_index", must be greater than or equal to 0.')
      end

      if !@job_modify_index.nil? && @job_modify_index > 384
        invalid_properties.push('invalid value for "job_modify_index", must be smaller than or equal to 384.')
      end

      if !@job_modify_index.nil? && @job_modify_index < 0
        invalid_properties.push('invalid value for "job_modify_index", must be greater than or equal to 0.')
      end

      if !@modify_index.nil? && @modify_index > 384
        invalid_properties.push('invalid value for "modify_index", must be smaller than or equal to 384.')
      end

      if !@modify_index.nil? && @modify_index < 0
        invalid_properties.push('invalid value for "modify_index", must be greater than or equal to 0.')
      end

      if !@version.nil? && @version > 384
        invalid_properties.push('invalid value for "version", must be smaller than or equal to 384.')
      end

      if !@version.nil? && @version < 0
        invalid_properties.push('invalid value for "version", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@create_index.nil? && @create_index > 384
      return false if !@create_index.nil? && @create_index < 0
      return false if !@job_modify_index.nil? && @job_modify_index > 384
      return false if !@job_modify_index.nil? && @job_modify_index < 0
      return false if !@modify_index.nil? && @modify_index > 384
      return false if !@modify_index.nil? && @modify_index < 0
      return false if !@version.nil? && @version > 384
      return false if !@version.nil? && @version < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] create_index Value to be assigned
    def create_index=(create_index)
      if !create_index.nil? && create_index > 384
        fail ArgumentError, 'invalid value for "create_index", must be smaller than or equal to 384.'
      end

      if !create_index.nil? && create_index < 0
        fail ArgumentError, 'invalid value for "create_index", must be greater than or equal to 0.'
      end

      @create_index = create_index
    end

    # Custom attribute writer method with validation
    # @param [Object] job_modify_index Value to be assigned
    def job_modify_index=(job_modify_index)
      if !job_modify_index.nil? && job_modify_index > 384
        fail ArgumentError, 'invalid value for "job_modify_index", must be smaller than or equal to 384.'
      end

      if !job_modify_index.nil? && job_modify_index < 0
        fail ArgumentError, 'invalid value for "job_modify_index", must be greater than or equal to 0.'
      end

      @job_modify_index = job_modify_index
    end

    # Custom attribute writer method with validation
    # @param [Object] modify_index Value to be assigned
    def modify_index=(modify_index)
      if !modify_index.nil? && modify_index > 384
        fail ArgumentError, 'invalid value for "modify_index", must be smaller than or equal to 384.'
      end

      if !modify_index.nil? && modify_index < 0
        fail ArgumentError, 'invalid value for "modify_index", must be greater than or equal to 0.'
      end

      @modify_index = modify_index
    end

    # Custom attribute writer method with validation
    # @param [Object] version Value to be assigned
    def version=(version)
      if !version.nil? && version > 384
        fail ArgumentError, 'invalid value for "version", must be smaller than or equal to 384.'
      end

      if !version.nil? && version < 0
        fail ArgumentError, 'invalid value for "version", must be greater than or equal to 0.'
      end

      @version = version
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          affinities == o.affinities &&
          all_at_once == o.all_at_once &&
          constraints == o.constraints &&
          consul_namespace == o.consul_namespace &&
          consul_token == o.consul_token &&
          create_index == o.create_index &&
          datacenters == o.datacenters &&
          dispatched == o.dispatched &&
          id == o.id &&
          job_modify_index == o.job_modify_index &&
          meta == o.meta &&
          migrate == o.migrate &&
          modify_index == o.modify_index &&
          multiregion == o.multiregion &&
          name == o.name &&
          namespace == o.namespace &&
          nomad_token_id == o.nomad_token_id &&
          parameterized_job == o.parameterized_job &&
          parent_id == o.parent_id &&
          payload == o.payload &&
          periodic == o.periodic &&
          priority == o.priority &&
          region == o.region &&
          reschedule == o.reschedule &&
          spreads == o.spreads &&
          stable == o.stable &&
          status == o.status &&
          status_description == o.status_description &&
          stop == o.stop &&
          submit_time == o.submit_time &&
          task_groups == o.task_groups &&
          type == o.type &&
          update == o.update &&
          vault_namespace == o.vault_namespace &&
          vault_token == o.vault_token &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [affinities, all_at_once, constraints, consul_namespace, consul_token, create_index, datacenters, dispatched, id, job_modify_index, meta, migrate, modify_index, multiregion, name, namespace, nomad_token_id, parameterized_job, parent_id, payload, periodic, priority, region, reschedule, spreads, stable, status, status_description, stop, submit_time, task_groups, type, update, vault_namespace, vault_token, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NomadClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
