=begin
#Nomad

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.1.4
Contact: support@hashicorp.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module NomadClient
  class Evaluation
    attr_accessor :annotate_plan

    attr_accessor :blocked_eval

    attr_accessor :class_eligibility

    attr_accessor :create_index

    attr_accessor :create_time

    attr_accessor :deployment_id

    attr_accessor :escaped_computed_class

    attr_accessor :failed_tg_allocs

    attr_accessor :id

    attr_accessor :job_id

    attr_accessor :job_modify_index

    attr_accessor :modify_index

    attr_accessor :modify_time

    attr_accessor :namespace

    attr_accessor :next_eval

    attr_accessor :node_id

    attr_accessor :node_modify_index

    attr_accessor :previous_eval

    attr_accessor :priority

    attr_accessor :queued_allocations

    attr_accessor :quota_limit_reached

    attr_accessor :related_evals

    attr_accessor :snapshot_index

    attr_accessor :status

    attr_accessor :status_description

    attr_accessor :triggered_by

    attr_accessor :type

    attr_accessor :wait

    attr_accessor :wait_until

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'annotate_plan' => :'AnnotatePlan',
        :'blocked_eval' => :'BlockedEval',
        :'class_eligibility' => :'ClassEligibility',
        :'create_index' => :'CreateIndex',
        :'create_time' => :'CreateTime',
        :'deployment_id' => :'DeploymentID',
        :'escaped_computed_class' => :'EscapedComputedClass',
        :'failed_tg_allocs' => :'FailedTGAllocs',
        :'id' => :'ID',
        :'job_id' => :'JobID',
        :'job_modify_index' => :'JobModifyIndex',
        :'modify_index' => :'ModifyIndex',
        :'modify_time' => :'ModifyTime',
        :'namespace' => :'Namespace',
        :'next_eval' => :'NextEval',
        :'node_id' => :'NodeID',
        :'node_modify_index' => :'NodeModifyIndex',
        :'previous_eval' => :'PreviousEval',
        :'priority' => :'Priority',
        :'queued_allocations' => :'QueuedAllocations',
        :'quota_limit_reached' => :'QuotaLimitReached',
        :'related_evals' => :'RelatedEvals',
        :'snapshot_index' => :'SnapshotIndex',
        :'status' => :'Status',
        :'status_description' => :'StatusDescription',
        :'triggered_by' => :'TriggeredBy',
        :'type' => :'Type',
        :'wait' => :'Wait',
        :'wait_until' => :'WaitUntil'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'annotate_plan' => :'Boolean',
        :'blocked_eval' => :'String',
        :'class_eligibility' => :'Hash<String, Boolean>',
        :'create_index' => :'Integer',
        :'create_time' => :'Integer',
        :'deployment_id' => :'String',
        :'escaped_computed_class' => :'Boolean',
        :'failed_tg_allocs' => :'Hash<String, AllocationMetric>',
        :'id' => :'String',
        :'job_id' => :'String',
        :'job_modify_index' => :'Integer',
        :'modify_index' => :'Integer',
        :'modify_time' => :'Integer',
        :'namespace' => :'String',
        :'next_eval' => :'String',
        :'node_id' => :'String',
        :'node_modify_index' => :'Integer',
        :'previous_eval' => :'String',
        :'priority' => :'Integer',
        :'queued_allocations' => :'Hash<String, Integer>',
        :'quota_limit_reached' => :'String',
        :'related_evals' => :'Array<EvaluationStub>',
        :'snapshot_index' => :'Integer',
        :'status' => :'String',
        :'status_description' => :'String',
        :'triggered_by' => :'String',
        :'type' => :'String',
        :'wait' => :'Integer',
        :'wait_until' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'wait_until'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NomadClient::Evaluation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NomadClient::Evaluation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'annotate_plan')
        self.annotate_plan = attributes[:'annotate_plan']
      end

      if attributes.key?(:'blocked_eval')
        self.blocked_eval = attributes[:'blocked_eval']
      end

      if attributes.key?(:'class_eligibility')
        if (value = attributes[:'class_eligibility']).is_a?(Hash)
          self.class_eligibility = value
        end
      end

      if attributes.key?(:'create_index')
        self.create_index = attributes[:'create_index']
      end

      if attributes.key?(:'create_time')
        self.create_time = attributes[:'create_time']
      end

      if attributes.key?(:'deployment_id')
        self.deployment_id = attributes[:'deployment_id']
      end

      if attributes.key?(:'escaped_computed_class')
        self.escaped_computed_class = attributes[:'escaped_computed_class']
      end

      if attributes.key?(:'failed_tg_allocs')
        if (value = attributes[:'failed_tg_allocs']).is_a?(Hash)
          self.failed_tg_allocs = value
        end
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'job_id')
        self.job_id = attributes[:'job_id']
      end

      if attributes.key?(:'job_modify_index')
        self.job_modify_index = attributes[:'job_modify_index']
      end

      if attributes.key?(:'modify_index')
        self.modify_index = attributes[:'modify_index']
      end

      if attributes.key?(:'modify_time')
        self.modify_time = attributes[:'modify_time']
      end

      if attributes.key?(:'namespace')
        self.namespace = attributes[:'namespace']
      end

      if attributes.key?(:'next_eval')
        self.next_eval = attributes[:'next_eval']
      end

      if attributes.key?(:'node_id')
        self.node_id = attributes[:'node_id']
      end

      if attributes.key?(:'node_modify_index')
        self.node_modify_index = attributes[:'node_modify_index']
      end

      if attributes.key?(:'previous_eval')
        self.previous_eval = attributes[:'previous_eval']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'queued_allocations')
        if (value = attributes[:'queued_allocations']).is_a?(Hash)
          self.queued_allocations = value
        end
      end

      if attributes.key?(:'quota_limit_reached')
        self.quota_limit_reached = attributes[:'quota_limit_reached']
      end

      if attributes.key?(:'related_evals')
        if (value = attributes[:'related_evals']).is_a?(Array)
          self.related_evals = value
        end
      end

      if attributes.key?(:'snapshot_index')
        self.snapshot_index = attributes[:'snapshot_index']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_description')
        self.status_description = attributes[:'status_description']
      end

      if attributes.key?(:'triggered_by')
        self.triggered_by = attributes[:'triggered_by']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'wait')
        self.wait = attributes[:'wait']
      end

      if attributes.key?(:'wait_until')
        self.wait_until = attributes[:'wait_until']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@create_index.nil? && @create_index > 384
        invalid_properties.push('invalid value for "create_index", must be smaller than or equal to 384.')
      end

      if !@create_index.nil? && @create_index < 0
        invalid_properties.push('invalid value for "create_index", must be greater than or equal to 0.')
      end

      if !@job_modify_index.nil? && @job_modify_index > 384
        invalid_properties.push('invalid value for "job_modify_index", must be smaller than or equal to 384.')
      end

      if !@job_modify_index.nil? && @job_modify_index < 0
        invalid_properties.push('invalid value for "job_modify_index", must be greater than or equal to 0.')
      end

      if !@modify_index.nil? && @modify_index > 384
        invalid_properties.push('invalid value for "modify_index", must be smaller than or equal to 384.')
      end

      if !@modify_index.nil? && @modify_index < 0
        invalid_properties.push('invalid value for "modify_index", must be greater than or equal to 0.')
      end

      if !@node_modify_index.nil? && @node_modify_index > 384
        invalid_properties.push('invalid value for "node_modify_index", must be smaller than or equal to 384.')
      end

      if !@node_modify_index.nil? && @node_modify_index < 0
        invalid_properties.push('invalid value for "node_modify_index", must be greater than or equal to 0.')
      end

      if !@snapshot_index.nil? && @snapshot_index > 384
        invalid_properties.push('invalid value for "snapshot_index", must be smaller than or equal to 384.')
      end

      if !@snapshot_index.nil? && @snapshot_index < 0
        invalid_properties.push('invalid value for "snapshot_index", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@create_index.nil? && @create_index > 384
      return false if !@create_index.nil? && @create_index < 0
      return false if !@job_modify_index.nil? && @job_modify_index > 384
      return false if !@job_modify_index.nil? && @job_modify_index < 0
      return false if !@modify_index.nil? && @modify_index > 384
      return false if !@modify_index.nil? && @modify_index < 0
      return false if !@node_modify_index.nil? && @node_modify_index > 384
      return false if !@node_modify_index.nil? && @node_modify_index < 0
      return false if !@snapshot_index.nil? && @snapshot_index > 384
      return false if !@snapshot_index.nil? && @snapshot_index < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] create_index Value to be assigned
    def create_index=(create_index)
      if !create_index.nil? && create_index > 384
        fail ArgumentError, 'invalid value for "create_index", must be smaller than or equal to 384.'
      end

      if !create_index.nil? && create_index < 0
        fail ArgumentError, 'invalid value for "create_index", must be greater than or equal to 0.'
      end

      @create_index = create_index
    end

    # Custom attribute writer method with validation
    # @param [Object] job_modify_index Value to be assigned
    def job_modify_index=(job_modify_index)
      if !job_modify_index.nil? && job_modify_index > 384
        fail ArgumentError, 'invalid value for "job_modify_index", must be smaller than or equal to 384.'
      end

      if !job_modify_index.nil? && job_modify_index < 0
        fail ArgumentError, 'invalid value for "job_modify_index", must be greater than or equal to 0.'
      end

      @job_modify_index = job_modify_index
    end

    # Custom attribute writer method with validation
    # @param [Object] modify_index Value to be assigned
    def modify_index=(modify_index)
      if !modify_index.nil? && modify_index > 384
        fail ArgumentError, 'invalid value for "modify_index", must be smaller than or equal to 384.'
      end

      if !modify_index.nil? && modify_index < 0
        fail ArgumentError, 'invalid value for "modify_index", must be greater than or equal to 0.'
      end

      @modify_index = modify_index
    end

    # Custom attribute writer method with validation
    # @param [Object] node_modify_index Value to be assigned
    def node_modify_index=(node_modify_index)
      if !node_modify_index.nil? && node_modify_index > 384
        fail ArgumentError, 'invalid value for "node_modify_index", must be smaller than or equal to 384.'
      end

      if !node_modify_index.nil? && node_modify_index < 0
        fail ArgumentError, 'invalid value for "node_modify_index", must be greater than or equal to 0.'
      end

      @node_modify_index = node_modify_index
    end

    # Custom attribute writer method with validation
    # @param [Object] snapshot_index Value to be assigned
    def snapshot_index=(snapshot_index)
      if !snapshot_index.nil? && snapshot_index > 384
        fail ArgumentError, 'invalid value for "snapshot_index", must be smaller than or equal to 384.'
      end

      if !snapshot_index.nil? && snapshot_index < 0
        fail ArgumentError, 'invalid value for "snapshot_index", must be greater than or equal to 0.'
      end

      @snapshot_index = snapshot_index
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          annotate_plan == o.annotate_plan &&
          blocked_eval == o.blocked_eval &&
          class_eligibility == o.class_eligibility &&
          create_index == o.create_index &&
          create_time == o.create_time &&
          deployment_id == o.deployment_id &&
          escaped_computed_class == o.escaped_computed_class &&
          failed_tg_allocs == o.failed_tg_allocs &&
          id == o.id &&
          job_id == o.job_id &&
          job_modify_index == o.job_modify_index &&
          modify_index == o.modify_index &&
          modify_time == o.modify_time &&
          namespace == o.namespace &&
          next_eval == o.next_eval &&
          node_id == o.node_id &&
          node_modify_index == o.node_modify_index &&
          previous_eval == o.previous_eval &&
          priority == o.priority &&
          queued_allocations == o.queued_allocations &&
          quota_limit_reached == o.quota_limit_reached &&
          related_evals == o.related_evals &&
          snapshot_index == o.snapshot_index &&
          status == o.status &&
          status_description == o.status_description &&
          triggered_by == o.triggered_by &&
          type == o.type &&
          wait == o.wait &&
          wait_until == o.wait_until
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [annotate_plan, blocked_eval, class_eligibility, create_index, create_time, deployment_id, escaped_computed_class, failed_tg_allocs, id, job_id, job_modify_index, modify_index, modify_time, namespace, next_eval, node_id, node_modify_index, previous_eval, priority, queued_allocations, quota_limit_reached, related_evals, snapshot_index, status, status_description, triggered_by, type, wait, wait_until].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NomadClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
