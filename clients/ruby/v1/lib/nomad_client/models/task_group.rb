=begin
#Nomad

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.1.4
Contact: support@hashicorp.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module NomadClient
  class TaskGroup
    attr_accessor :affinities

    attr_accessor :constraints

    attr_accessor :consul

    attr_accessor :count

    attr_accessor :ephemeral_disk

    attr_accessor :meta

    attr_accessor :migrate

    attr_accessor :name

    attr_accessor :networks

    attr_accessor :reschedule_policy

    attr_accessor :restart_policy

    attr_accessor :scaling

    attr_accessor :services

    attr_accessor :shutdown_delay

    attr_accessor :spreads

    attr_accessor :stop_after_client_disconnect

    attr_accessor :tasks

    attr_accessor :update

    attr_accessor :volumes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'affinities' => :'Affinities',
        :'constraints' => :'Constraints',
        :'consul' => :'Consul',
        :'count' => :'Count',
        :'ephemeral_disk' => :'EphemeralDisk',
        :'meta' => :'Meta',
        :'migrate' => :'Migrate',
        :'name' => :'Name',
        :'networks' => :'Networks',
        :'reschedule_policy' => :'ReschedulePolicy',
        :'restart_policy' => :'RestartPolicy',
        :'scaling' => :'Scaling',
        :'services' => :'Services',
        :'shutdown_delay' => :'ShutdownDelay',
        :'spreads' => :'Spreads',
        :'stop_after_client_disconnect' => :'StopAfterClientDisconnect',
        :'tasks' => :'Tasks',
        :'update' => :'Update',
        :'volumes' => :'Volumes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'affinities' => :'Array<Affinity>',
        :'constraints' => :'Array<Constraint>',
        :'consul' => :'Consul',
        :'count' => :'Integer',
        :'ephemeral_disk' => :'EphemeralDisk',
        :'meta' => :'Hash<String, String>',
        :'migrate' => :'MigrateStrategy',
        :'name' => :'String',
        :'networks' => :'Array<NetworkResource>',
        :'reschedule_policy' => :'ReschedulePolicy',
        :'restart_policy' => :'RestartPolicy',
        :'scaling' => :'ScalingPolicy',
        :'services' => :'Array<Service>',
        :'shutdown_delay' => :'Integer',
        :'spreads' => :'Array<Spread>',
        :'stop_after_client_disconnect' => :'Integer',
        :'tasks' => :'Array<Task>',
        :'update' => :'UpdateStrategy',
        :'volumes' => :'Hash<String, VolumeRequest>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NomadClient::TaskGroup` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NomadClient::TaskGroup`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'affinities')
        if (value = attributes[:'affinities']).is_a?(Array)
          self.affinities = value
        end
      end

      if attributes.key?(:'constraints')
        if (value = attributes[:'constraints']).is_a?(Array)
          self.constraints = value
        end
      end

      if attributes.key?(:'consul')
        self.consul = attributes[:'consul']
      end

      if attributes.key?(:'count')
        self.count = attributes[:'count']
      end

      if attributes.key?(:'ephemeral_disk')
        self.ephemeral_disk = attributes[:'ephemeral_disk']
      end

      if attributes.key?(:'meta')
        if (value = attributes[:'meta']).is_a?(Hash)
          self.meta = value
        end
      end

      if attributes.key?(:'migrate')
        self.migrate = attributes[:'migrate']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'networks')
        if (value = attributes[:'networks']).is_a?(Array)
          self.networks = value
        end
      end

      if attributes.key?(:'reschedule_policy')
        self.reschedule_policy = attributes[:'reschedule_policy']
      end

      if attributes.key?(:'restart_policy')
        self.restart_policy = attributes[:'restart_policy']
      end

      if attributes.key?(:'scaling')
        self.scaling = attributes[:'scaling']
      end

      if attributes.key?(:'services')
        if (value = attributes[:'services']).is_a?(Array)
          self.services = value
        end
      end

      if attributes.key?(:'shutdown_delay')
        self.shutdown_delay = attributes[:'shutdown_delay']
      end

      if attributes.key?(:'spreads')
        if (value = attributes[:'spreads']).is_a?(Array)
          self.spreads = value
        end
      end

      if attributes.key?(:'stop_after_client_disconnect')
        self.stop_after_client_disconnect = attributes[:'stop_after_client_disconnect']
      end

      if attributes.key?(:'tasks')
        if (value = attributes[:'tasks']).is_a?(Array)
          self.tasks = value
        end
      end

      if attributes.key?(:'update')
        self.update = attributes[:'update']
      end

      if attributes.key?(:'volumes')
        if (value = attributes[:'volumes']).is_a?(Hash)
          self.volumes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          affinities == o.affinities &&
          constraints == o.constraints &&
          consul == o.consul &&
          count == o.count &&
          ephemeral_disk == o.ephemeral_disk &&
          meta == o.meta &&
          migrate == o.migrate &&
          name == o.name &&
          networks == o.networks &&
          reschedule_policy == o.reschedule_policy &&
          restart_policy == o.restart_policy &&
          scaling == o.scaling &&
          services == o.services &&
          shutdown_delay == o.shutdown_delay &&
          spreads == o.spreads &&
          stop_after_client_disconnect == o.stop_after_client_disconnect &&
          tasks == o.tasks &&
          update == o.update &&
          volumes == o.volumes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [affinities, constraints, consul, count, ephemeral_disk, meta, migrate, name, networks, reschedule_policy, restart_policy, scaling, services, shutdown_delay, spreads, stop_after_client_disconnect, tasks, update, volumes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NomadClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
