# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

=begin
#Nomad

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.1.4
Contact: support@hashicorp.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module NomadClient
  class ServiceCheck
    attr_accessor :address_mode

    attr_accessor :advertise

    attr_accessor :args

    attr_accessor :body

    attr_accessor :check_restart

    attr_accessor :command

    attr_accessor :expose

    attr_accessor :failures_before_critical

    attr_accessor :grpc_service

    attr_accessor :grpc_use_tls

    attr_accessor :header

    attr_accessor :initial_status

    attr_accessor :interval

    attr_accessor :method

    attr_accessor :name

    attr_accessor :on_update

    attr_accessor :path

    attr_accessor :port_label

    attr_accessor :protocol

    attr_accessor :success_before_passing

    attr_accessor :tls_skip_verify

    attr_accessor :task_name

    attr_accessor :timeout

    attr_accessor :type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address_mode' => :'AddressMode',
        :'advertise' => :'Advertise',
        :'args' => :'Args',
        :'body' => :'Body',
        :'check_restart' => :'CheckRestart',
        :'command' => :'Command',
        :'expose' => :'Expose',
        :'failures_before_critical' => :'FailuresBeforeCritical',
        :'grpc_service' => :'GRPCService',
        :'grpc_use_tls' => :'GRPCUseTLS',
        :'header' => :'Header',
        :'initial_status' => :'InitialStatus',
        :'interval' => :'Interval',
        :'method' => :'Method',
        :'name' => :'Name',
        :'on_update' => :'OnUpdate',
        :'path' => :'Path',
        :'port_label' => :'PortLabel',
        :'protocol' => :'Protocol',
        :'success_before_passing' => :'SuccessBeforePassing',
        :'tls_skip_verify' => :'TLSSkipVerify',
        :'task_name' => :'TaskName',
        :'timeout' => :'Timeout',
        :'type' => :'Type'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'address_mode' => :'String',
        :'advertise' => :'String',
        :'args' => :'Array<String>',
        :'body' => :'String',
        :'check_restart' => :'CheckRestart',
        :'command' => :'String',
        :'expose' => :'Boolean',
        :'failures_before_critical' => :'Integer',
        :'grpc_service' => :'String',
        :'grpc_use_tls' => :'Boolean',
        :'header' => :'Hash<String, Array<String>>',
        :'initial_status' => :'String',
        :'interval' => :'Integer',
        :'method' => :'String',
        :'name' => :'String',
        :'on_update' => :'String',
        :'path' => :'String',
        :'port_label' => :'String',
        :'protocol' => :'String',
        :'success_before_passing' => :'Integer',
        :'tls_skip_verify' => :'Boolean',
        :'task_name' => :'String',
        :'timeout' => :'Integer',
        :'type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NomadClient::ServiceCheck` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NomadClient::ServiceCheck`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'address_mode')
        self.address_mode = attributes[:'address_mode']
      end

      if attributes.key?(:'advertise')
        self.advertise = attributes[:'advertise']
      end

      if attributes.key?(:'args')
        if (value = attributes[:'args']).is_a?(Array)
          self.args = value
        end
      end

      if attributes.key?(:'body')
        self.body = attributes[:'body']
      end

      if attributes.key?(:'check_restart')
        self.check_restart = attributes[:'check_restart']
      end

      if attributes.key?(:'command')
        self.command = attributes[:'command']
      end

      if attributes.key?(:'expose')
        self.expose = attributes[:'expose']
      end

      if attributes.key?(:'failures_before_critical')
        self.failures_before_critical = attributes[:'failures_before_critical']
      end

      if attributes.key?(:'grpc_service')
        self.grpc_service = attributes[:'grpc_service']
      end

      if attributes.key?(:'grpc_use_tls')
        self.grpc_use_tls = attributes[:'grpc_use_tls']
      end

      if attributes.key?(:'header')
        if (value = attributes[:'header']).is_a?(Hash)
          self.header = value
        end
      end

      if attributes.key?(:'initial_status')
        self.initial_status = attributes[:'initial_status']
      end

      if attributes.key?(:'interval')
        self.interval = attributes[:'interval']
      end

      if attributes.key?(:'method')
        self.method = attributes[:'method']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'on_update')
        self.on_update = attributes[:'on_update']
      end

      if attributes.key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.key?(:'port_label')
        self.port_label = attributes[:'port_label']
      end

      if attributes.key?(:'protocol')
        self.protocol = attributes[:'protocol']
      end

      if attributes.key?(:'success_before_passing')
        self.success_before_passing = attributes[:'success_before_passing']
      end

      if attributes.key?(:'tls_skip_verify')
        self.tls_skip_verify = attributes[:'tls_skip_verify']
      end

      if attributes.key?(:'task_name')
        self.task_name = attributes[:'task_name']
      end

      if attributes.key?(:'timeout')
        self.timeout = attributes[:'timeout']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address_mode == o.address_mode &&
          advertise == o.advertise &&
          args == o.args &&
          body == o.body &&
          check_restart == o.check_restart &&
          command == o.command &&
          expose == o.expose &&
          failures_before_critical == o.failures_before_critical &&
          grpc_service == o.grpc_service &&
          grpc_use_tls == o.grpc_use_tls &&
          header == o.header &&
          initial_status == o.initial_status &&
          interval == o.interval &&
          method == o.method &&
          name == o.name &&
          on_update == o.on_update &&
          path == o.path &&
          port_label == o.port_label &&
          protocol == o.protocol &&
          success_before_passing == o.success_before_passing &&
          tls_skip_verify == o.tls_skip_verify &&
          task_name == o.task_name &&
          timeout == o.timeout &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address_mode, advertise, args, body, check_restart, command, expose, failures_before_critical, grpc_service, grpc_use_tls, header, initial_status, interval, method, name, on_update, path, port_label, protocol, success_before_passing, tls_skip_verify, task_name, timeout, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NomadClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
