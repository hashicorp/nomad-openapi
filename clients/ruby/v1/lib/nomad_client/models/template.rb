# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

=begin
#Nomad

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.1.4
Contact: support@hashicorp.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module NomadClient
  class Template
    attr_accessor :change_mode

    attr_accessor :change_script

    attr_accessor :change_signal

    attr_accessor :dest_path

    attr_accessor :embedded_tmpl

    attr_accessor :envvars

    attr_accessor :gid

    attr_accessor :left_delim

    attr_accessor :perms

    attr_accessor :right_delim

    attr_accessor :source_path

    attr_accessor :splay

    attr_accessor :uid

    attr_accessor :vault_grace

    attr_accessor :wait

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'change_mode' => :'ChangeMode',
        :'change_script' => :'ChangeScript',
        :'change_signal' => :'ChangeSignal',
        :'dest_path' => :'DestPath',
        :'embedded_tmpl' => :'EmbeddedTmpl',
        :'envvars' => :'Envvars',
        :'gid' => :'Gid',
        :'left_delim' => :'LeftDelim',
        :'perms' => :'Perms',
        :'right_delim' => :'RightDelim',
        :'source_path' => :'SourcePath',
        :'splay' => :'Splay',
        :'uid' => :'Uid',
        :'vault_grace' => :'VaultGrace',
        :'wait' => :'Wait'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'change_mode' => :'String',
        :'change_script' => :'ChangeScript',
        :'change_signal' => :'String',
        :'dest_path' => :'String',
        :'embedded_tmpl' => :'String',
        :'envvars' => :'Boolean',
        :'gid' => :'Integer',
        :'left_delim' => :'String',
        :'perms' => :'String',
        :'right_delim' => :'String',
        :'source_path' => :'String',
        :'splay' => :'Integer',
        :'uid' => :'Integer',
        :'vault_grace' => :'Integer',
        :'wait' => :'WaitConfig'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NomadClient::Template` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NomadClient::Template`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'change_mode')
        self.change_mode = attributes[:'change_mode']
      end

      if attributes.key?(:'change_script')
        self.change_script = attributes[:'change_script']
      end

      if attributes.key?(:'change_signal')
        self.change_signal = attributes[:'change_signal']
      end

      if attributes.key?(:'dest_path')
        self.dest_path = attributes[:'dest_path']
      end

      if attributes.key?(:'embedded_tmpl')
        self.embedded_tmpl = attributes[:'embedded_tmpl']
      end

      if attributes.key?(:'envvars')
        self.envvars = attributes[:'envvars']
      end

      if attributes.key?(:'gid')
        self.gid = attributes[:'gid']
      end

      if attributes.key?(:'left_delim')
        self.left_delim = attributes[:'left_delim']
      end

      if attributes.key?(:'perms')
        self.perms = attributes[:'perms']
      end

      if attributes.key?(:'right_delim')
        self.right_delim = attributes[:'right_delim']
      end

      if attributes.key?(:'source_path')
        self.source_path = attributes[:'source_path']
      end

      if attributes.key?(:'splay')
        self.splay = attributes[:'splay']
      end

      if attributes.key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.key?(:'vault_grace')
        self.vault_grace = attributes[:'vault_grace']
      end

      if attributes.key?(:'wait')
        self.wait = attributes[:'wait']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          change_mode == o.change_mode &&
          change_script == o.change_script &&
          change_signal == o.change_signal &&
          dest_path == o.dest_path &&
          embedded_tmpl == o.embedded_tmpl &&
          envvars == o.envvars &&
          gid == o.gid &&
          left_delim == o.left_delim &&
          perms == o.perms &&
          right_delim == o.right_delim &&
          source_path == o.source_path &&
          splay == o.splay &&
          uid == o.uid &&
          vault_grace == o.vault_grace &&
          wait == o.wait
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [change_mode, change_script, change_signal, dest_path, embedded_tmpl, envvars, gid, left_delim, perms, right_delim, source_path, splay, uid, vault_grace, wait].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NomadClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
