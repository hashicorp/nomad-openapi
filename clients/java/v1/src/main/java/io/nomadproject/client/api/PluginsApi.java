/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.api;

import io.nomadproject.client.ApiCallback;
import io.nomadproject.client.ApiClient;
import io.nomadproject.client.ApiException;
import io.nomadproject.client.ApiResponse;
import io.nomadproject.client.Configuration;
import io.nomadproject.client.Pair;
import io.nomadproject.client.ProgressRequestBody;
import io.nomadproject.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nomadproject.client.models.CSIPlugin;
import io.nomadproject.client.models.CSIPluginListStub;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PluginsApi {
    private ApiClient localVarApiClient;

    public PluginsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PluginsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getPluginCSI
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
     * @param pluginID The CSI plugin identifier. (required)
=======
     * @param pluginId The CSI plugin identifier. (required)
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
     * @param pluginID The CSI plugin identifier. (required)
>>>>>>> 13a3eee (added tests for plugins)
=======
     * @param pluginID The CSI plugin identifier. (required)
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    public okhttp3.Call getPluginCSICall(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
=======
    public okhttp3.Call getPluginCSICall(String pluginId, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
    public okhttp3.Call getPluginCSICall(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
>>>>>>> 13a3eee (added tests for plugins)
=======
    public okhttp3.Call getPluginCSICall(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plugin/csi/{pluginID}"
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            .replaceAll("\\{" + "pluginID" + "\\}", localVarApiClient.escapeString(pluginID.toString()));
=======
            .replaceAll("\\{" + "pluginId" + "\\}", localVarApiClient.escapeString(pluginId.toString()));
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
            .replaceAll("\\{" + "pluginID" + "\\}", localVarApiClient.escapeString(pluginID.toString()));
>>>>>>> 13a3eee (added tests for plugins)
=======
            .replaceAll("\\{" + "pluginID" + "\\}", localVarApiClient.escapeString(pluginID.toString()));
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (wait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait", wait));
        }

        if (stale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stale", stale));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (index != null) {
            localVarHeaderParams.put("index", localVarApiClient.parameterToString(index));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    private okhttp3.Call getPluginCSIValidateBeforeCall(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pluginID' is set
        if (pluginID == null) {
            throw new ApiException("Missing the required parameter 'pluginID' when calling getPluginCSI(Async)");
        }
        

        okhttp3.Call localVarCall = getPluginCSICall(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
=======
    private okhttp3.Call getPluginCSIValidateBeforeCall(String pluginId, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
=======
    private okhttp3.Call getPluginCSIValidateBeforeCall(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
>>>>>>> 13a3eee (added tests for plugins)
=======
    private okhttp3.Call getPluginCSIValidateBeforeCall(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
        
        // verify the required parameter 'pluginID' is set
        if (pluginID == null) {
            throw new ApiException("Missing the required parameter 'pluginID' when calling getPluginCSI(Async)");
        }
        

<<<<<<< HEAD
<<<<<<< HEAD
        okhttp3.Call localVarCall = getPluginCSICall(pluginId, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
        okhttp3.Call localVarCall = getPluginCSICall(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
>>>>>>> 13a3eee (added tests for plugins)
=======
        okhttp3.Call localVarCall = getPluginCSICall(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
        return localVarCall;

    }

    /**
     * 
     * 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
     * @param pluginID The CSI plugin identifier. (required)
=======
     * @param pluginId The CSI plugin identifier. (required)
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
     * @param pluginID The CSI plugin identifier. (required)
>>>>>>> 13a3eee (added tests for plugins)
=======
     * @param pluginID The CSI plugin identifier. (required)
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return List&lt;CSIPlugin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    public List<CSIPlugin> getPluginCSI(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        ApiResponse<List<CSIPlugin>> localVarResp = getPluginCSIWithHttpInfo(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
=======
    public List<CSIPlugin> getPluginCSI(String pluginId, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        ApiResponse<List<CSIPlugin>> localVarResp = getPluginCSIWithHttpInfo(pluginId, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
    public List<CSIPlugin> getPluginCSI(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        ApiResponse<List<CSIPlugin>> localVarResp = getPluginCSIWithHttpInfo(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
>>>>>>> 13a3eee (added tests for plugins)
=======
    public List<CSIPlugin> getPluginCSI(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        ApiResponse<List<CSIPlugin>> localVarResp = getPluginCSIWithHttpInfo(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
        return localVarResp.getData();
    }

    /**
     * 
     * 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
     * @param pluginID The CSI plugin identifier. (required)
=======
     * @param pluginId The CSI plugin identifier. (required)
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
     * @param pluginID The CSI plugin identifier. (required)
>>>>>>> 13a3eee (added tests for plugins)
=======
     * @param pluginID The CSI plugin identifier. (required)
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return ApiResponse&lt;List&lt;CSIPlugin&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    public ApiResponse<List<CSIPlugin>> getPluginCSIWithHttpInfo(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getPluginCSIValidateBeforeCall(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, null);
=======
    public ApiResponse<List<CSIPlugin>> getPluginCSIWithHttpInfo(String pluginId, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getPluginCSIValidateBeforeCall(pluginId, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, null);
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
    public ApiResponse<List<CSIPlugin>> getPluginCSIWithHttpInfo(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getPluginCSIValidateBeforeCall(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, null);
>>>>>>> 13a3eee (added tests for plugins)
=======
    public ApiResponse<List<CSIPlugin>> getPluginCSIWithHttpInfo(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getPluginCSIValidateBeforeCall(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, null);
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
        Type localVarReturnType = new TypeToken<List<CSIPlugin>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
     * @param pluginID The CSI plugin identifier. (required)
=======
     * @param pluginId The CSI plugin identifier. (required)
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
     * @param pluginID The CSI plugin identifier. (required)
>>>>>>> 13a3eee (added tests for plugins)
=======
     * @param pluginID The CSI plugin identifier. (required)
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    public okhttp3.Call getPluginCSIAsync(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback<List<CSIPlugin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPluginCSIValidateBeforeCall(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
=======
    public okhttp3.Call getPluginCSIAsync(String pluginId, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback<List<CSIPlugin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPluginCSIValidateBeforeCall(pluginId, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
    public okhttp3.Call getPluginCSIAsync(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback<List<CSIPlugin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPluginCSIValidateBeforeCall(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
>>>>>>> 13a3eee (added tests for plugins)
=======
    public okhttp3.Call getPluginCSIAsync(String pluginID, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback<List<CSIPlugin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPluginCSIValidateBeforeCall(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
        Type localVarReturnType = new TypeToken<List<CSIPlugin>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlugins
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
=======
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
>>>>>>> 13a3eee (added tests for plugins)
=======
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPluginsCall(String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plugins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (wait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait", wait));
        }

        if (stale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stale", stale));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (index != null) {
            localVarHeaderParams.put("index", localVarApiClient.parameterToString(index));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPluginsValidateBeforeCall(String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getPluginsCall(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return List&lt;CSIPluginListStub&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
=======
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
>>>>>>> 13a3eee (added tests for plugins)
=======
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<CSIPluginListStub> getPlugins(String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        ApiResponse<List<CSIPluginListStub>> localVarResp = getPluginsWithHttpInfo(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return ApiResponse&lt;List&lt;CSIPluginListStub&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
=======
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
>>>>>>> 13a3eee (added tests for plugins)
=======
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CSIPluginListStub>> getPluginsWithHttpInfo(String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getPluginsValidateBeforeCall(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, null);
        Type localVarReturnType = new TypeToken<List<CSIPluginListStub>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
=======
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
>>>>>>> d99c3e2 (populated generator/plugins.go, added v1/plugins.go)
=======
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
>>>>>>> 13a3eee (added tests for plugins)
=======
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
>>>>>>> 6f570d317a34c315cff4c0923431310f4315843b
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPluginsAsync(String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback<List<CSIPluginListStub>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPluginsValidateBeforeCall(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        Type localVarReturnType = new TypeToken<List<CSIPluginListStub>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
