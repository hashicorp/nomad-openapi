/*
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nomadproject.client.api;

import io.nomadproject.client.ApiCallback;
import io.nomadproject.client.ApiClient;
import io.nomadproject.client.ApiException;
import io.nomadproject.client.ApiResponse;
import io.nomadproject.client.Configuration;
import io.nomadproject.client.Pair;
import io.nomadproject.client.ProgressRequestBody;
import io.nomadproject.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nomadproject.client.models.AllocationListStub;
import io.nomadproject.client.models.Deployment;
import io.nomadproject.client.models.Evaluation;
import io.nomadproject.client.models.Job;
import io.nomadproject.client.models.JobDeregisterResponse;
import io.nomadproject.client.models.JobDispatchRequest;
import io.nomadproject.client.models.JobDispatchResponse;
import io.nomadproject.client.models.JobEvaluateRequest;
import io.nomadproject.client.models.JobListStub;
import io.nomadproject.client.models.JobPlanRequest;
import io.nomadproject.client.models.JobPlanResponse;
import io.nomadproject.client.models.JobRegisterRequest;
import io.nomadproject.client.models.JobRegisterResponse;
import io.nomadproject.client.models.JobRevertRequest;
import io.nomadproject.client.models.JobScaleStatusResponse;
import io.nomadproject.client.models.JobStabilityRequest;
import io.nomadproject.client.models.JobStabilityResponse;
import io.nomadproject.client.models.JobSummary;
import io.nomadproject.client.models.JobValidateRequest;
import io.nomadproject.client.models.JobValidateResponse;
import io.nomadproject.client.models.JobVersionsResponse;
import io.nomadproject.client.models.JobsParseRequest;
import io.nomadproject.client.models.PeriodicForceResponse;
import io.nomadproject.client.models.ScalingRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobsApi {
    private ApiClient localVarApiClient;

    public JobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteJob
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param purge Boolean flag indicating whether to purge allocations of the job after deleting. (optional)
     * @param global Boolean flag indicating whether the operation should apply to all instances of the job globally. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobCall(String jobName, String region, String namespace, String xNomadToken, String idempotencyToken, Boolean purge, Boolean global, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{jobName}"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (idempotencyToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_token", idempotencyToken));
        }

        if (purge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purge", purge));
        }

        if (global != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("global", global));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJobValidateBeforeCall(String jobName, String region, String namespace, String xNomadToken, String idempotencyToken, Boolean purge, Boolean global, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling deleteJob(Async)");
        }
        

        okhttp3.Call localVarCall = deleteJobCall(jobName, region, namespace, xNomadToken, idempotencyToken, purge, global, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param purge Boolean flag indicating whether to purge allocations of the job after deleting. (optional)
     * @param global Boolean flag indicating whether the operation should apply to all instances of the job globally. (optional)
     * @return JobDeregisterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobDeregisterResponse deleteJob(String jobName, String region, String namespace, String xNomadToken, String idempotencyToken, Boolean purge, Boolean global) throws ApiException {
        ApiResponse<JobDeregisterResponse> localVarResp = deleteJobWithHttpInfo(jobName, region, namespace, xNomadToken, idempotencyToken, purge, global);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param purge Boolean flag indicating whether to purge allocations of the job after deleting. (optional)
     * @param global Boolean flag indicating whether the operation should apply to all instances of the job globally. (optional)
     * @return ApiResponse&lt;JobDeregisterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDeregisterResponse> deleteJobWithHttpInfo(String jobName, String region, String namespace, String xNomadToken, String idempotencyToken, Boolean purge, Boolean global) throws ApiException {
        okhttp3.Call localVarCall = deleteJobValidateBeforeCall(jobName, region, namespace, xNomadToken, idempotencyToken, purge, global, null);
        Type localVarReturnType = new TypeToken<JobDeregisterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param purge Boolean flag indicating whether to purge allocations of the job after deleting. (optional)
     * @param global Boolean flag indicating whether the operation should apply to all instances of the job globally. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobAsync(String jobName, String region, String namespace, String xNomadToken, String idempotencyToken, Boolean purge, Boolean global, final ApiCallback<JobDeregisterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteJobValidateBeforeCall(jobName, region, namespace, xNomadToken, idempotencyToken, purge, global, _callback);
        Type localVarReturnType = new TypeToken<JobDeregisterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJob
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{jobName}"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (wait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait", wait));
        }

        if (stale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stale", stale));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (index != null) {
            localVarHeaderParams.put("index", localVarApiClient.parameterToString(index));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobValidateBeforeCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling getJob(Async)");
        }
        

        okhttp3.Call localVarCall = getJobCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Job getJob(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        ApiResponse<Job> localVarResp = getJobWithHttpInfo(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> getJobWithHttpInfo(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getJobValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobAsync(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobAllocations
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param all Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobAllocationsCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Boolean all, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{jobName}/allocations"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (wait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait", wait));
        }

        if (stale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stale", stale));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (index != null) {
            localVarHeaderParams.put("index", localVarApiClient.parameterToString(index));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobAllocationsValidateBeforeCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Boolean all, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling getJobAllocations(Async)");
        }
        

        okhttp3.Call localVarCall = getJobAllocationsCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param all Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered. (optional)
     * @return List&lt;AllocationListStub&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<AllocationListStub> getJobAllocations(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Boolean all) throws ApiException {
        ApiResponse<List<AllocationListStub>> localVarResp = getJobAllocationsWithHttpInfo(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param all Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered. (optional)
     * @return ApiResponse&lt;List&lt;AllocationListStub&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AllocationListStub>> getJobAllocationsWithHttpInfo(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Boolean all) throws ApiException {
        okhttp3.Call localVarCall = getJobAllocationsValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all, null);
        Type localVarReturnType = new TypeToken<List<AllocationListStub>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param all Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobAllocationsAsync(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Boolean all, final ApiCallback<List<AllocationListStub>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobAllocationsValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all, _callback);
        Type localVarReturnType = new TypeToken<List<AllocationListStub>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobDeployment
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobDeploymentCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{jobName}/deployment"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (wait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait", wait));
        }

        if (stale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stale", stale));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (index != null) {
            localVarHeaderParams.put("index", localVarApiClient.parameterToString(index));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobDeploymentValidateBeforeCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling getJobDeployment(Async)");
        }
        

        okhttp3.Call localVarCall = getJobDeploymentCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Deployment getJobDeployment(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        ApiResponse<Deployment> localVarResp = getJobDeploymentWithHttpInfo(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> getJobDeploymentWithHttpInfo(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getJobDeploymentValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobDeploymentAsync(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobDeploymentValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobDeployments
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param all Flag indicating whether to constrain by job creation index or not. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobDeploymentsCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Integer all, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{jobName}/deployments"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (wait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait", wait));
        }

        if (stale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stale", stale));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (index != null) {
            localVarHeaderParams.put("index", localVarApiClient.parameterToString(index));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobDeploymentsValidateBeforeCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Integer all, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling getJobDeployments(Async)");
        }
        

        okhttp3.Call localVarCall = getJobDeploymentsCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param all Flag indicating whether to constrain by job creation index or not. (optional)
     * @return List&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<Deployment> getJobDeployments(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Integer all) throws ApiException {
        ApiResponse<List<Deployment>> localVarResp = getJobDeploymentsWithHttpInfo(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param all Flag indicating whether to constrain by job creation index or not. (optional)
     * @return ApiResponse&lt;List&lt;Deployment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Deployment>> getJobDeploymentsWithHttpInfo(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Integer all) throws ApiException {
        okhttp3.Call localVarCall = getJobDeploymentsValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all, null);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param all Flag indicating whether to constrain by job creation index or not. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobDeploymentsAsync(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Integer all, final ApiCallback<List<Deployment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobDeploymentsValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all, _callback);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobEvaluations
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobEvaluationsCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{jobName}/evaluations"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (wait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait", wait));
        }

        if (stale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stale", stale));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (index != null) {
            localVarHeaderParams.put("index", localVarApiClient.parameterToString(index));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobEvaluationsValidateBeforeCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling getJobEvaluations(Async)");
        }
        

        okhttp3.Call localVarCall = getJobEvaluationsCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return List&lt;Evaluation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<Evaluation> getJobEvaluations(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        ApiResponse<List<Evaluation>> localVarResp = getJobEvaluationsWithHttpInfo(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return ApiResponse&lt;List&lt;Evaluation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Evaluation>> getJobEvaluationsWithHttpInfo(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getJobEvaluationsValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, null);
        Type localVarReturnType = new TypeToken<List<Evaluation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobEvaluationsAsync(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback<List<Evaluation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobEvaluationsValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        Type localVarReturnType = new TypeToken<List<Evaluation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobScaleStatus
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobScaleStatusCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{jobName}/scale"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (wait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait", wait));
        }

        if (stale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stale", stale));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (index != null) {
            localVarHeaderParams.put("index", localVarApiClient.parameterToString(index));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobScaleStatusValidateBeforeCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling getJobScaleStatus(Async)");
        }
        

        okhttp3.Call localVarCall = getJobScaleStatusCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return JobScaleStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobScaleStatusResponse getJobScaleStatus(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        ApiResponse<JobScaleStatusResponse> localVarResp = getJobScaleStatusWithHttpInfo(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return ApiResponse&lt;JobScaleStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobScaleStatusResponse> getJobScaleStatusWithHttpInfo(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getJobScaleStatusValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, null);
        Type localVarReturnType = new TypeToken<JobScaleStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobScaleStatusAsync(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback<JobScaleStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobScaleStatusValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        Type localVarReturnType = new TypeToken<JobScaleStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobSummary
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobSummaryCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{jobName}/summary"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (wait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait", wait));
        }

        if (stale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stale", stale));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (index != null) {
            localVarHeaderParams.put("index", localVarApiClient.parameterToString(index));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobSummaryValidateBeforeCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling getJobSummary(Async)");
        }
        

        okhttp3.Call localVarCall = getJobSummaryCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return JobSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobSummary getJobSummary(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        ApiResponse<JobSummary> localVarResp = getJobSummaryWithHttpInfo(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return ApiResponse&lt;JobSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobSummary> getJobSummaryWithHttpInfo(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getJobSummaryValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, null);
        Type localVarReturnType = new TypeToken<JobSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobSummaryAsync(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback<JobSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobSummaryValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        Type localVarReturnType = new TypeToken<JobSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobVersions
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param diffs Boolean flag indicating whether to compute job diffs. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobVersionsCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Boolean diffs, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{jobName}/versions"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (wait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait", wait));
        }

        if (stale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stale", stale));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (diffs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("diffs", diffs));
        }

        if (index != null) {
            localVarHeaderParams.put("index", localVarApiClient.parameterToString(index));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobVersionsValidateBeforeCall(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Boolean diffs, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling getJobVersions(Async)");
        }
        

        okhttp3.Call localVarCall = getJobVersionsCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, diffs, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param diffs Boolean flag indicating whether to compute job diffs. (optional)
     * @return JobVersionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobVersionsResponse getJobVersions(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Boolean diffs) throws ApiException {
        ApiResponse<JobVersionsResponse> localVarResp = getJobVersionsWithHttpInfo(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, diffs);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param diffs Boolean flag indicating whether to compute job diffs. (optional)
     * @return ApiResponse&lt;JobVersionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobVersionsResponse> getJobVersionsWithHttpInfo(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Boolean diffs) throws ApiException {
        okhttp3.Call localVarCall = getJobVersionsValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, diffs, null);
        Type localVarReturnType = new TypeToken<JobVersionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param diffs Boolean flag indicating whether to compute job diffs. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobVersionsAsync(String jobName, String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, Boolean diffs, final ApiCallback<JobVersionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobVersionsValidateBeforeCall(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, diffs, _callback);
        Type localVarReturnType = new TypeToken<JobVersionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobs
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsCall(String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (wait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait", wait));
        }

        if (stale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stale", stale));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (index != null) {
            localVarHeaderParams.put("index", localVarApiClient.parameterToString(index));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobsValidateBeforeCall(String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getJobsCall(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return List&lt;JobListStub&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<JobListStub> getJobs(String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        ApiResponse<List<JobListStub>> localVarResp = getJobsWithHttpInfo(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @return ApiResponse&lt;List&lt;JobListStub&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JobListStub>> getJobsWithHttpInfo(String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getJobsValidateBeforeCall(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, null);
        Type localVarReturnType = new TypeToken<List<JobListStub>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param index If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)
     * @param wait Provided with IndexParam to wait for change. (optional)
     * @param stale If present, results will include stale reads. (optional)
     * @param prefix Constrains results to jobs that start with the defined prefix (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param perPage Maximum number of results to return. (optional)
     * @param nextToken Indicates where to start paging for queries that support pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsAsync(String region, String namespace, Integer index, String wait, String stale, String prefix, String xNomadToken, Integer perPage, String nextToken, final ApiCallback<List<JobListStub>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobsValidateBeforeCall(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, _callback);
        Type localVarReturnType = new TypeToken<List<JobListStub>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJob
     * @param jobName The job identifier. (required)
     * @param jobRegisterRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobCall(String jobName, JobRegisterRequest jobRegisterRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobRegisterRequest;

        // create path and map variables
        String localVarPath = "/job/{jobName}"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (idempotencyToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_token", idempotencyToken));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobValidateBeforeCall(String jobName, JobRegisterRequest jobRegisterRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling postJob(Async)");
        }
        
        // verify the required parameter 'jobRegisterRequest' is set
        if (jobRegisterRequest == null) {
            throw new ApiException("Missing the required parameter 'jobRegisterRequest' when calling postJob(Async)");
        }
        

        okhttp3.Call localVarCall = postJobCall(jobName, jobRegisterRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param jobRegisterRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return JobRegisterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobRegisterResponse postJob(String jobName, JobRegisterRequest jobRegisterRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        ApiResponse<JobRegisterResponse> localVarResp = postJobWithHttpInfo(jobName, jobRegisterRequest, region, namespace, xNomadToken, idempotencyToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param jobRegisterRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return ApiResponse&lt;JobRegisterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobRegisterResponse> postJobWithHttpInfo(String jobName, JobRegisterRequest jobRegisterRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        okhttp3.Call localVarCall = postJobValidateBeforeCall(jobName, jobRegisterRequest, region, namespace, xNomadToken, idempotencyToken, null);
        Type localVarReturnType = new TypeToken<JobRegisterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param jobRegisterRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobAsync(String jobName, JobRegisterRequest jobRegisterRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback<JobRegisterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobValidateBeforeCall(jobName, jobRegisterRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        Type localVarReturnType = new TypeToken<JobRegisterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobDispatch
     * @param jobName The job identifier. (required)
     * @param jobDispatchRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobDispatchCall(String jobName, JobDispatchRequest jobDispatchRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobDispatchRequest;

        // create path and map variables
        String localVarPath = "/job/{jobName}/dispatch"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (idempotencyToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_token", idempotencyToken));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobDispatchValidateBeforeCall(String jobName, JobDispatchRequest jobDispatchRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling postJobDispatch(Async)");
        }
        
        // verify the required parameter 'jobDispatchRequest' is set
        if (jobDispatchRequest == null) {
            throw new ApiException("Missing the required parameter 'jobDispatchRequest' when calling postJobDispatch(Async)");
        }
        

        okhttp3.Call localVarCall = postJobDispatchCall(jobName, jobDispatchRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param jobDispatchRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return JobDispatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobDispatchResponse postJobDispatch(String jobName, JobDispatchRequest jobDispatchRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        ApiResponse<JobDispatchResponse> localVarResp = postJobDispatchWithHttpInfo(jobName, jobDispatchRequest, region, namespace, xNomadToken, idempotencyToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param jobDispatchRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return ApiResponse&lt;JobDispatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDispatchResponse> postJobDispatchWithHttpInfo(String jobName, JobDispatchRequest jobDispatchRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        okhttp3.Call localVarCall = postJobDispatchValidateBeforeCall(jobName, jobDispatchRequest, region, namespace, xNomadToken, idempotencyToken, null);
        Type localVarReturnType = new TypeToken<JobDispatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param jobDispatchRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobDispatchAsync(String jobName, JobDispatchRequest jobDispatchRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback<JobDispatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobDispatchValidateBeforeCall(jobName, jobDispatchRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        Type localVarReturnType = new TypeToken<JobDispatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobEvaluate
     * @param jobName The job identifier. (required)
     * @param jobEvaluateRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobEvaluateCall(String jobName, JobEvaluateRequest jobEvaluateRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobEvaluateRequest;

        // create path and map variables
        String localVarPath = "/job/{jobName}/evaluate"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (idempotencyToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_token", idempotencyToken));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobEvaluateValidateBeforeCall(String jobName, JobEvaluateRequest jobEvaluateRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling postJobEvaluate(Async)");
        }
        
        // verify the required parameter 'jobEvaluateRequest' is set
        if (jobEvaluateRequest == null) {
            throw new ApiException("Missing the required parameter 'jobEvaluateRequest' when calling postJobEvaluate(Async)");
        }
        

        okhttp3.Call localVarCall = postJobEvaluateCall(jobName, jobEvaluateRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param jobEvaluateRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return JobRegisterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobRegisterResponse postJobEvaluate(String jobName, JobEvaluateRequest jobEvaluateRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        ApiResponse<JobRegisterResponse> localVarResp = postJobEvaluateWithHttpInfo(jobName, jobEvaluateRequest, region, namespace, xNomadToken, idempotencyToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param jobEvaluateRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return ApiResponse&lt;JobRegisterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobRegisterResponse> postJobEvaluateWithHttpInfo(String jobName, JobEvaluateRequest jobEvaluateRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        okhttp3.Call localVarCall = postJobEvaluateValidateBeforeCall(jobName, jobEvaluateRequest, region, namespace, xNomadToken, idempotencyToken, null);
        Type localVarReturnType = new TypeToken<JobRegisterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param jobEvaluateRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobEvaluateAsync(String jobName, JobEvaluateRequest jobEvaluateRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback<JobRegisterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobEvaluateValidateBeforeCall(jobName, jobEvaluateRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        Type localVarReturnType = new TypeToken<JobRegisterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobParse
     * @param jobsParseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobParseCall(JobsParseRequest jobsParseRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobsParseRequest;

        // create path and map variables
        String localVarPath = "/jobs/parse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobParseValidateBeforeCall(JobsParseRequest jobsParseRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobsParseRequest' is set
        if (jobsParseRequest == null) {
            throw new ApiException("Missing the required parameter 'jobsParseRequest' when calling postJobParse(Async)");
        }
        

        okhttp3.Call localVarCall = postJobParseCall(jobsParseRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobsParseRequest  (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Job postJobParse(JobsParseRequest jobsParseRequest) throws ApiException {
        ApiResponse<Job> localVarResp = postJobParseWithHttpInfo(jobsParseRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobsParseRequest  (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> postJobParseWithHttpInfo(JobsParseRequest jobsParseRequest) throws ApiException {
        okhttp3.Call localVarCall = postJobParseValidateBeforeCall(jobsParseRequest, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobsParseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobParseAsync(JobsParseRequest jobsParseRequest, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobParseValidateBeforeCall(jobsParseRequest, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobPeriodicForce
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobPeriodicForceCall(String jobName, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{jobName}/periodic/force"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (idempotencyToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_token", idempotencyToken));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobPeriodicForceValidateBeforeCall(String jobName, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling postJobPeriodicForce(Async)");
        }
        

        okhttp3.Call localVarCall = postJobPeriodicForceCall(jobName, region, namespace, xNomadToken, idempotencyToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return PeriodicForceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public PeriodicForceResponse postJobPeriodicForce(String jobName, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        ApiResponse<PeriodicForceResponse> localVarResp = postJobPeriodicForceWithHttpInfo(jobName, region, namespace, xNomadToken, idempotencyToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return ApiResponse&lt;PeriodicForceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PeriodicForceResponse> postJobPeriodicForceWithHttpInfo(String jobName, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        okhttp3.Call localVarCall = postJobPeriodicForceValidateBeforeCall(jobName, region, namespace, xNomadToken, idempotencyToken, null);
        Type localVarReturnType = new TypeToken<PeriodicForceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobPeriodicForceAsync(String jobName, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback<PeriodicForceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobPeriodicForceValidateBeforeCall(jobName, region, namespace, xNomadToken, idempotencyToken, _callback);
        Type localVarReturnType = new TypeToken<PeriodicForceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobPlan
     * @param jobName The job identifier. (required)
     * @param jobPlanRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobPlanCall(String jobName, JobPlanRequest jobPlanRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobPlanRequest;

        // create path and map variables
        String localVarPath = "/job/{jobName}/plan"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (idempotencyToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_token", idempotencyToken));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobPlanValidateBeforeCall(String jobName, JobPlanRequest jobPlanRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling postJobPlan(Async)");
        }
        
        // verify the required parameter 'jobPlanRequest' is set
        if (jobPlanRequest == null) {
            throw new ApiException("Missing the required parameter 'jobPlanRequest' when calling postJobPlan(Async)");
        }
        

        okhttp3.Call localVarCall = postJobPlanCall(jobName, jobPlanRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param jobPlanRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return JobPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobPlanResponse postJobPlan(String jobName, JobPlanRequest jobPlanRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        ApiResponse<JobPlanResponse> localVarResp = postJobPlanWithHttpInfo(jobName, jobPlanRequest, region, namespace, xNomadToken, idempotencyToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param jobPlanRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return ApiResponse&lt;JobPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobPlanResponse> postJobPlanWithHttpInfo(String jobName, JobPlanRequest jobPlanRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        okhttp3.Call localVarCall = postJobPlanValidateBeforeCall(jobName, jobPlanRequest, region, namespace, xNomadToken, idempotencyToken, null);
        Type localVarReturnType = new TypeToken<JobPlanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param jobPlanRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobPlanAsync(String jobName, JobPlanRequest jobPlanRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback<JobPlanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobPlanValidateBeforeCall(jobName, jobPlanRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        Type localVarReturnType = new TypeToken<JobPlanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobRevert
     * @param jobName The job identifier. (required)
     * @param jobRevertRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobRevertCall(String jobName, JobRevertRequest jobRevertRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobRevertRequest;

        // create path and map variables
        String localVarPath = "/job/{jobName}/revert"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (idempotencyToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_token", idempotencyToken));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobRevertValidateBeforeCall(String jobName, JobRevertRequest jobRevertRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling postJobRevert(Async)");
        }
        
        // verify the required parameter 'jobRevertRequest' is set
        if (jobRevertRequest == null) {
            throw new ApiException("Missing the required parameter 'jobRevertRequest' when calling postJobRevert(Async)");
        }
        

        okhttp3.Call localVarCall = postJobRevertCall(jobName, jobRevertRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param jobRevertRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return JobRegisterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobRegisterResponse postJobRevert(String jobName, JobRevertRequest jobRevertRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        ApiResponse<JobRegisterResponse> localVarResp = postJobRevertWithHttpInfo(jobName, jobRevertRequest, region, namespace, xNomadToken, idempotencyToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param jobRevertRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return ApiResponse&lt;JobRegisterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobRegisterResponse> postJobRevertWithHttpInfo(String jobName, JobRevertRequest jobRevertRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        okhttp3.Call localVarCall = postJobRevertValidateBeforeCall(jobName, jobRevertRequest, region, namespace, xNomadToken, idempotencyToken, null);
        Type localVarReturnType = new TypeToken<JobRegisterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param jobRevertRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobRevertAsync(String jobName, JobRevertRequest jobRevertRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback<JobRegisterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobRevertValidateBeforeCall(jobName, jobRevertRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        Type localVarReturnType = new TypeToken<JobRegisterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobScalingRequest
     * @param jobName The job identifier. (required)
     * @param scalingRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobScalingRequestCall(String jobName, ScalingRequest scalingRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = scalingRequest;

        // create path and map variables
        String localVarPath = "/job/{jobName}/scale"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (idempotencyToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_token", idempotencyToken));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobScalingRequestValidateBeforeCall(String jobName, ScalingRequest scalingRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling postJobScalingRequest(Async)");
        }
        
        // verify the required parameter 'scalingRequest' is set
        if (scalingRequest == null) {
            throw new ApiException("Missing the required parameter 'scalingRequest' when calling postJobScalingRequest(Async)");
        }
        

        okhttp3.Call localVarCall = postJobScalingRequestCall(jobName, scalingRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param scalingRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return JobRegisterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobRegisterResponse postJobScalingRequest(String jobName, ScalingRequest scalingRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        ApiResponse<JobRegisterResponse> localVarResp = postJobScalingRequestWithHttpInfo(jobName, scalingRequest, region, namespace, xNomadToken, idempotencyToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param scalingRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return ApiResponse&lt;JobRegisterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobRegisterResponse> postJobScalingRequestWithHttpInfo(String jobName, ScalingRequest scalingRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        okhttp3.Call localVarCall = postJobScalingRequestValidateBeforeCall(jobName, scalingRequest, region, namespace, xNomadToken, idempotencyToken, null);
        Type localVarReturnType = new TypeToken<JobRegisterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param scalingRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobScalingRequestAsync(String jobName, ScalingRequest scalingRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback<JobRegisterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobScalingRequestValidateBeforeCall(jobName, scalingRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        Type localVarReturnType = new TypeToken<JobRegisterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobStability
     * @param jobName The job identifier. (required)
     * @param jobStabilityRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobStabilityCall(String jobName, JobStabilityRequest jobStabilityRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobStabilityRequest;

        // create path and map variables
        String localVarPath = "/job/{jobName}/stable"
            .replaceAll("\\{" + "jobName" + "\\}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (idempotencyToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_token", idempotencyToken));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobStabilityValidateBeforeCall(String jobName, JobStabilityRequest jobStabilityRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling postJobStability(Async)");
        }
        
        // verify the required parameter 'jobStabilityRequest' is set
        if (jobStabilityRequest == null) {
            throw new ApiException("Missing the required parameter 'jobStabilityRequest' when calling postJobStability(Async)");
        }
        

        okhttp3.Call localVarCall = postJobStabilityCall(jobName, jobStabilityRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param jobStabilityRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return JobStabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobStabilityResponse postJobStability(String jobName, JobStabilityRequest jobStabilityRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        ApiResponse<JobStabilityResponse> localVarResp = postJobStabilityWithHttpInfo(jobName, jobStabilityRequest, region, namespace, xNomadToken, idempotencyToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobName The job identifier. (required)
     * @param jobStabilityRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return ApiResponse&lt;JobStabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobStabilityResponse> postJobStabilityWithHttpInfo(String jobName, JobStabilityRequest jobStabilityRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        okhttp3.Call localVarCall = postJobStabilityValidateBeforeCall(jobName, jobStabilityRequest, region, namespace, xNomadToken, idempotencyToken, null);
        Type localVarReturnType = new TypeToken<JobStabilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobName The job identifier. (required)
     * @param jobStabilityRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobStabilityAsync(String jobName, JobStabilityRequest jobStabilityRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback<JobStabilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobStabilityValidateBeforeCall(jobName, jobStabilityRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        Type localVarReturnType = new TypeToken<JobStabilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobValidateRequest
     * @param jobValidateRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobValidateRequestCall(JobValidateRequest jobValidateRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobValidateRequest;

        // create path and map variables
        String localVarPath = "/validate/job";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (idempotencyToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_token", idempotencyToken));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobValidateRequestValidateBeforeCall(JobValidateRequest jobValidateRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobValidateRequest' is set
        if (jobValidateRequest == null) {
            throw new ApiException("Missing the required parameter 'jobValidateRequest' when calling postJobValidateRequest(Async)");
        }
        

        okhttp3.Call localVarCall = postJobValidateRequestCall(jobValidateRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobValidateRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return JobValidateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobValidateResponse postJobValidateRequest(JobValidateRequest jobValidateRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        ApiResponse<JobValidateResponse> localVarResp = postJobValidateRequestWithHttpInfo(jobValidateRequest, region, namespace, xNomadToken, idempotencyToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobValidateRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return ApiResponse&lt;JobValidateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobValidateResponse> postJobValidateRequestWithHttpInfo(JobValidateRequest jobValidateRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        okhttp3.Call localVarCall = postJobValidateRequestValidateBeforeCall(jobValidateRequest, region, namespace, xNomadToken, idempotencyToken, null);
        Type localVarReturnType = new TypeToken<JobValidateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobValidateRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobValidateRequestAsync(JobValidateRequest jobValidateRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback<JobValidateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobValidateRequestValidateBeforeCall(jobValidateRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        Type localVarReturnType = new TypeToken<JobValidateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerJob
     * @param jobRegisterRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerJobCall(JobRegisterRequest jobRegisterRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobRegisterRequest;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (idempotencyToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_token", idempotencyToken));
        }

        if (xNomadToken != null) {
            localVarHeaderParams.put("X-Nomad-Token", localVarApiClient.parameterToString(xNomadToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "X-Nomad-Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerJobValidateBeforeCall(JobRegisterRequest jobRegisterRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobRegisterRequest' is set
        if (jobRegisterRequest == null) {
            throw new ApiException("Missing the required parameter 'jobRegisterRequest' when calling registerJob(Async)");
        }
        

        okhttp3.Call localVarCall = registerJobCall(jobRegisterRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jobRegisterRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return JobRegisterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public JobRegisterResponse registerJob(JobRegisterRequest jobRegisterRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        ApiResponse<JobRegisterResponse> localVarResp = registerJobWithHttpInfo(jobRegisterRequest, region, namespace, xNomadToken, idempotencyToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jobRegisterRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @return ApiResponse&lt;JobRegisterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobRegisterResponse> registerJobWithHttpInfo(JobRegisterRequest jobRegisterRequest, String region, String namespace, String xNomadToken, String idempotencyToken) throws ApiException {
        okhttp3.Call localVarCall = registerJobValidateBeforeCall(jobRegisterRequest, region, namespace, xNomadToken, idempotencyToken, null);
        Type localVarReturnType = new TypeToken<JobRegisterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jobRegisterRequest  (required)
     * @param region Filters results based on the specified region. (optional)
     * @param namespace Filters results based on the specified namespace. (optional)
     * @param xNomadToken A Nomad ACL token. (optional)
     * @param idempotencyToken Can be used to ensure operations are only run once. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Nomad-Index - A unique identifier representing the current state of the requested resource. On a new Nomad cluster the value of this index starts at 1. <br>  * X-Nomad-KnownLeader - Boolean indicating if there is a known cluster leader. <br>  * X-Nomad-LastContact - The time in milliseconds that a server was last contacted by the leader node. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerJobAsync(JobRegisterRequest jobRegisterRequest, String region, String namespace, String xNomadToken, String idempotencyToken, final ApiCallback<JobRegisterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerJobValidateBeforeCall(jobRegisterRequest, region, namespace, xNomadToken, idempotencyToken, _callback);
        Type localVarReturnType = new TypeToken<JobRegisterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
