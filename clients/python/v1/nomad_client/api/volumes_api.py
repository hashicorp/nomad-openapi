"""
    Nomad

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.1.4
    Contact: support@hashicorp.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from nomad_client.api_client import ApiClient, Endpoint as _Endpoint
from nomad_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from nomad_client.model.csi_snapshot_create_request import CSISnapshotCreateRequest
from nomad_client.model.csi_snapshot_create_response import CSISnapshotCreateResponse
from nomad_client.model.csi_snapshot_list_response import CSISnapshotListResponse
from nomad_client.model.csi_volume import CSIVolume
from nomad_client.model.csi_volume_create_request import CSIVolumeCreateRequest
from nomad_client.model.csi_volume_list_external_response import CSIVolumeListExternalResponse
from nomad_client.model.csi_volume_list_stub import CSIVolumeListStub
from nomad_client.model.csi_volume_register_request import CSIVolumeRegisterRequest


class VolumesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_volume_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/volume/csi/{volumeId}/{action}',
                'operation_id': 'create_volume',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'volume_id',
                    'action',
                    'csi_volume_create_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'volume_id',
                    'action',
                    'csi_volume_create_request',
                ],
                'nullable': [
                    'csi_volume_create_request',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'volume_id':
                        (str,),
                    'action':
                        (str,),
                    'csi_volume_create_request':
                        (CSIVolumeCreateRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'volume_id': 'volumeId',
                    'action': 'action',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'volume_id': 'path',
                    'action': 'path',
                    'csi_volume_create_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_snapshot_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/volumes/snapshot',
                'operation_id': 'delete_snapshot',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                    'plugin_id',
                    'snapshot_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                    'plugin_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                    'plugin_id': 'plugin_id',
                    'snapshot_id': 'snapshot_id',
                },
                'location_map': {
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                    'plugin_id': 'query',
                    'snapshot_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_volume_registration_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/volume/csi/{volumeId}',
                'operation_id': 'delete_volume_registration',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'volume_id',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                    'force',
                ],
                'required': [
                    'volume_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'volume_id':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                    'force':
                        (str,),
                },
                'attribute_map': {
                    'volume_id': 'volumeId',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                    'force': 'force',
                },
                'location_map': {
                    'volume_id': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.detach_or_delete_volume_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/volume/csi/{volumeId}/{action}',
                'operation_id': 'detach_or_delete_volume',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'volume_id',
                    'action',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                    'node',
                ],
                'required': [
                    'volume_id',
                    'action',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'volume_id':
                        (str,),
                    'action':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                    'node':
                        (str,),
                },
                'attribute_map': {
                    'volume_id': 'volumeId',
                    'action': 'action',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                    'node': 'node',
                },
                'location_map': {
                    'volume_id': 'path',
                    'action': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                    'node': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_external_volumes_endpoint = _Endpoint(
            settings={
                'response_type': (CSIVolumeListExternalResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/volumes/external',
                'operation_id': 'get_external_volumes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                    'plugin_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                    'plugin_id':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                    'plugin_id': 'plugin_id',
                },
                'location_map': {
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                    'plugin_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_snapshots_endpoint = _Endpoint(
            settings={
                'response_type': (CSISnapshotListResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/volumes/snapshot',
                'operation_id': 'get_snapshots',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                    'plugin_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                    'plugin_id':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                    'plugin_id': 'plugin_id',
                },
                'location_map': {
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                    'plugin_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_volume_endpoint = _Endpoint(
            settings={
                'response_type': (CSIVolume,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/volume/csi/{volumeId}',
                'operation_id': 'get_volume',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'volume_id',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                ],
                'required': [
                    'volume_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'volume_id':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                },
                'attribute_map': {
                    'volume_id': 'volumeId',
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                },
                'location_map': {
                    'volume_id': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_volumes_endpoint = _Endpoint(
            settings={
                'response_type': ([CSIVolumeListStub],),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/volumes',
                'operation_id': 'get_volumes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                    'node_id',
                    'plugin_id',
                    'type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                    'node_id':
                        (str,),
                    'plugin_id':
                        (str,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                    'node_id': 'node_id',
                    'plugin_id': 'plugin_id',
                    'type': 'type',
                },
                'location_map': {
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                    'node_id': 'query',
                    'plugin_id': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.post_snapshot_endpoint = _Endpoint(
            settings={
                'response_type': (CSISnapshotCreateResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/volumes/snapshot',
                'operation_id': 'post_snapshot',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'csi_snapshot_create_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'csi_snapshot_create_request',
                ],
                'nullable': [
                    'csi_snapshot_create_request',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'csi_snapshot_create_request':
                        (CSISnapshotCreateRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'csi_snapshot_create_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_volume_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/volumes',
                'operation_id': 'post_volume',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'csi_volume_register_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'csi_volume_register_request',
                ],
                'nullable': [
                    'csi_volume_register_request',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'csi_volume_register_request':
                        (CSIVolumeRegisterRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'csi_volume_register_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_volume_registration_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/volume/csi/{volumeId}',
                'operation_id': 'post_volume_registration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'volume_id',
                    'csi_volume_register_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'volume_id',
                    'csi_volume_register_request',
                ],
                'nullable': [
                    'csi_volume_register_request',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'volume_id':
                        (str,),
                    'csi_volume_register_request':
                        (CSIVolumeRegisterRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'volume_id': 'volumeId',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'volume_id': 'path',
                    'csi_volume_register_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_volume(
        self,
        volume_id,
        action,
        csi_volume_create_request,
        **kwargs
    ):
        """create_volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_volume(volume_id, action, csi_volume_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            volume_id (str): Volume unique identifier.
            action (str): The action to perform on the Volume (create, detach, delete).
            csi_volume_create_request (CSIVolumeCreateRequest):

        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['volume_id'] = \
            volume_id
        kwargs['action'] = \
            action
        kwargs['csi_volume_create_request'] = \
            csi_volume_create_request
        return self.create_volume_endpoint.call_with_http_info(**kwargs)

    def delete_snapshot(
        self,
        **kwargs
    ):
        """delete_snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_snapshot(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
            plugin_id (str): Filters volume lists by plugin ID.. [optional]
            snapshot_id (str): The ID of the snapshot to target.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.delete_snapshot_endpoint.call_with_http_info(**kwargs)

    def delete_volume_registration(
        self,
        volume_id,
        **kwargs
    ):
        """delete_volume_registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_volume_registration(volume_id, async_req=True)
        >>> result = thread.get()

        Args:
            volume_id (str): Volume unique identifier.

        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
            force (str): Used to force the de-registration of a volume.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['volume_id'] = \
            volume_id
        return self.delete_volume_registration_endpoint.call_with_http_info(**kwargs)

    def detach_or_delete_volume(
        self,
        volume_id,
        action,
        **kwargs
    ):
        """detach_or_delete_volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.detach_or_delete_volume(volume_id, action, async_req=True)
        >>> result = thread.get()

        Args:
            volume_id (str): Volume unique identifier.
            action (str): The action to perform on the Volume (create, detach, delete).

        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
            node (str): Specifies node to target volume operation for.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['volume_id'] = \
            volume_id
        kwargs['action'] = \
            action
        return self.detach_or_delete_volume_endpoint.call_with_http_info(**kwargs)

    def get_external_volumes(
        self,
        **kwargs
    ):
        """get_external_volumes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_external_volumes(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
            wait (str): Provided with IndexParam to wait for change.. [optional]
            stale (str): If present, results will include stale reads.. [optional]
            prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            per_page (int): Maximum number of results to return.. [optional]
            next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
            plugin_id (str): Filters volume lists by plugin ID.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CSIVolumeListExternalResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_external_volumes_endpoint.call_with_http_info(**kwargs)

    def get_snapshots(
        self,
        **kwargs
    ):
        """get_snapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_snapshots(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
            wait (str): Provided with IndexParam to wait for change.. [optional]
            stale (str): If present, results will include stale reads.. [optional]
            prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            per_page (int): Maximum number of results to return.. [optional]
            next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
            plugin_id (str): Filters volume lists by plugin ID.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CSISnapshotListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_snapshots_endpoint.call_with_http_info(**kwargs)

    def get_volume(
        self,
        volume_id,
        **kwargs
    ):
        """get_volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_volume(volume_id, async_req=True)
        >>> result = thread.get()

        Args:
            volume_id (str): Volume unique identifier.

        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
            wait (str): Provided with IndexParam to wait for change.. [optional]
            stale (str): If present, results will include stale reads.. [optional]
            prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            per_page (int): Maximum number of results to return.. [optional]
            next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CSIVolume
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['volume_id'] = \
            volume_id
        return self.get_volume_endpoint.call_with_http_info(**kwargs)

    def get_volumes(
        self,
        **kwargs
    ):
        """get_volumes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_volumes(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
            wait (str): Provided with IndexParam to wait for change.. [optional]
            stale (str): If present, results will include stale reads.. [optional]
            prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            per_page (int): Maximum number of results to return.. [optional]
            next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
            node_id (str): Filters volume lists by node ID.. [optional]
            plugin_id (str): Filters volume lists by plugin ID.. [optional]
            type (str): Filters volume lists to a specific type.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [CSIVolumeListStub]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_volumes_endpoint.call_with_http_info(**kwargs)

    def post_snapshot(
        self,
        csi_snapshot_create_request,
        **kwargs
    ):
        """post_snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_snapshot(csi_snapshot_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            csi_snapshot_create_request (CSISnapshotCreateRequest):

        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CSISnapshotCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['csi_snapshot_create_request'] = \
            csi_snapshot_create_request
        return self.post_snapshot_endpoint.call_with_http_info(**kwargs)

    def post_volume(
        self,
        csi_volume_register_request,
        **kwargs
    ):
        """post_volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_volume(csi_volume_register_request, async_req=True)
        >>> result = thread.get()

        Args:
            csi_volume_register_request (CSIVolumeRegisterRequest):

        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['csi_volume_register_request'] = \
            csi_volume_register_request
        return self.post_volume_endpoint.call_with_http_info(**kwargs)

    def post_volume_registration(
        self,
        volume_id,
        csi_volume_register_request,
        **kwargs
    ):
        """post_volume_registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_volume_registration(volume_id, csi_volume_register_request, async_req=True)
        >>> result = thread.get()

        Args:
            volume_id (str): Volume unique identifier.
            csi_volume_register_request (CSIVolumeRegisterRequest):

        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['volume_id'] = \
            volume_id
        kwargs['csi_volume_register_request'] = \
            csi_volume_register_request
        return self.post_volume_registration_endpoint.call_with_http_info(**kwargs)

