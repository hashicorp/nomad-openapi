"""
    Nomad

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.1.4
    Contact: support@hashicorp.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from nomad_client.api_client import ApiClient, Endpoint as _Endpoint
from nomad_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from nomad_client.model.allocation_list_stub import AllocationListStub
from nomad_client.model.deployment import Deployment
from nomad_client.model.deployment_alloc_health_request import DeploymentAllocHealthRequest
from nomad_client.model.deployment_pause_request import DeploymentPauseRequest
from nomad_client.model.deployment_promote_request import DeploymentPromoteRequest
from nomad_client.model.deployment_unblock_request import DeploymentUnblockRequest
from nomad_client.model.deployment_update_response import DeploymentUpdateResponse


class DeploymentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_deployment(
            self,
            deployment_id,
            **kwargs
        ):
            """get_deployment  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_deployment(deployment_id, async_req=True)
            >>> result = thread.get()

            Args:
                deployment_id (str): Deployment ID.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
                wait (str): Provided with IndexParam to wait for change.. [optional]
                stale (str): If present, results will include stale reads.. [optional]
                prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                per_page (int): Maximum number of results to return.. [optional]
                next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Deployment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['deployment_id'] = \
                deployment_id
            return self.call_with_http_info(**kwargs)

        self.get_deployment = _Endpoint(
            settings={
                'response_type': (Deployment,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/deployment/{deploymentID}',
                'operation_id': 'get_deployment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                ],
                'required': [
                    'deployment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentID',
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_deployment
        )

        def __get_deployment_allocations(
            self,
            deployment_id,
            **kwargs
        ):
            """get_deployment_allocations  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_deployment_allocations(deployment_id, async_req=True)
            >>> result = thread.get()

            Args:
                deployment_id (str): Deployment ID.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
                wait (str): Provided with IndexParam to wait for change.. [optional]
                stale (str): If present, results will include stale reads.. [optional]
                prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                per_page (int): Maximum number of results to return.. [optional]
                next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AllocationListStub]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['deployment_id'] = \
                deployment_id
            return self.call_with_http_info(**kwargs)

        self.get_deployment_allocations = _Endpoint(
            settings={
                'response_type': ([AllocationListStub],),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/deployment/allocations/{deploymentID}',
                'operation_id': 'get_deployment_allocations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                ],
                'required': [
                    'deployment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentID',
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_deployment_allocations
        )

        def __get_deployments(
            self,
            **kwargs
        ):
            """get_deployments  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_deployments(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
                wait (str): Provided with IndexParam to wait for change.. [optional]
                stale (str): If present, results will include stale reads.. [optional]
                prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                per_page (int): Maximum number of results to return.. [optional]
                next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Deployment]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_deployments = _Endpoint(
            settings={
                'response_type': ([Deployment],),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/deployments',
                'operation_id': 'get_deployments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                },
                'location_map': {
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_deployments
        )

        def __post_deployment_allocation_health(
            self,
            deployment_id,
            deployment_alloc_health_request,
            **kwargs
        ):
            """post_deployment_allocation_health  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_deployment_allocation_health(deployment_id, deployment_alloc_health_request, async_req=True)
            >>> result = thread.get()

            Args:
                deployment_id (str): Deployment ID.
                deployment_alloc_health_request (DeploymentAllocHealthRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeploymentUpdateResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['deployment_id'] = \
                deployment_id
            kwargs['deployment_alloc_health_request'] = \
                deployment_alloc_health_request
            return self.call_with_http_info(**kwargs)

        self.post_deployment_allocation_health = _Endpoint(
            settings={
                'response_type': (DeploymentUpdateResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/deployment/allocation-health/{deploymentID}',
                'operation_id': 'post_deployment_allocation_health',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'deployment_alloc_health_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'deployment_id',
                    'deployment_alloc_health_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (str,),
                    'deployment_alloc_health_request':
                        (DeploymentAllocHealthRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentID',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'deployment_alloc_health_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_deployment_allocation_health
        )

        def __post_deployment_fail(
            self,
            deployment_id,
            **kwargs
        ):
            """post_deployment_fail  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_deployment_fail(deployment_id, async_req=True)
            >>> result = thread.get()

            Args:
                deployment_id (str): Deployment ID.

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeploymentUpdateResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['deployment_id'] = \
                deployment_id
            return self.call_with_http_info(**kwargs)

        self.post_deployment_fail = _Endpoint(
            settings={
                'response_type': (DeploymentUpdateResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/deployment/fail/{deploymentID}',
                'operation_id': 'post_deployment_fail',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'deployment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (str,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentID',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_deployment_fail
        )

        def __post_deployment_pause(
            self,
            deployment_id,
            deployment_pause_request,
            **kwargs
        ):
            """post_deployment_pause  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_deployment_pause(deployment_id, deployment_pause_request, async_req=True)
            >>> result = thread.get()

            Args:
                deployment_id (str): Deployment ID.
                deployment_pause_request (DeploymentPauseRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeploymentUpdateResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['deployment_id'] = \
                deployment_id
            kwargs['deployment_pause_request'] = \
                deployment_pause_request
            return self.call_with_http_info(**kwargs)

        self.post_deployment_pause = _Endpoint(
            settings={
                'response_type': (DeploymentUpdateResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/deployment/pause/{deploymentID}',
                'operation_id': 'post_deployment_pause',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'deployment_pause_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'deployment_id',
                    'deployment_pause_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (str,),
                    'deployment_pause_request':
                        (DeploymentPauseRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentID',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'deployment_pause_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_deployment_pause
        )

        def __post_deployment_promote(
            self,
            deployment_id,
            deployment_promote_request,
            **kwargs
        ):
            """post_deployment_promote  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_deployment_promote(deployment_id, deployment_promote_request, async_req=True)
            >>> result = thread.get()

            Args:
                deployment_id (str): Deployment ID.
                deployment_promote_request (DeploymentPromoteRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeploymentUpdateResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['deployment_id'] = \
                deployment_id
            kwargs['deployment_promote_request'] = \
                deployment_promote_request
            return self.call_with_http_info(**kwargs)

        self.post_deployment_promote = _Endpoint(
            settings={
                'response_type': (DeploymentUpdateResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/deployment/promote/{deploymentID}',
                'operation_id': 'post_deployment_promote',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'deployment_promote_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'deployment_id',
                    'deployment_promote_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (str,),
                    'deployment_promote_request':
                        (DeploymentPromoteRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentID',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'deployment_promote_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_deployment_promote
        )

        def __post_deployment_unblock(
            self,
            deployment_id,
            deployment_unblock_request,
            **kwargs
        ):
            """post_deployment_unblock  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_deployment_unblock(deployment_id, deployment_unblock_request, async_req=True)
            >>> result = thread.get()

            Args:
                deployment_id (str): Deployment ID.
                deployment_unblock_request (DeploymentUnblockRequest):

            Keyword Args:
                region (str): Filters results based on the specified region.. [optional]
                namespace (str): Filters results based on the specified namespace.. [optional]
                x_nomad_token (str): A Nomad ACL token.. [optional]
                idempotency_token (str): Can be used to ensure operations are only run once.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeploymentUpdateResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['deployment_id'] = \
                deployment_id
            kwargs['deployment_unblock_request'] = \
                deployment_unblock_request
            return self.call_with_http_info(**kwargs)

        self.post_deployment_unblock = _Endpoint(
            settings={
                'response_type': (DeploymentUpdateResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/deployment/unblock/{deploymentID}',
                'operation_id': 'post_deployment_unblock',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'deployment_unblock_request',
                    'region',
                    'namespace',
                    'x_nomad_token',
                    'idempotency_token',
                ],
                'required': [
                    'deployment_id',
                    'deployment_unblock_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (str,),
                    'deployment_unblock_request':
                        (DeploymentUnblockRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'idempotency_token':
                        (str,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentID',
                    'region': 'region',
                    'namespace': 'namespace',
                    'x_nomad_token': 'X-Nomad-Token',
                    'idempotency_token': 'idempotency_token',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'deployment_unblock_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'x_nomad_token': 'header',
                    'idempotency_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_deployment_unblock
        )
