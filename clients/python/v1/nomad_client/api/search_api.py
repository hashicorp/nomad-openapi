"""
    Nomad

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.1.4
    Contact: support@hashicorp.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from nomad_client.api_client import ApiClient, Endpoint as _Endpoint
from nomad_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from nomad_client.model.fuzzy_search_request import FuzzySearchRequest
from nomad_client.model.fuzzy_search_response import FuzzySearchResponse
from nomad_client.model.search_request import SearchRequest
from nomad_client.model.search_response import SearchResponse


class SearchApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_fuzzy_search_endpoint = _Endpoint(
            settings={
                'response_type': (FuzzySearchResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/search/fuzzy',
                'operation_id': 'get_fuzzy_search',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fuzzy_search_request',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                ],
                'required': [
                    'fuzzy_search_request',
                ],
                'nullable': [
                    'fuzzy_search_request',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fuzzy_search_request':
                        (FuzzySearchRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                },
                'location_map': {
                    'fuzzy_search_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_search_endpoint = _Endpoint(
            settings={
                'response_type': (SearchResponse,),
                'auth': [
                    'X-Nomad-Token'
                ],
                'endpoint_path': '/search',
                'operation_id': 'get_search',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'search_request',
                    'region',
                    'namespace',
                    'index',
                    'wait',
                    'stale',
                    'prefix',
                    'x_nomad_token',
                    'per_page',
                    'next_token',
                ],
                'required': [
                    'search_request',
                ],
                'nullable': [
                    'search_request',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'search_request':
                        (SearchRequest,),
                    'region':
                        (str,),
                    'namespace':
                        (str,),
                    'index':
                        (int,),
                    'wait':
                        (str,),
                    'stale':
                        (str,),
                    'prefix':
                        (str,),
                    'x_nomad_token':
                        (str,),
                    'per_page':
                        (int,),
                    'next_token':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'namespace': 'namespace',
                    'index': 'index',
                    'wait': 'wait',
                    'stale': 'stale',
                    'prefix': 'prefix',
                    'x_nomad_token': 'X-Nomad-Token',
                    'per_page': 'per_page',
                    'next_token': 'next_token',
                },
                'location_map': {
                    'search_request': 'body',
                    'region': 'query',
                    'namespace': 'query',
                    'index': 'header',
                    'wait': 'query',
                    'stale': 'query',
                    'prefix': 'query',
                    'x_nomad_token': 'header',
                    'per_page': 'query',
                    'next_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def get_fuzzy_search(
        self,
        fuzzy_search_request,
        **kwargs
    ):
        """get_fuzzy_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fuzzy_search(fuzzy_search_request, async_req=True)
        >>> result = thread.get()

        Args:
            fuzzy_search_request (FuzzySearchRequest):

        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
            wait (str): Provided with IndexParam to wait for change.. [optional]
            stale (str): If present, results will include stale reads.. [optional]
            prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            per_page (int): Maximum number of results to return.. [optional]
            next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FuzzySearchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['fuzzy_search_request'] = \
            fuzzy_search_request
        return self.get_fuzzy_search_endpoint.call_with_http_info(**kwargs)

    def get_search(
        self,
        search_request,
        **kwargs
    ):
        """get_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_search(search_request, async_req=True)
        >>> result = thread.get()

        Args:
            search_request (SearchRequest):

        Keyword Args:
            region (str): Filters results based on the specified region.. [optional]
            namespace (str): Filters results based on the specified namespace.. [optional]
            index (int): If set, wait until query exceeds given index. Must be provided with WaitParam.. [optional]
            wait (str): Provided with IndexParam to wait for change.. [optional]
            stale (str): If present, results will include stale reads.. [optional]
            prefix (str): Constrains results to jobs that start with the defined prefix. [optional]
            x_nomad_token (str): A Nomad ACL token.. [optional]
            per_page (int): Maximum number of results to return.. [optional]
            next_token (str): Indicates where to start paging for queries that support pagination.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SearchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['search_request'] = \
            search_request
        return self.get_search_endpoint.call_with_http_info(**kwargs)

