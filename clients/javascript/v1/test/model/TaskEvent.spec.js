/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */

/**
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.nomad-client);
  }
}(this, function(expect, nomad-client) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new nomad-client.TaskEvent();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TaskEvent', function() {
    it('should create an instance of TaskEvent', function() {
      // uncomment below and update the code to test TaskEvent
      //var instane = new nomad-client.TaskEvent();
      //expect(instance).to.be.a(nomad-client.TaskEvent);
    });

    it('should have the property details (base name: "Details")', function() {
      // uncomment below and update the code to test the property details
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property diskLimit (base name: "DiskLimit")', function() {
      // uncomment below and update the code to test the property diskLimit
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property diskSize (base name: "DiskSize")', function() {
      // uncomment below and update the code to test the property diskSize
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property displayMessage (base name: "DisplayMessage")', function() {
      // uncomment below and update the code to test the property displayMessage
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property downloadError (base name: "DownloadError")', function() {
      // uncomment below and update the code to test the property downloadError
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property driverError (base name: "DriverError")', function() {
      // uncomment below and update the code to test the property driverError
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property driverMessage (base name: "DriverMessage")', function() {
      // uncomment below and update the code to test the property driverMessage
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property exitCode (base name: "ExitCode")', function() {
      // uncomment below and update the code to test the property exitCode
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property failedSibling (base name: "FailedSibling")', function() {
      // uncomment below and update the code to test the property failedSibling
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property failsTask (base name: "FailsTask")', function() {
      // uncomment below and update the code to test the property failsTask
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property genericSource (base name: "GenericSource")', function() {
      // uncomment below and update the code to test the property genericSource
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property killError (base name: "KillError")', function() {
      // uncomment below and update the code to test the property killError
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property killReason (base name: "KillReason")', function() {
      // uncomment below and update the code to test the property killReason
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property killTimeout (base name: "KillTimeout")', function() {
      // uncomment below and update the code to test the property killTimeout
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "Message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property restartReason (base name: "RestartReason")', function() {
      // uncomment below and update the code to test the property restartReason
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property setupError (base name: "SetupError")', function() {
      // uncomment below and update the code to test the property setupError
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property signal (base name: "Signal")', function() {
      // uncomment below and update the code to test the property signal
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property startDelay (base name: "StartDelay")', function() {
      // uncomment below and update the code to test the property startDelay
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property taskSignal (base name: "TaskSignal")', function() {
      // uncomment below and update the code to test the property taskSignal
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property taskSignalReason (base name: "TaskSignalReason")', function() {
      // uncomment below and update the code to test the property taskSignalReason
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property time (base name: "Time")', function() {
      // uncomment below and update the code to test the property time
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property validationError (base name: "ValidationError")', function() {
      // uncomment below and update the code to test the property validationError
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

    it('should have the property vaultError (base name: "VaultError")', function() {
      // uncomment below and update the code to test the property vaultError
      //var instance = new nomad-client.TaskEvent();
      //expect(instance).to.be();
    });

  });

}));
