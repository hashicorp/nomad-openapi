/**
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.nomad-client);
  }
}(this, function(expect, nomad-client) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new nomad-client.ServiceCheck();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServiceCheck', function() {
    it('should create an instance of ServiceCheck', function() {
      // uncomment below and update the code to test ServiceCheck
      //var instane = new nomad-client.ServiceCheck();
      //expect(instance).to.be.a(nomad-client.ServiceCheck);
    });

    it('should have the property addressMode (base name: "AddressMode")', function() {
      // uncomment below and update the code to test the property addressMode
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property args (base name: "Args")', function() {
      // uncomment below and update the code to test the property args
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property body (base name: "Body")', function() {
      // uncomment below and update the code to test the property body
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property checkRestart (base name: "CheckRestart")', function() {
      // uncomment below and update the code to test the property checkRestart
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property command (base name: "Command")', function() {
      // uncomment below and update the code to test the property command
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property expose (base name: "Expose")', function() {
      // uncomment below and update the code to test the property expose
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property failuresBeforeCritical (base name: "FailuresBeforeCritical")', function() {
      // uncomment below and update the code to test the property failuresBeforeCritical
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property gRPCService (base name: "GRPCService")', function() {
      // uncomment below and update the code to test the property gRPCService
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property gRPCUseTLS (base name: "GRPCUseTLS")', function() {
      // uncomment below and update the code to test the property gRPCUseTLS
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property header (base name: "Header")', function() {
      // uncomment below and update the code to test the property header
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property initialStatus (base name: "InitialStatus")', function() {
      // uncomment below and update the code to test the property initialStatus
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property interval (base name: "Interval")', function() {
      // uncomment below and update the code to test the property interval
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property method (base name: "Method")', function() {
      // uncomment below and update the code to test the property method
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property onUpdate (base name: "OnUpdate")', function() {
      // uncomment below and update the code to test the property onUpdate
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "Path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property portLabel (base name: "PortLabel")', function() {
      // uncomment below and update the code to test the property portLabel
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property protocol (base name: "Protocol")', function() {
      // uncomment below and update the code to test the property protocol
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property successBeforePassing (base name: "SuccessBeforePassing")', function() {
      // uncomment below and update the code to test the property successBeforePassing
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property tLSSkipVerify (base name: "TLSSkipVerify")', function() {
      // uncomment below and update the code to test the property tLSSkipVerify
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property taskName (base name: "TaskName")', function() {
      // uncomment below and update the code to test the property taskName
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property timeout (base name: "Timeout")', function() {
      // uncomment below and update the code to test the property timeout
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new nomad-client.ServiceCheck();
      //expect(instance).to.be();
    });

  });

}));
