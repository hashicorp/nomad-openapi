/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */

/**
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.nomad-client);
  }
}(this, function(expect, nomad-client) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new nomad-client.CSIVolume();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CSIVolume', function() {
    it('should create an instance of CSIVolume', function() {
      // uncomment below and update the code to test CSIVolume
      //var instane = new nomad-client.CSIVolume();
      //expect(instance).to.be.a(nomad-client.CSIVolume);
    });

    it('should have the property accessMode (base name: "AccessMode")', function() {
      // uncomment below and update the code to test the property accessMode
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property allocations (base name: "Allocations")', function() {
      // uncomment below and update the code to test the property allocations
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property attachmentMode (base name: "AttachmentMode")', function() {
      // uncomment below and update the code to test the property attachmentMode
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property capacity (base name: "Capacity")', function() {
      // uncomment below and update the code to test the property capacity
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property cloneID (base name: "CloneID")', function() {
      // uncomment below and update the code to test the property cloneID
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property context (base name: "Context")', function() {
      // uncomment below and update the code to test the property context
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property controllerRequired (base name: "ControllerRequired")', function() {
      // uncomment below and update the code to test the property controllerRequired
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property controllersExpected (base name: "ControllersExpected")', function() {
      // uncomment below and update the code to test the property controllersExpected
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property controllersHealthy (base name: "ControllersHealthy")', function() {
      // uncomment below and update the code to test the property controllersHealthy
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property createIndex (base name: "CreateIndex")', function() {
      // uncomment below and update the code to test the property createIndex
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property externalID (base name: "ExternalID")', function() {
      // uncomment below and update the code to test the property externalID
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property ID (base name: "ID")', function() {
      // uncomment below and update the code to test the property ID
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property modifyIndex (base name: "ModifyIndex")', function() {
      // uncomment below and update the code to test the property modifyIndex
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property mountOptions (base name: "MountOptions")', function() {
      // uncomment below and update the code to test the property mountOptions
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property namespace (base name: "Namespace")', function() {
      // uncomment below and update the code to test the property namespace
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property nodesExpected (base name: "NodesExpected")', function() {
      // uncomment below and update the code to test the property nodesExpected
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property nodesHealthy (base name: "NodesHealthy")', function() {
      // uncomment below and update the code to test the property nodesHealthy
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "Parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property pluginID (base name: "PluginID")', function() {
      // uncomment below and update the code to test the property pluginID
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property provider (base name: "Provider")', function() {
      // uncomment below and update the code to test the property provider
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property providerVersion (base name: "ProviderVersion")', function() {
      // uncomment below and update the code to test the property providerVersion
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property readAllocs (base name: "ReadAllocs")', function() {
      // uncomment below and update the code to test the property readAllocs
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property requestedCapabilities (base name: "RequestedCapabilities")', function() {
      // uncomment below and update the code to test the property requestedCapabilities
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property requestedCapacityMax (base name: "RequestedCapacityMax")', function() {
      // uncomment below and update the code to test the property requestedCapacityMax
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property requestedCapacityMin (base name: "RequestedCapacityMin")', function() {
      // uncomment below and update the code to test the property requestedCapacityMin
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property resourceExhausted (base name: "ResourceExhausted")', function() {
      // uncomment below and update the code to test the property resourceExhausted
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property schedulable (base name: "Schedulable")', function() {
      // uncomment below and update the code to test the property schedulable
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property secrets (base name: "Secrets")', function() {
      // uncomment below and update the code to test the property secrets
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property snapshotID (base name: "SnapshotID")', function() {
      // uncomment below and update the code to test the property snapshotID
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property topologies (base name: "Topologies")', function() {
      // uncomment below and update the code to test the property topologies
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

    it('should have the property writeAllocs (base name: "WriteAllocs")', function() {
      // uncomment below and update the code to test the property writeAllocs
      //var instance = new nomad-client.CSIVolume();
      //expect(instance).to.be();
    });

  });

}));
