/**
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CSISnapshotCreateRequest from '../model/CSISnapshotCreateRequest';
import CSISnapshotCreateResponse from '../model/CSISnapshotCreateResponse';
import CSISnapshotListResponse from '../model/CSISnapshotListResponse';
import CSIVolume from '../model/CSIVolume';
import CSIVolumeCreateRequest from '../model/CSIVolumeCreateRequest';
import CSIVolumeListExternalResponse from '../model/CSIVolumeListExternalResponse';
import CSIVolumeListStub from '../model/CSIVolumeListStub';
import CSIVolumeRegisterRequest from '../model/CSIVolumeRegisterRequest';

/**
* Volumes service.
* @module api/VolumesApi
* @version 1.1.4
*/
export default class VolumesApi {

    /**
    * Constructs a new VolumesApi. 
    * @alias module:api/VolumesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createVolume operation.
     * @callback module:api/VolumesApi~createVolumeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} volumeId Volume unique identifier.
     * @param {String} action The action to perform on the Volume (create, detach, delete).
     * @param {module:model/CSIVolumeCreateRequest} cSIVolumeCreateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/VolumesApi~createVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createVolume(volumeId, action, cSIVolumeCreateRequest, opts, callback) {
      opts = opts || {};
      let postBody = cSIVolumeCreateRequest;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling createVolume");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling createVolume");
      }
      // verify the required parameter 'cSIVolumeCreateRequest' is set
      if (cSIVolumeCreateRequest === undefined || cSIVolumeCreateRequest === null) {
        throw new Error("Missing the required parameter 'cSIVolumeCreateRequest' when calling createVolume");
      }

      let pathParams = {
        'volumeId': volumeId,
        'action': action
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/volume/csi/{volumeId}/{action}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSnapshot operation.
     * @callback module:api/VolumesApi~deleteSnapshotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {String} opts.pluginId Filters volume lists by plugin ID.
     * @param {String} opts.snapshotId The ID of the snapshot to target.
     * @param {module:api/VolumesApi~deleteSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSnapshot(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken'],
        'plugin_id': opts['pluginId'],
        'snapshot_id': opts['snapshotId']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/volumes/snapshot', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVolumeRegistration operation.
     * @callback module:api/VolumesApi~deleteVolumeRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} volumeId Volume unique identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {String} opts.force Used to force the de-registration of a volume.
     * @param {module:api/VolumesApi~deleteVolumeRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVolumeRegistration(volumeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling deleteVolumeRegistration");
      }

      let pathParams = {
        'volumeId': volumeId
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken'],
        'force': opts['force']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/volume/csi/{volumeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detachOrDeleteVolume operation.
     * @callback module:api/VolumesApi~detachOrDeleteVolumeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} volumeId Volume unique identifier.
     * @param {String} action The action to perform on the Volume (create, detach, delete).
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {String} opts.node Specifies node to target volume operation for.
     * @param {module:api/VolumesApi~detachOrDeleteVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    detachOrDeleteVolume(volumeId, action, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling detachOrDeleteVolume");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling detachOrDeleteVolume");
      }

      let pathParams = {
        'volumeId': volumeId,
        'action': action
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken'],
        'node': opts['node']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/volume/csi/{volumeId}/{action}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExternalVolumes operation.
     * @callback module:api/VolumesApi~getExternalVolumesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CSIVolumeListExternalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {String} opts.pluginId Filters volume lists by plugin ID.
     * @param {module:api/VolumesApi~getExternalVolumesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CSIVolumeListExternalResponse}
     */
    getExternalVolumes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken'],
        'plugin_id': opts['pluginId']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CSIVolumeListExternalResponse;
      return this.apiClient.callApi(
        '/volumes/external', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnapshots operation.
     * @callback module:api/VolumesApi~getSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CSISnapshotListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {String} opts.pluginId Filters volume lists by plugin ID.
     * @param {module:api/VolumesApi~getSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CSISnapshotListResponse}
     */
    getSnapshots(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken'],
        'plugin_id': opts['pluginId']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CSISnapshotListResponse;
      return this.apiClient.callApi(
        '/volumes/snapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVolume operation.
     * @callback module:api/VolumesApi~getVolumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CSIVolume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} volumeId Volume unique identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {module:api/VolumesApi~getVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CSIVolume}
     */
    getVolume(volumeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling getVolume");
      }

      let pathParams = {
        'volumeId': volumeId
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CSIVolume;
      return this.apiClient.callApi(
        '/volume/csi/{volumeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVolumes operation.
     * @callback module:api/VolumesApi~getVolumesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CSIVolumeListStub>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {String} opts.nodeId Filters volume lists by node ID.
     * @param {String} opts.pluginId Filters volume lists by plugin ID.
     * @param {String} opts.type Filters volume lists to a specific type.
     * @param {module:api/VolumesApi~getVolumesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CSIVolumeListStub>}
     */
    getVolumes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken'],
        'node_id': opts['nodeId'],
        'plugin_id': opts['pluginId'],
        'type': opts['type']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CSIVolumeListStub];
      return this.apiClient.callApi(
        '/volumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSnapshot operation.
     * @callback module:api/VolumesApi~postSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CSISnapshotCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CSISnapshotCreateRequest} cSISnapshotCreateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/VolumesApi~postSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CSISnapshotCreateResponse}
     */
    postSnapshot(cSISnapshotCreateRequest, opts, callback) {
      opts = opts || {};
      let postBody = cSISnapshotCreateRequest;
      // verify the required parameter 'cSISnapshotCreateRequest' is set
      if (cSISnapshotCreateRequest === undefined || cSISnapshotCreateRequest === null) {
        throw new Error("Missing the required parameter 'cSISnapshotCreateRequest' when calling postSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CSISnapshotCreateResponse;
      return this.apiClient.callApi(
        '/volumes/snapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postVolume operation.
     * @callback module:api/VolumesApi~postVolumeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CSIVolumeRegisterRequest} cSIVolumeRegisterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/VolumesApi~postVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postVolume(cSIVolumeRegisterRequest, opts, callback) {
      opts = opts || {};
      let postBody = cSIVolumeRegisterRequest;
      // verify the required parameter 'cSIVolumeRegisterRequest' is set
      if (cSIVolumeRegisterRequest === undefined || cSIVolumeRegisterRequest === null) {
        throw new Error("Missing the required parameter 'cSIVolumeRegisterRequest' when calling postVolume");
      }

      let pathParams = {
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/volumes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postVolumeRegistration operation.
     * @callback module:api/VolumesApi~postVolumeRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} volumeId Volume unique identifier.
     * @param {module:model/CSIVolumeRegisterRequest} cSIVolumeRegisterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/VolumesApi~postVolumeRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postVolumeRegistration(volumeId, cSIVolumeRegisterRequest, opts, callback) {
      opts = opts || {};
      let postBody = cSIVolumeRegisterRequest;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling postVolumeRegistration");
      }
      // verify the required parameter 'cSIVolumeRegisterRequest' is set
      if (cSIVolumeRegisterRequest === undefined || cSIVolumeRegisterRequest === null) {
        throw new Error("Missing the required parameter 'cSIVolumeRegisterRequest' when calling postVolumeRegistration");
      }

      let pathParams = {
        'volumeId': volumeId
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/volume/csi/{volumeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
