/**
 * Nomad
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AllocationListStub from '../model/AllocationListStub';
import Deployment from '../model/Deployment';
import Evaluation from '../model/Evaluation';
import Job from '../model/Job';
import JobDeregisterResponse from '../model/JobDeregisterResponse';
import JobDispatchRequest from '../model/JobDispatchRequest';
import JobDispatchResponse from '../model/JobDispatchResponse';
import JobEvaluateRequest from '../model/JobEvaluateRequest';
import JobListStub from '../model/JobListStub';
import JobPlanRequest from '../model/JobPlanRequest';
import JobPlanResponse from '../model/JobPlanResponse';
import JobRegisterRequest from '../model/JobRegisterRequest';
import JobRegisterResponse from '../model/JobRegisterResponse';
import JobRevertRequest from '../model/JobRevertRequest';
import JobScaleStatusResponse from '../model/JobScaleStatusResponse';
import JobStabilityRequest from '../model/JobStabilityRequest';
import JobStabilityResponse from '../model/JobStabilityResponse';
import JobSummary from '../model/JobSummary';
import JobValidateRequest from '../model/JobValidateRequest';
import JobValidateResponse from '../model/JobValidateResponse';
import JobVersionsResponse from '../model/JobVersionsResponse';
import JobsParseRequest from '../model/JobsParseRequest';
import PeriodicForceResponse from '../model/PeriodicForceResponse';
import ScalingRequest from '../model/ScalingRequest';

/**
* Jobs service.
* @module api/JobsApi
* @version 1.1.4
*/
export default class JobsApi {

    /**
    * Constructs a new JobsApi. 
    * @alias module:api/JobsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteJob operation.
     * @callback module:api/JobsApi~deleteJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDeregisterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {Boolean} opts.purge Boolean flag indicating whether to purge allocations of the job after deleting.
     * @param {Boolean} opts.global Boolean flag indicating whether the operation should apply to all instances of the job globally.
     * @param {module:api/JobsApi~deleteJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDeregisterResponse}
     */
    deleteJob(jobName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling deleteJob");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken'],
        'purge': opts['purge'],
        'global': opts['global']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobDeregisterResponse;
      return this.apiClient.callApi(
        '/job/{jobName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJob operation.
     * @callback module:api/JobsApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {module:api/JobsApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Job}
     */
    getJob(jobName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getJob");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Job;
      return this.apiClient.callApi(
        '/job/{jobName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobAllocations operation.
     * @callback module:api/JobsApi~getJobAllocationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AllocationListStub>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {module:api/JobsApi~getJobAllocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AllocationListStub>}
     */
    getJobAllocations(jobName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getJobAllocations");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AllocationListStub];
      return this.apiClient.callApi(
        '/job/{jobName}/allocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobDeployment operation.
     * @callback module:api/JobsApi~getJobDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {module:api/JobsApi~getJobDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    getJobDeployment(jobName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getJobDeployment");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/job/{jobName}/deployment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobDeployments operation.
     * @callback module:api/JobsApi~getJobDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {Number} opts.all Flag indicating whether to constrain by job creation index or not.
     * @param {module:api/JobsApi~getJobDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deployment>}
     */
    getJobDeployments(jobName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getJobDeployments");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken'],
        'all': opts['all']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Deployment];
      return this.apiClient.callApi(
        '/job/{jobName}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobEvaluations operation.
     * @callback module:api/JobsApi~getJobEvaluationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Evaluation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {module:api/JobsApi~getJobEvaluationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Evaluation>}
     */
    getJobEvaluations(jobName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getJobEvaluations");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Evaluation];
      return this.apiClient.callApi(
        '/job/{jobName}/evaluations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobScaleStatus operation.
     * @callback module:api/JobsApi~getJobScaleStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobScaleStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {module:api/JobsApi~getJobScaleStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobScaleStatusResponse}
     */
    getJobScaleStatus(jobName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getJobScaleStatus");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobScaleStatusResponse;
      return this.apiClient.callApi(
        '/job/{jobName}/scale', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobSummary operation.
     * @callback module:api/JobsApi~getJobSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {module:api/JobsApi~getJobSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobSummary}
     */
    getJobSummary(jobName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getJobSummary");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobSummary;
      return this.apiClient.callApi(
        '/job/{jobName}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobVersions operation.
     * @callback module:api/JobsApi~getJobVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {Boolean} opts.diffs Boolean flag indicating whether to compute job diffs.
     * @param {module:api/JobsApi~getJobVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobVersionsResponse}
     */
    getJobVersions(jobName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getJobVersions");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken'],
        'diffs': opts['diffs']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobVersionsResponse;
      return this.apiClient.callApi(
        '/job/{jobName}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobs operation.
     * @callback module:api/JobsApi~getJobsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JobListStub>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {Number} opts.index If set, wait until query exceeds given index. Must be provided with WaitParam.
     * @param {String} opts.wait Provided with IndexParam to wait for change.
     * @param {String} opts.stale If present, results will include stale reads.
     * @param {String} opts.prefix Constrains results to jobs that start with the defined prefix
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {Number} opts.perPage Maximum number of results to return.
     * @param {String} opts.nextToken Indicates where to start paging for queries that support pagination.
     * @param {module:api/JobsApi~getJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JobListStub>}
     */
    getJobs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'wait': opts['wait'],
        'stale': opts['stale'],
        'prefix': opts['prefix'],
        'per_page': opts['perPage'],
        'next_token': opts['nextToken']
      };
      let headerParams = {
        'index': opts['index'],
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [JobListStub];
      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJob operation.
     * @callback module:api/JobsApi~postJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobRegisterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {module:model/JobRegisterRequest} jobRegisterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/JobsApi~postJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobRegisterResponse}
     */
    postJob(jobName, jobRegisterRequest, opts, callback) {
      opts = opts || {};
      let postBody = jobRegisterRequest;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling postJob");
      }
      // verify the required parameter 'jobRegisterRequest' is set
      if (jobRegisterRequest === undefined || jobRegisterRequest === null) {
        throw new Error("Missing the required parameter 'jobRegisterRequest' when calling postJob");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobRegisterResponse;
      return this.apiClient.callApi(
        '/job/{jobName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJobDispatch operation.
     * @callback module:api/JobsApi~postJobDispatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDispatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {module:model/JobDispatchRequest} jobDispatchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/JobsApi~postJobDispatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDispatchResponse}
     */
    postJobDispatch(jobName, jobDispatchRequest, opts, callback) {
      opts = opts || {};
      let postBody = jobDispatchRequest;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling postJobDispatch");
      }
      // verify the required parameter 'jobDispatchRequest' is set
      if (jobDispatchRequest === undefined || jobDispatchRequest === null) {
        throw new Error("Missing the required parameter 'jobDispatchRequest' when calling postJobDispatch");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobDispatchResponse;
      return this.apiClient.callApi(
        '/job/{jobName}/dispatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJobEvaluate operation.
     * @callback module:api/JobsApi~postJobEvaluateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobRegisterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {module:model/JobEvaluateRequest} jobEvaluateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/JobsApi~postJobEvaluateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobRegisterResponse}
     */
    postJobEvaluate(jobName, jobEvaluateRequest, opts, callback) {
      opts = opts || {};
      let postBody = jobEvaluateRequest;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling postJobEvaluate");
      }
      // verify the required parameter 'jobEvaluateRequest' is set
      if (jobEvaluateRequest === undefined || jobEvaluateRequest === null) {
        throw new Error("Missing the required parameter 'jobEvaluateRequest' when calling postJobEvaluate");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobRegisterResponse;
      return this.apiClient.callApi(
        '/job/{jobName}/evaluate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJobParse operation.
     * @callback module:api/JobsApi~postJobParseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/JobsParseRequest} jobsParseRequest 
     * @param {module:api/JobsApi~postJobParseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Job}
     */
    postJobParse(jobsParseRequest, callback) {
      let postBody = jobsParseRequest;
      // verify the required parameter 'jobsParseRequest' is set
      if (jobsParseRequest === undefined || jobsParseRequest === null) {
        throw new Error("Missing the required parameter 'jobsParseRequest' when calling postJobParse");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Job;
      return this.apiClient.callApi(
        '/jobs/parse', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJobPeriodicForce operation.
     * @callback module:api/JobsApi~postJobPeriodicForceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeriodicForceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/JobsApi~postJobPeriodicForceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeriodicForceResponse}
     */
    postJobPeriodicForce(jobName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling postJobPeriodicForce");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeriodicForceResponse;
      return this.apiClient.callApi(
        '/job/{jobName}/periodic/force', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJobPlan operation.
     * @callback module:api/JobsApi~postJobPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {module:model/JobPlanRequest} jobPlanRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/JobsApi~postJobPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobPlanResponse}
     */
    postJobPlan(jobName, jobPlanRequest, opts, callback) {
      opts = opts || {};
      let postBody = jobPlanRequest;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling postJobPlan");
      }
      // verify the required parameter 'jobPlanRequest' is set
      if (jobPlanRequest === undefined || jobPlanRequest === null) {
        throw new Error("Missing the required parameter 'jobPlanRequest' when calling postJobPlan");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobPlanResponse;
      return this.apiClient.callApi(
        '/job/{jobName}/plan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJobRevert operation.
     * @callback module:api/JobsApi~postJobRevertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobRegisterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {module:model/JobRevertRequest} jobRevertRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/JobsApi~postJobRevertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobRegisterResponse}
     */
    postJobRevert(jobName, jobRevertRequest, opts, callback) {
      opts = opts || {};
      let postBody = jobRevertRequest;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling postJobRevert");
      }
      // verify the required parameter 'jobRevertRequest' is set
      if (jobRevertRequest === undefined || jobRevertRequest === null) {
        throw new Error("Missing the required parameter 'jobRevertRequest' when calling postJobRevert");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobRegisterResponse;
      return this.apiClient.callApi(
        '/job/{jobName}/revert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJobScalingRequest operation.
     * @callback module:api/JobsApi~postJobScalingRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobRegisterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {module:model/ScalingRequest} scalingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/JobsApi~postJobScalingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobRegisterResponse}
     */
    postJobScalingRequest(jobName, scalingRequest, opts, callback) {
      opts = opts || {};
      let postBody = scalingRequest;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling postJobScalingRequest");
      }
      // verify the required parameter 'scalingRequest' is set
      if (scalingRequest === undefined || scalingRequest === null) {
        throw new Error("Missing the required parameter 'scalingRequest' when calling postJobScalingRequest");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobRegisterResponse;
      return this.apiClient.callApi(
        '/job/{jobName}/scale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJobStability operation.
     * @callback module:api/JobsApi~postJobStabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobStabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobName The job identifier.
     * @param {module:model/JobStabilityRequest} jobStabilityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/JobsApi~postJobStabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobStabilityResponse}
     */
    postJobStability(jobName, jobStabilityRequest, opts, callback) {
      opts = opts || {};
      let postBody = jobStabilityRequest;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling postJobStability");
      }
      // verify the required parameter 'jobStabilityRequest' is set
      if (jobStabilityRequest === undefined || jobStabilityRequest === null) {
        throw new Error("Missing the required parameter 'jobStabilityRequest' when calling postJobStability");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobStabilityResponse;
      return this.apiClient.callApi(
        '/job/{jobName}/stable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJobValidateRequest operation.
     * @callback module:api/JobsApi~postJobValidateRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobValidateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/JobValidateRequest} jobValidateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/JobsApi~postJobValidateRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobValidateResponse}
     */
    postJobValidateRequest(jobValidateRequest, opts, callback) {
      opts = opts || {};
      let postBody = jobValidateRequest;
      // verify the required parameter 'jobValidateRequest' is set
      if (jobValidateRequest === undefined || jobValidateRequest === null) {
        throw new Error("Missing the required parameter 'jobValidateRequest' when calling postJobValidateRequest");
      }

      let pathParams = {
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobValidateResponse;
      return this.apiClient.callApi(
        '/validate/job', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerJob operation.
     * @callback module:api/JobsApi~registerJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobRegisterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/JobRegisterRequest} jobRegisterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filters results based on the specified region.
     * @param {String} opts.namespace Filters results based on the specified namespace.
     * @param {String} opts.xNomadToken A Nomad ACL token.
     * @param {String} opts.idempotencyToken Can be used to ensure operations are only run once.
     * @param {module:api/JobsApi~registerJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobRegisterResponse}
     */
    registerJob(jobRegisterRequest, opts, callback) {
      opts = opts || {};
      let postBody = jobRegisterRequest;
      // verify the required parameter 'jobRegisterRequest' is set
      if (jobRegisterRequest === undefined || jobRegisterRequest === null) {
        throw new Error("Missing the required parameter 'jobRegisterRequest' when calling registerJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'region': opts['region'],
        'namespace': opts['namespace'],
        'idempotency_token': opts['idempotencyToken']
      };
      let headerParams = {
        'X-Nomad-Token': opts['xNomadToken']
      };
      let formParams = {
      };

      let authNames = ['X-Nomad-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobRegisterResponse;
      return this.apiClient.callApi(
        '/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
