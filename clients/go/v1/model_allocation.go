/*
Nomad

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.4
Contact: support@hashicorp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Allocation struct for Allocation
type Allocation struct {
	AllocModifyIndex *int32 `json:"AllocModifyIndex,omitempty"`
	AllocatedResources NullableAllocatedResources `json:"AllocatedResources,omitempty"`
	ClientDescription *string `json:"ClientDescription,omitempty"`
	ClientStatus *string `json:"ClientStatus,omitempty"`
	CreateIndex *int32 `json:"CreateIndex,omitempty"`
	CreateTime *int64 `json:"CreateTime,omitempty"`
	DeploymentID *string `json:"DeploymentID,omitempty"`
	DeploymentStatus NullableAllocDeploymentStatus `json:"DeploymentStatus,omitempty"`
	DesiredDescription *string `json:"DesiredDescription,omitempty"`
	DesiredStatus *string `json:"DesiredStatus,omitempty"`
	DesiredTransition *DesiredTransition `json:"DesiredTransition,omitempty"`
	EvalID *string `json:"EvalID,omitempty"`
	FollowupEvalID *string `json:"FollowupEvalID,omitempty"`
	ID *string `json:"ID,omitempty"`
	Job NullableJob `json:"Job,omitempty"`
	JobID *string `json:"JobID,omitempty"`
	Metrics NullableAllocationMetric `json:"Metrics,omitempty"`
	ModifyIndex *int32 `json:"ModifyIndex,omitempty"`
	ModifyTime *int64 `json:"ModifyTime,omitempty"`
	Name *string `json:"Name,omitempty"`
	Namespace *string `json:"Namespace,omitempty"`
	NextAllocation *string `json:"NextAllocation,omitempty"`
	NodeID *string `json:"NodeID,omitempty"`
	NodeName *string `json:"NodeName,omitempty"`
	PreemptedAllocations []string `json:"PreemptedAllocations,omitempty"`
	PreemptedByAllocation *string `json:"PreemptedByAllocation,omitempty"`
	PreviousAllocation *string `json:"PreviousAllocation,omitempty"`
	RescheduleTracker NullableRescheduleTracker `json:"RescheduleTracker,omitempty"`
	Resources NullableResources `json:"Resources,omitempty"`
	Services *map[string]string `json:"Services,omitempty"`
	TaskGroup *string `json:"TaskGroup,omitempty"`
	TaskResources *map[string]Resources `json:"TaskResources,omitempty"`
	TaskStates *map[string]TaskState `json:"TaskStates,omitempty"`
}

// NewAllocation instantiates a new Allocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocation() *Allocation {
	this := Allocation{}
	return &this
}

// NewAllocationWithDefaults instantiates a new Allocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationWithDefaults() *Allocation {
	this := Allocation{}
	return &this
}

// GetAllocModifyIndex returns the AllocModifyIndex field value if set, zero value otherwise.
func (o *Allocation) GetAllocModifyIndex() int32 {
	if o == nil || o.AllocModifyIndex == nil {
		var ret int32
		return ret
	}
	return *o.AllocModifyIndex
}

// GetAllocModifyIndexOk returns a tuple with the AllocModifyIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetAllocModifyIndexOk() (*int32, bool) {
	if o == nil || o.AllocModifyIndex == nil {
		return nil, false
	}
	return o.AllocModifyIndex, true
}

// HasAllocModifyIndex returns a boolean if a field has been set.
func (o *Allocation) HasAllocModifyIndex() bool {
	if o != nil && o.AllocModifyIndex != nil {
		return true
	}

	return false
}

// SetAllocModifyIndex gets a reference to the given int32 and assigns it to the AllocModifyIndex field.
func (o *Allocation) SetAllocModifyIndex(v int32) {
	o.AllocModifyIndex = &v
}

// GetAllocatedResources returns the AllocatedResources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Allocation) GetAllocatedResources() AllocatedResources {
	if o == nil || o.AllocatedResources.Get() == nil {
		var ret AllocatedResources
		return ret
	}
	return *o.AllocatedResources.Get()
}

// GetAllocatedResourcesOk returns a tuple with the AllocatedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Allocation) GetAllocatedResourcesOk() (*AllocatedResources, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllocatedResources.Get(), o.AllocatedResources.IsSet()
}

// HasAllocatedResources returns a boolean if a field has been set.
func (o *Allocation) HasAllocatedResources() bool {
	if o != nil && o.AllocatedResources.IsSet() {
		return true
	}

	return false
}

// SetAllocatedResources gets a reference to the given NullableAllocatedResources and assigns it to the AllocatedResources field.
func (o *Allocation) SetAllocatedResources(v AllocatedResources) {
	o.AllocatedResources.Set(&v)
}
// SetAllocatedResourcesNil sets the value for AllocatedResources to be an explicit nil
func (o *Allocation) SetAllocatedResourcesNil() {
	o.AllocatedResources.Set(nil)
}

// UnsetAllocatedResources ensures that no value is present for AllocatedResources, not even an explicit nil
func (o *Allocation) UnsetAllocatedResources() {
	o.AllocatedResources.Unset()
}

// GetClientDescription returns the ClientDescription field value if set, zero value otherwise.
func (o *Allocation) GetClientDescription() string {
	if o == nil || o.ClientDescription == nil {
		var ret string
		return ret
	}
	return *o.ClientDescription
}

// GetClientDescriptionOk returns a tuple with the ClientDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetClientDescriptionOk() (*string, bool) {
	if o == nil || o.ClientDescription == nil {
		return nil, false
	}
	return o.ClientDescription, true
}

// HasClientDescription returns a boolean if a field has been set.
func (o *Allocation) HasClientDescription() bool {
	if o != nil && o.ClientDescription != nil {
		return true
	}

	return false
}

// SetClientDescription gets a reference to the given string and assigns it to the ClientDescription field.
func (o *Allocation) SetClientDescription(v string) {
	o.ClientDescription = &v
}

// GetClientStatus returns the ClientStatus field value if set, zero value otherwise.
func (o *Allocation) GetClientStatus() string {
	if o == nil || o.ClientStatus == nil {
		var ret string
		return ret
	}
	return *o.ClientStatus
}

// GetClientStatusOk returns a tuple with the ClientStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetClientStatusOk() (*string, bool) {
	if o == nil || o.ClientStatus == nil {
		return nil, false
	}
	return o.ClientStatus, true
}

// HasClientStatus returns a boolean if a field has been set.
func (o *Allocation) HasClientStatus() bool {
	if o != nil && o.ClientStatus != nil {
		return true
	}

	return false
}

// SetClientStatus gets a reference to the given string and assigns it to the ClientStatus field.
func (o *Allocation) SetClientStatus(v string) {
	o.ClientStatus = &v
}

// GetCreateIndex returns the CreateIndex field value if set, zero value otherwise.
func (o *Allocation) GetCreateIndex() int32 {
	if o == nil || o.CreateIndex == nil {
		var ret int32
		return ret
	}
	return *o.CreateIndex
}

// GetCreateIndexOk returns a tuple with the CreateIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetCreateIndexOk() (*int32, bool) {
	if o == nil || o.CreateIndex == nil {
		return nil, false
	}
	return o.CreateIndex, true
}

// HasCreateIndex returns a boolean if a field has been set.
func (o *Allocation) HasCreateIndex() bool {
	if o != nil && o.CreateIndex != nil {
		return true
	}

	return false
}

// SetCreateIndex gets a reference to the given int32 and assigns it to the CreateIndex field.
func (o *Allocation) SetCreateIndex(v int32) {
	o.CreateIndex = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Allocation) GetCreateTime() int64 {
	if o == nil || o.CreateTime == nil {
		var ret int64
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetCreateTimeOk() (*int64, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Allocation) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given int64 and assigns it to the CreateTime field.
func (o *Allocation) SetCreateTime(v int64) {
	o.CreateTime = &v
}

// GetDeploymentID returns the DeploymentID field value if set, zero value otherwise.
func (o *Allocation) GetDeploymentID() string {
	if o == nil || o.DeploymentID == nil {
		var ret string
		return ret
	}
	return *o.DeploymentID
}

// GetDeploymentIDOk returns a tuple with the DeploymentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetDeploymentIDOk() (*string, bool) {
	if o == nil || o.DeploymentID == nil {
		return nil, false
	}
	return o.DeploymentID, true
}

// HasDeploymentID returns a boolean if a field has been set.
func (o *Allocation) HasDeploymentID() bool {
	if o != nil && o.DeploymentID != nil {
		return true
	}

	return false
}

// SetDeploymentID gets a reference to the given string and assigns it to the DeploymentID field.
func (o *Allocation) SetDeploymentID(v string) {
	o.DeploymentID = &v
}

// GetDeploymentStatus returns the DeploymentStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Allocation) GetDeploymentStatus() AllocDeploymentStatus {
	if o == nil || o.DeploymentStatus.Get() == nil {
		var ret AllocDeploymentStatus
		return ret
	}
	return *o.DeploymentStatus.Get()
}

// GetDeploymentStatusOk returns a tuple with the DeploymentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Allocation) GetDeploymentStatusOk() (*AllocDeploymentStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeploymentStatus.Get(), o.DeploymentStatus.IsSet()
}

// HasDeploymentStatus returns a boolean if a field has been set.
func (o *Allocation) HasDeploymentStatus() bool {
	if o != nil && o.DeploymentStatus.IsSet() {
		return true
	}

	return false
}

// SetDeploymentStatus gets a reference to the given NullableAllocDeploymentStatus and assigns it to the DeploymentStatus field.
func (o *Allocation) SetDeploymentStatus(v AllocDeploymentStatus) {
	o.DeploymentStatus.Set(&v)
}
// SetDeploymentStatusNil sets the value for DeploymentStatus to be an explicit nil
func (o *Allocation) SetDeploymentStatusNil() {
	o.DeploymentStatus.Set(nil)
}

// UnsetDeploymentStatus ensures that no value is present for DeploymentStatus, not even an explicit nil
func (o *Allocation) UnsetDeploymentStatus() {
	o.DeploymentStatus.Unset()
}

// GetDesiredDescription returns the DesiredDescription field value if set, zero value otherwise.
func (o *Allocation) GetDesiredDescription() string {
	if o == nil || o.DesiredDescription == nil {
		var ret string
		return ret
	}
	return *o.DesiredDescription
}

// GetDesiredDescriptionOk returns a tuple with the DesiredDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetDesiredDescriptionOk() (*string, bool) {
	if o == nil || o.DesiredDescription == nil {
		return nil, false
	}
	return o.DesiredDescription, true
}

// HasDesiredDescription returns a boolean if a field has been set.
func (o *Allocation) HasDesiredDescription() bool {
	if o != nil && o.DesiredDescription != nil {
		return true
	}

	return false
}

// SetDesiredDescription gets a reference to the given string and assigns it to the DesiredDescription field.
func (o *Allocation) SetDesiredDescription(v string) {
	o.DesiredDescription = &v
}

// GetDesiredStatus returns the DesiredStatus field value if set, zero value otherwise.
func (o *Allocation) GetDesiredStatus() string {
	if o == nil || o.DesiredStatus == nil {
		var ret string
		return ret
	}
	return *o.DesiredStatus
}

// GetDesiredStatusOk returns a tuple with the DesiredStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetDesiredStatusOk() (*string, bool) {
	if o == nil || o.DesiredStatus == nil {
		return nil, false
	}
	return o.DesiredStatus, true
}

// HasDesiredStatus returns a boolean if a field has been set.
func (o *Allocation) HasDesiredStatus() bool {
	if o != nil && o.DesiredStatus != nil {
		return true
	}

	return false
}

// SetDesiredStatus gets a reference to the given string and assigns it to the DesiredStatus field.
func (o *Allocation) SetDesiredStatus(v string) {
	o.DesiredStatus = &v
}

// GetDesiredTransition returns the DesiredTransition field value if set, zero value otherwise.
func (o *Allocation) GetDesiredTransition() DesiredTransition {
	if o == nil || o.DesiredTransition == nil {
		var ret DesiredTransition
		return ret
	}
	return *o.DesiredTransition
}

// GetDesiredTransitionOk returns a tuple with the DesiredTransition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetDesiredTransitionOk() (*DesiredTransition, bool) {
	if o == nil || o.DesiredTransition == nil {
		return nil, false
	}
	return o.DesiredTransition, true
}

// HasDesiredTransition returns a boolean if a field has been set.
func (o *Allocation) HasDesiredTransition() bool {
	if o != nil && o.DesiredTransition != nil {
		return true
	}

	return false
}

// SetDesiredTransition gets a reference to the given DesiredTransition and assigns it to the DesiredTransition field.
func (o *Allocation) SetDesiredTransition(v DesiredTransition) {
	o.DesiredTransition = &v
}

// GetEvalID returns the EvalID field value if set, zero value otherwise.
func (o *Allocation) GetEvalID() string {
	if o == nil || o.EvalID == nil {
		var ret string
		return ret
	}
	return *o.EvalID
}

// GetEvalIDOk returns a tuple with the EvalID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetEvalIDOk() (*string, bool) {
	if o == nil || o.EvalID == nil {
		return nil, false
	}
	return o.EvalID, true
}

// HasEvalID returns a boolean if a field has been set.
func (o *Allocation) HasEvalID() bool {
	if o != nil && o.EvalID != nil {
		return true
	}

	return false
}

// SetEvalID gets a reference to the given string and assigns it to the EvalID field.
func (o *Allocation) SetEvalID(v string) {
	o.EvalID = &v
}

// GetFollowupEvalID returns the FollowupEvalID field value if set, zero value otherwise.
func (o *Allocation) GetFollowupEvalID() string {
	if o == nil || o.FollowupEvalID == nil {
		var ret string
		return ret
	}
	return *o.FollowupEvalID
}

// GetFollowupEvalIDOk returns a tuple with the FollowupEvalID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetFollowupEvalIDOk() (*string, bool) {
	if o == nil || o.FollowupEvalID == nil {
		return nil, false
	}
	return o.FollowupEvalID, true
}

// HasFollowupEvalID returns a boolean if a field has been set.
func (o *Allocation) HasFollowupEvalID() bool {
	if o != nil && o.FollowupEvalID != nil {
		return true
	}

	return false
}

// SetFollowupEvalID gets a reference to the given string and assigns it to the FollowupEvalID field.
func (o *Allocation) SetFollowupEvalID(v string) {
	o.FollowupEvalID = &v
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *Allocation) GetID() string {
	if o == nil || o.ID == nil {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetIDOk() (*string, bool) {
	if o == nil || o.ID == nil {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *Allocation) HasID() bool {
	if o != nil && o.ID != nil {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *Allocation) SetID(v string) {
	o.ID = &v
}

// GetJob returns the Job field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Allocation) GetJob() Job {
	if o == nil || o.Job.Get() == nil {
		var ret Job
		return ret
	}
	return *o.Job.Get()
}

// GetJobOk returns a tuple with the Job field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Allocation) GetJobOk() (*Job, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Job.Get(), o.Job.IsSet()
}

// HasJob returns a boolean if a field has been set.
func (o *Allocation) HasJob() bool {
	if o != nil && o.Job.IsSet() {
		return true
	}

	return false
}

// SetJob gets a reference to the given NullableJob and assigns it to the Job field.
func (o *Allocation) SetJob(v Job) {
	o.Job.Set(&v)
}
// SetJobNil sets the value for Job to be an explicit nil
func (o *Allocation) SetJobNil() {
	o.Job.Set(nil)
}

// UnsetJob ensures that no value is present for Job, not even an explicit nil
func (o *Allocation) UnsetJob() {
	o.Job.Unset()
}

// GetJobID returns the JobID field value if set, zero value otherwise.
func (o *Allocation) GetJobID() string {
	if o == nil || o.JobID == nil {
		var ret string
		return ret
	}
	return *o.JobID
}

// GetJobIDOk returns a tuple with the JobID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetJobIDOk() (*string, bool) {
	if o == nil || o.JobID == nil {
		return nil, false
	}
	return o.JobID, true
}

// HasJobID returns a boolean if a field has been set.
func (o *Allocation) HasJobID() bool {
	if o != nil && o.JobID != nil {
		return true
	}

	return false
}

// SetJobID gets a reference to the given string and assigns it to the JobID field.
func (o *Allocation) SetJobID(v string) {
	o.JobID = &v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Allocation) GetMetrics() AllocationMetric {
	if o == nil || o.Metrics.Get() == nil {
		var ret AllocationMetric
		return ret
	}
	return *o.Metrics.Get()
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Allocation) GetMetricsOk() (*AllocationMetric, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Metrics.Get(), o.Metrics.IsSet()
}

// HasMetrics returns a boolean if a field has been set.
func (o *Allocation) HasMetrics() bool {
	if o != nil && o.Metrics.IsSet() {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given NullableAllocationMetric and assigns it to the Metrics field.
func (o *Allocation) SetMetrics(v AllocationMetric) {
	o.Metrics.Set(&v)
}
// SetMetricsNil sets the value for Metrics to be an explicit nil
func (o *Allocation) SetMetricsNil() {
	o.Metrics.Set(nil)
}

// UnsetMetrics ensures that no value is present for Metrics, not even an explicit nil
func (o *Allocation) UnsetMetrics() {
	o.Metrics.Unset()
}

// GetModifyIndex returns the ModifyIndex field value if set, zero value otherwise.
func (o *Allocation) GetModifyIndex() int32 {
	if o == nil || o.ModifyIndex == nil {
		var ret int32
		return ret
	}
	return *o.ModifyIndex
}

// GetModifyIndexOk returns a tuple with the ModifyIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetModifyIndexOk() (*int32, bool) {
	if o == nil || o.ModifyIndex == nil {
		return nil, false
	}
	return o.ModifyIndex, true
}

// HasModifyIndex returns a boolean if a field has been set.
func (o *Allocation) HasModifyIndex() bool {
	if o != nil && o.ModifyIndex != nil {
		return true
	}

	return false
}

// SetModifyIndex gets a reference to the given int32 and assigns it to the ModifyIndex field.
func (o *Allocation) SetModifyIndex(v int32) {
	o.ModifyIndex = &v
}

// GetModifyTime returns the ModifyTime field value if set, zero value otherwise.
func (o *Allocation) GetModifyTime() int64 {
	if o == nil || o.ModifyTime == nil {
		var ret int64
		return ret
	}
	return *o.ModifyTime
}

// GetModifyTimeOk returns a tuple with the ModifyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetModifyTimeOk() (*int64, bool) {
	if o == nil || o.ModifyTime == nil {
		return nil, false
	}
	return o.ModifyTime, true
}

// HasModifyTime returns a boolean if a field has been set.
func (o *Allocation) HasModifyTime() bool {
	if o != nil && o.ModifyTime != nil {
		return true
	}

	return false
}

// SetModifyTime gets a reference to the given int64 and assigns it to the ModifyTime field.
func (o *Allocation) SetModifyTime(v int64) {
	o.ModifyTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Allocation) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Allocation) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Allocation) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Allocation) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Allocation) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *Allocation) SetNamespace(v string) {
	o.Namespace = &v
}

// GetNextAllocation returns the NextAllocation field value if set, zero value otherwise.
func (o *Allocation) GetNextAllocation() string {
	if o == nil || o.NextAllocation == nil {
		var ret string
		return ret
	}
	return *o.NextAllocation
}

// GetNextAllocationOk returns a tuple with the NextAllocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetNextAllocationOk() (*string, bool) {
	if o == nil || o.NextAllocation == nil {
		return nil, false
	}
	return o.NextAllocation, true
}

// HasNextAllocation returns a boolean if a field has been set.
func (o *Allocation) HasNextAllocation() bool {
	if o != nil && o.NextAllocation != nil {
		return true
	}

	return false
}

// SetNextAllocation gets a reference to the given string and assigns it to the NextAllocation field.
func (o *Allocation) SetNextAllocation(v string) {
	o.NextAllocation = &v
}

// GetNodeID returns the NodeID field value if set, zero value otherwise.
func (o *Allocation) GetNodeID() string {
	if o == nil || o.NodeID == nil {
		var ret string
		return ret
	}
	return *o.NodeID
}

// GetNodeIDOk returns a tuple with the NodeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetNodeIDOk() (*string, bool) {
	if o == nil || o.NodeID == nil {
		return nil, false
	}
	return o.NodeID, true
}

// HasNodeID returns a boolean if a field has been set.
func (o *Allocation) HasNodeID() bool {
	if o != nil && o.NodeID != nil {
		return true
	}

	return false
}

// SetNodeID gets a reference to the given string and assigns it to the NodeID field.
func (o *Allocation) SetNodeID(v string) {
	o.NodeID = &v
}

// GetNodeName returns the NodeName field value if set, zero value otherwise.
func (o *Allocation) GetNodeName() string {
	if o == nil || o.NodeName == nil {
		var ret string
		return ret
	}
	return *o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetNodeNameOk() (*string, bool) {
	if o == nil || o.NodeName == nil {
		return nil, false
	}
	return o.NodeName, true
}

// HasNodeName returns a boolean if a field has been set.
func (o *Allocation) HasNodeName() bool {
	if o != nil && o.NodeName != nil {
		return true
	}

	return false
}

// SetNodeName gets a reference to the given string and assigns it to the NodeName field.
func (o *Allocation) SetNodeName(v string) {
	o.NodeName = &v
}

// GetPreemptedAllocations returns the PreemptedAllocations field value if set, zero value otherwise.
func (o *Allocation) GetPreemptedAllocations() []string {
	if o == nil || o.PreemptedAllocations == nil {
		var ret []string
		return ret
	}
	return o.PreemptedAllocations
}

// GetPreemptedAllocationsOk returns a tuple with the PreemptedAllocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetPreemptedAllocationsOk() ([]string, bool) {
	if o == nil || o.PreemptedAllocations == nil {
		return nil, false
	}
	return o.PreemptedAllocations, true
}

// HasPreemptedAllocations returns a boolean if a field has been set.
func (o *Allocation) HasPreemptedAllocations() bool {
	if o != nil && o.PreemptedAllocations != nil {
		return true
	}

	return false
}

// SetPreemptedAllocations gets a reference to the given []string and assigns it to the PreemptedAllocations field.
func (o *Allocation) SetPreemptedAllocations(v []string) {
	o.PreemptedAllocations = v
}

// GetPreemptedByAllocation returns the PreemptedByAllocation field value if set, zero value otherwise.
func (o *Allocation) GetPreemptedByAllocation() string {
	if o == nil || o.PreemptedByAllocation == nil {
		var ret string
		return ret
	}
	return *o.PreemptedByAllocation
}

// GetPreemptedByAllocationOk returns a tuple with the PreemptedByAllocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetPreemptedByAllocationOk() (*string, bool) {
	if o == nil || o.PreemptedByAllocation == nil {
		return nil, false
	}
	return o.PreemptedByAllocation, true
}

// HasPreemptedByAllocation returns a boolean if a field has been set.
func (o *Allocation) HasPreemptedByAllocation() bool {
	if o != nil && o.PreemptedByAllocation != nil {
		return true
	}

	return false
}

// SetPreemptedByAllocation gets a reference to the given string and assigns it to the PreemptedByAllocation field.
func (o *Allocation) SetPreemptedByAllocation(v string) {
	o.PreemptedByAllocation = &v
}

// GetPreviousAllocation returns the PreviousAllocation field value if set, zero value otherwise.
func (o *Allocation) GetPreviousAllocation() string {
	if o == nil || o.PreviousAllocation == nil {
		var ret string
		return ret
	}
	return *o.PreviousAllocation
}

// GetPreviousAllocationOk returns a tuple with the PreviousAllocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetPreviousAllocationOk() (*string, bool) {
	if o == nil || o.PreviousAllocation == nil {
		return nil, false
	}
	return o.PreviousAllocation, true
}

// HasPreviousAllocation returns a boolean if a field has been set.
func (o *Allocation) HasPreviousAllocation() bool {
	if o != nil && o.PreviousAllocation != nil {
		return true
	}

	return false
}

// SetPreviousAllocation gets a reference to the given string and assigns it to the PreviousAllocation field.
func (o *Allocation) SetPreviousAllocation(v string) {
	o.PreviousAllocation = &v
}

// GetRescheduleTracker returns the RescheduleTracker field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Allocation) GetRescheduleTracker() RescheduleTracker {
	if o == nil || o.RescheduleTracker.Get() == nil {
		var ret RescheduleTracker
		return ret
	}
	return *o.RescheduleTracker.Get()
}

// GetRescheduleTrackerOk returns a tuple with the RescheduleTracker field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Allocation) GetRescheduleTrackerOk() (*RescheduleTracker, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RescheduleTracker.Get(), o.RescheduleTracker.IsSet()
}

// HasRescheduleTracker returns a boolean if a field has been set.
func (o *Allocation) HasRescheduleTracker() bool {
	if o != nil && o.RescheduleTracker.IsSet() {
		return true
	}

	return false
}

// SetRescheduleTracker gets a reference to the given NullableRescheduleTracker and assigns it to the RescheduleTracker field.
func (o *Allocation) SetRescheduleTracker(v RescheduleTracker) {
	o.RescheduleTracker.Set(&v)
}
// SetRescheduleTrackerNil sets the value for RescheduleTracker to be an explicit nil
func (o *Allocation) SetRescheduleTrackerNil() {
	o.RescheduleTracker.Set(nil)
}

// UnsetRescheduleTracker ensures that no value is present for RescheduleTracker, not even an explicit nil
func (o *Allocation) UnsetRescheduleTracker() {
	o.RescheduleTracker.Unset()
}

// GetResources returns the Resources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Allocation) GetResources() Resources {
	if o == nil || o.Resources.Get() == nil {
		var ret Resources
		return ret
	}
	return *o.Resources.Get()
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Allocation) GetResourcesOk() (*Resources, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Resources.Get(), o.Resources.IsSet()
}

// HasResources returns a boolean if a field has been set.
func (o *Allocation) HasResources() bool {
	if o != nil && o.Resources.IsSet() {
		return true
	}

	return false
}

// SetResources gets a reference to the given NullableResources and assigns it to the Resources field.
func (o *Allocation) SetResources(v Resources) {
	o.Resources.Set(&v)
}
// SetResourcesNil sets the value for Resources to be an explicit nil
func (o *Allocation) SetResourcesNil() {
	o.Resources.Set(nil)
}

// UnsetResources ensures that no value is present for Resources, not even an explicit nil
func (o *Allocation) UnsetResources() {
	o.Resources.Unset()
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *Allocation) GetServices() map[string]string {
	if o == nil || o.Services == nil {
		var ret map[string]string
		return ret
	}
	return *o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetServicesOk() (*map[string]string, bool) {
	if o == nil || o.Services == nil {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *Allocation) HasServices() bool {
	if o != nil && o.Services != nil {
		return true
	}

	return false
}

// SetServices gets a reference to the given map[string]string and assigns it to the Services field.
func (o *Allocation) SetServices(v map[string]string) {
	o.Services = &v
}

// GetTaskGroup returns the TaskGroup field value if set, zero value otherwise.
func (o *Allocation) GetTaskGroup() string {
	if o == nil || o.TaskGroup == nil {
		var ret string
		return ret
	}
	return *o.TaskGroup
}

// GetTaskGroupOk returns a tuple with the TaskGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetTaskGroupOk() (*string, bool) {
	if o == nil || o.TaskGroup == nil {
		return nil, false
	}
	return o.TaskGroup, true
}

// HasTaskGroup returns a boolean if a field has been set.
func (o *Allocation) HasTaskGroup() bool {
	if o != nil && o.TaskGroup != nil {
		return true
	}

	return false
}

// SetTaskGroup gets a reference to the given string and assigns it to the TaskGroup field.
func (o *Allocation) SetTaskGroup(v string) {
	o.TaskGroup = &v
}

// GetTaskResources returns the TaskResources field value if set, zero value otherwise.
func (o *Allocation) GetTaskResources() map[string]Resources {
	if o == nil || o.TaskResources == nil {
		var ret map[string]Resources
		return ret
	}
	return *o.TaskResources
}

// GetTaskResourcesOk returns a tuple with the TaskResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetTaskResourcesOk() (*map[string]Resources, bool) {
	if o == nil || o.TaskResources == nil {
		return nil, false
	}
	return o.TaskResources, true
}

// HasTaskResources returns a boolean if a field has been set.
func (o *Allocation) HasTaskResources() bool {
	if o != nil && o.TaskResources != nil {
		return true
	}

	return false
}

// SetTaskResources gets a reference to the given map[string]Resources and assigns it to the TaskResources field.
func (o *Allocation) SetTaskResources(v map[string]Resources) {
	o.TaskResources = &v
}

// GetTaskStates returns the TaskStates field value if set, zero value otherwise.
func (o *Allocation) GetTaskStates() map[string]TaskState {
	if o == nil || o.TaskStates == nil {
		var ret map[string]TaskState
		return ret
	}
	return *o.TaskStates
}

// GetTaskStatesOk returns a tuple with the TaskStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetTaskStatesOk() (*map[string]TaskState, bool) {
	if o == nil || o.TaskStates == nil {
		return nil, false
	}
	return o.TaskStates, true
}

// HasTaskStates returns a boolean if a field has been set.
func (o *Allocation) HasTaskStates() bool {
	if o != nil && o.TaskStates != nil {
		return true
	}

	return false
}

// SetTaskStates gets a reference to the given map[string]TaskState and assigns it to the TaskStates field.
func (o *Allocation) SetTaskStates(v map[string]TaskState) {
	o.TaskStates = &v
}

func (o Allocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllocModifyIndex != nil {
		toSerialize["AllocModifyIndex"] = o.AllocModifyIndex
	}
	if o.AllocatedResources.IsSet() {
		toSerialize["AllocatedResources"] = o.AllocatedResources.Get()
	}
	if o.ClientDescription != nil {
		toSerialize["ClientDescription"] = o.ClientDescription
	}
	if o.ClientStatus != nil {
		toSerialize["ClientStatus"] = o.ClientStatus
	}
	if o.CreateIndex != nil {
		toSerialize["CreateIndex"] = o.CreateIndex
	}
	if o.CreateTime != nil {
		toSerialize["CreateTime"] = o.CreateTime
	}
	if o.DeploymentID != nil {
		toSerialize["DeploymentID"] = o.DeploymentID
	}
	if o.DeploymentStatus.IsSet() {
		toSerialize["DeploymentStatus"] = o.DeploymentStatus.Get()
	}
	if o.DesiredDescription != nil {
		toSerialize["DesiredDescription"] = o.DesiredDescription
	}
	if o.DesiredStatus != nil {
		toSerialize["DesiredStatus"] = o.DesiredStatus
	}
	if o.DesiredTransition != nil {
		toSerialize["DesiredTransition"] = o.DesiredTransition
	}
	if o.EvalID != nil {
		toSerialize["EvalID"] = o.EvalID
	}
	if o.FollowupEvalID != nil {
		toSerialize["FollowupEvalID"] = o.FollowupEvalID
	}
	if o.ID != nil {
		toSerialize["ID"] = o.ID
	}
	if o.Job.IsSet() {
		toSerialize["Job"] = o.Job.Get()
	}
	if o.JobID != nil {
		toSerialize["JobID"] = o.JobID
	}
	if o.Metrics.IsSet() {
		toSerialize["Metrics"] = o.Metrics.Get()
	}
	if o.ModifyIndex != nil {
		toSerialize["ModifyIndex"] = o.ModifyIndex
	}
	if o.ModifyTime != nil {
		toSerialize["ModifyTime"] = o.ModifyTime
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["Namespace"] = o.Namespace
	}
	if o.NextAllocation != nil {
		toSerialize["NextAllocation"] = o.NextAllocation
	}
	if o.NodeID != nil {
		toSerialize["NodeID"] = o.NodeID
	}
	if o.NodeName != nil {
		toSerialize["NodeName"] = o.NodeName
	}
	if o.PreemptedAllocations != nil {
		toSerialize["PreemptedAllocations"] = o.PreemptedAllocations
	}
	if o.PreemptedByAllocation != nil {
		toSerialize["PreemptedByAllocation"] = o.PreemptedByAllocation
	}
	if o.PreviousAllocation != nil {
		toSerialize["PreviousAllocation"] = o.PreviousAllocation
	}
	if o.RescheduleTracker.IsSet() {
		toSerialize["RescheduleTracker"] = o.RescheduleTracker.Get()
	}
	if o.Resources.IsSet() {
		toSerialize["Resources"] = o.Resources.Get()
	}
	if o.Services != nil {
		toSerialize["Services"] = o.Services
	}
	if o.TaskGroup != nil {
		toSerialize["TaskGroup"] = o.TaskGroup
	}
	if o.TaskResources != nil {
		toSerialize["TaskResources"] = o.TaskResources
	}
	if o.TaskStates != nil {
		toSerialize["TaskStates"] = o.TaskStates
	}
	return json.Marshal(toSerialize)
}

type NullableAllocation struct {
	value *Allocation
	isSet bool
}

func (v NullableAllocation) Get() *Allocation {
	return v.value
}

func (v *NullableAllocation) Set(val *Allocation) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocation) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocation(val *Allocation) *NullableAllocation {
	return &NullableAllocation{value: val, isSet: true}
}

func (v NullableAllocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


