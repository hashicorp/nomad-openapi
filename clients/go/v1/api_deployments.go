/*
Nomad

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.4
Contact: support@hashicorp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

// DeploymentsApiService DeploymentsApi service
type DeploymentsApiService service

type ApiGetDeploymentRequest struct {
	ctx context.Context
	ApiService *DeploymentsApiService
	deploymentID string
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

// Filters results based on the specified region.
func (r ApiGetDeploymentRequest) Region(region string) ApiGetDeploymentRequest {
	r.region = &region
	return r
}
// Filters results based on the specified namespace.
func (r ApiGetDeploymentRequest) Namespace(namespace string) ApiGetDeploymentRequest {
	r.namespace = &namespace
	return r
}
// If set, wait until query exceeds given index. Must be provided with WaitParam.
func (r ApiGetDeploymentRequest) Index(index int32) ApiGetDeploymentRequest {
	r.index = &index
	return r
}
// Provided with IndexParam to wait for change.
func (r ApiGetDeploymentRequest) Wait(wait string) ApiGetDeploymentRequest {
	r.wait = &wait
	return r
}
// If present, results will include stale reads.
func (r ApiGetDeploymentRequest) Stale(stale string) ApiGetDeploymentRequest {
	r.stale = &stale
	return r
}
// Constrains results to jobs that start with the defined prefix
func (r ApiGetDeploymentRequest) Prefix(prefix string) ApiGetDeploymentRequest {
	r.prefix = &prefix
	return r
}
// A Nomad ACL token.
func (r ApiGetDeploymentRequest) XNomadToken(xNomadToken string) ApiGetDeploymentRequest {
	r.xNomadToken = &xNomadToken
	return r
}
// Maximum number of results to return.
func (r ApiGetDeploymentRequest) PerPage(perPage int32) ApiGetDeploymentRequest {
	r.perPage = &perPage
	return r
}
// Indicates where to start paging for queries that support pagination.
func (r ApiGetDeploymentRequest) NextToken(nextToken string) ApiGetDeploymentRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiGetDeploymentRequest) Execute() (*Deployment, *http.Response, error) {
	return r.ApiService.GetDeploymentExecute(r)
}

/*
GetDeployment Method for GetDeployment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deploymentID Deployment ID.
 @return ApiGetDeploymentRequest
*/
func (a *DeploymentsApiService) GetDeployment(ctx context.Context, deploymentID string) ApiGetDeploymentRequest {
	return ApiGetDeploymentRequest{
		ApiService: a,
		ctx: ctx,
		deploymentID: deploymentID,
	}
}

// Execute executes the request
//  @return Deployment
func (a *DeploymentsApiService) GetDeploymentExecute(r ApiGetDeploymentRequest) (*Deployment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Deployment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentsApiService.GetDeployment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/{deploymentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentID"+"}", url.PathEscape(parameterToString(r.deploymentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeploymentAllocationsRequest struct {
	ctx context.Context
	ApiService *DeploymentsApiService
	deploymentID string
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

// Filters results based on the specified region.
func (r ApiGetDeploymentAllocationsRequest) Region(region string) ApiGetDeploymentAllocationsRequest {
	r.region = &region
	return r
}
// Filters results based on the specified namespace.
func (r ApiGetDeploymentAllocationsRequest) Namespace(namespace string) ApiGetDeploymentAllocationsRequest {
	r.namespace = &namespace
	return r
}
// If set, wait until query exceeds given index. Must be provided with WaitParam.
func (r ApiGetDeploymentAllocationsRequest) Index(index int32) ApiGetDeploymentAllocationsRequest {
	r.index = &index
	return r
}
// Provided with IndexParam to wait for change.
func (r ApiGetDeploymentAllocationsRequest) Wait(wait string) ApiGetDeploymentAllocationsRequest {
	r.wait = &wait
	return r
}
// If present, results will include stale reads.
func (r ApiGetDeploymentAllocationsRequest) Stale(stale string) ApiGetDeploymentAllocationsRequest {
	r.stale = &stale
	return r
}
// Constrains results to jobs that start with the defined prefix
func (r ApiGetDeploymentAllocationsRequest) Prefix(prefix string) ApiGetDeploymentAllocationsRequest {
	r.prefix = &prefix
	return r
}
// A Nomad ACL token.
func (r ApiGetDeploymentAllocationsRequest) XNomadToken(xNomadToken string) ApiGetDeploymentAllocationsRequest {
	r.xNomadToken = &xNomadToken
	return r
}
// Maximum number of results to return.
func (r ApiGetDeploymentAllocationsRequest) PerPage(perPage int32) ApiGetDeploymentAllocationsRequest {
	r.perPage = &perPage
	return r
}
// Indicates where to start paging for queries that support pagination.
func (r ApiGetDeploymentAllocationsRequest) NextToken(nextToken string) ApiGetDeploymentAllocationsRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiGetDeploymentAllocationsRequest) Execute() ([]AllocationListStub, *http.Response, error) {
	return r.ApiService.GetDeploymentAllocationsExecute(r)
}

/*
GetDeploymentAllocations Method for GetDeploymentAllocations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deploymentID Deployment ID.
 @return ApiGetDeploymentAllocationsRequest
*/
func (a *DeploymentsApiService) GetDeploymentAllocations(ctx context.Context, deploymentID string) ApiGetDeploymentAllocationsRequest {
	return ApiGetDeploymentAllocationsRequest{
		ApiService: a,
		ctx: ctx,
		deploymentID: deploymentID,
	}
}

// Execute executes the request
//  @return []AllocationListStub
func (a *DeploymentsApiService) GetDeploymentAllocationsExecute(r ApiGetDeploymentAllocationsRequest) ([]AllocationListStub, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AllocationListStub
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentsApiService.GetDeploymentAllocations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/allocations/{deploymentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentID"+"}", url.PathEscape(parameterToString(r.deploymentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeploymentsRequest struct {
	ctx context.Context
	ApiService *DeploymentsApiService
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

// Filters results based on the specified region.
func (r ApiGetDeploymentsRequest) Region(region string) ApiGetDeploymentsRequest {
	r.region = &region
	return r
}
// Filters results based on the specified namespace.
func (r ApiGetDeploymentsRequest) Namespace(namespace string) ApiGetDeploymentsRequest {
	r.namespace = &namespace
	return r
}
// If set, wait until query exceeds given index. Must be provided with WaitParam.
func (r ApiGetDeploymentsRequest) Index(index int32) ApiGetDeploymentsRequest {
	r.index = &index
	return r
}
// Provided with IndexParam to wait for change.
func (r ApiGetDeploymentsRequest) Wait(wait string) ApiGetDeploymentsRequest {
	r.wait = &wait
	return r
}
// If present, results will include stale reads.
func (r ApiGetDeploymentsRequest) Stale(stale string) ApiGetDeploymentsRequest {
	r.stale = &stale
	return r
}
// Constrains results to jobs that start with the defined prefix
func (r ApiGetDeploymentsRequest) Prefix(prefix string) ApiGetDeploymentsRequest {
	r.prefix = &prefix
	return r
}
// A Nomad ACL token.
func (r ApiGetDeploymentsRequest) XNomadToken(xNomadToken string) ApiGetDeploymentsRequest {
	r.xNomadToken = &xNomadToken
	return r
}
// Maximum number of results to return.
func (r ApiGetDeploymentsRequest) PerPage(perPage int32) ApiGetDeploymentsRequest {
	r.perPage = &perPage
	return r
}
// Indicates where to start paging for queries that support pagination.
func (r ApiGetDeploymentsRequest) NextToken(nextToken string) ApiGetDeploymentsRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiGetDeploymentsRequest) Execute() ([]Deployment, *http.Response, error) {
	return r.ApiService.GetDeploymentsExecute(r)
}

/*
GetDeployments Method for GetDeployments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDeploymentsRequest
*/
func (a *DeploymentsApiService) GetDeployments(ctx context.Context) ApiGetDeploymentsRequest {
	return ApiGetDeploymentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Deployment
func (a *DeploymentsApiService) GetDeploymentsExecute(r ApiGetDeploymentsRequest) ([]Deployment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Deployment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentsApiService.GetDeployments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostDeploymentAllocationHealthRequest struct {
	ctx context.Context
	ApiService *DeploymentsApiService
	deploymentID string
	deploymentAllocHealthRequest *DeploymentAllocHealthRequest
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiPostDeploymentAllocationHealthRequest) DeploymentAllocHealthRequest(deploymentAllocHealthRequest DeploymentAllocHealthRequest) ApiPostDeploymentAllocationHealthRequest {
	r.deploymentAllocHealthRequest = &deploymentAllocHealthRequest
	return r
}
// Filters results based on the specified region.
func (r ApiPostDeploymentAllocationHealthRequest) Region(region string) ApiPostDeploymentAllocationHealthRequest {
	r.region = &region
	return r
}
// Filters results based on the specified namespace.
func (r ApiPostDeploymentAllocationHealthRequest) Namespace(namespace string) ApiPostDeploymentAllocationHealthRequest {
	r.namespace = &namespace
	return r
}
// A Nomad ACL token.
func (r ApiPostDeploymentAllocationHealthRequest) XNomadToken(xNomadToken string) ApiPostDeploymentAllocationHealthRequest {
	r.xNomadToken = &xNomadToken
	return r
}
// Can be used to ensure operations are only run once.
func (r ApiPostDeploymentAllocationHealthRequest) IdempotencyToken(idempotencyToken string) ApiPostDeploymentAllocationHealthRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiPostDeploymentAllocationHealthRequest) Execute() (*DeploymentUpdateResponse, *http.Response, error) {
	return r.ApiService.PostDeploymentAllocationHealthExecute(r)
}

/*
PostDeploymentAllocationHealth Method for PostDeploymentAllocationHealth

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deploymentID Deployment ID.
 @return ApiPostDeploymentAllocationHealthRequest
*/
func (a *DeploymentsApiService) PostDeploymentAllocationHealth(ctx context.Context, deploymentID string) ApiPostDeploymentAllocationHealthRequest {
	return ApiPostDeploymentAllocationHealthRequest{
		ApiService: a,
		ctx: ctx,
		deploymentID: deploymentID,
	}
}

// Execute executes the request
//  @return DeploymentUpdateResponse
func (a *DeploymentsApiService) PostDeploymentAllocationHealthExecute(r ApiPostDeploymentAllocationHealthRequest) (*DeploymentUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeploymentUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentsApiService.PostDeploymentAllocationHealth")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/allocation-health/{deploymentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentID"+"}", url.PathEscape(parameterToString(r.deploymentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deploymentAllocHealthRequest == nil {
		return localVarReturnValue, nil, reportError("deploymentAllocHealthRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.deploymentAllocHealthRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostDeploymentFailRequest struct {
	ctx context.Context
	ApiService *DeploymentsApiService
	deploymentID string
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

// Filters results based on the specified region.
func (r ApiPostDeploymentFailRequest) Region(region string) ApiPostDeploymentFailRequest {
	r.region = &region
	return r
}
// Filters results based on the specified namespace.
func (r ApiPostDeploymentFailRequest) Namespace(namespace string) ApiPostDeploymentFailRequest {
	r.namespace = &namespace
	return r
}
// A Nomad ACL token.
func (r ApiPostDeploymentFailRequest) XNomadToken(xNomadToken string) ApiPostDeploymentFailRequest {
	r.xNomadToken = &xNomadToken
	return r
}
// Can be used to ensure operations are only run once.
func (r ApiPostDeploymentFailRequest) IdempotencyToken(idempotencyToken string) ApiPostDeploymentFailRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiPostDeploymentFailRequest) Execute() (*DeploymentUpdateResponse, *http.Response, error) {
	return r.ApiService.PostDeploymentFailExecute(r)
}

/*
PostDeploymentFail Method for PostDeploymentFail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deploymentID Deployment ID.
 @return ApiPostDeploymentFailRequest
*/
func (a *DeploymentsApiService) PostDeploymentFail(ctx context.Context, deploymentID string) ApiPostDeploymentFailRequest {
	return ApiPostDeploymentFailRequest{
		ApiService: a,
		ctx: ctx,
		deploymentID: deploymentID,
	}
}

// Execute executes the request
//  @return DeploymentUpdateResponse
func (a *DeploymentsApiService) PostDeploymentFailExecute(r ApiPostDeploymentFailRequest) (*DeploymentUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeploymentUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentsApiService.PostDeploymentFail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/fail/{deploymentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentID"+"}", url.PathEscape(parameterToString(r.deploymentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostDeploymentPauseRequest struct {
	ctx context.Context
	ApiService *DeploymentsApiService
	deploymentID string
	deploymentPauseRequest *DeploymentPauseRequest
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiPostDeploymentPauseRequest) DeploymentPauseRequest(deploymentPauseRequest DeploymentPauseRequest) ApiPostDeploymentPauseRequest {
	r.deploymentPauseRequest = &deploymentPauseRequest
	return r
}
// Filters results based on the specified region.
func (r ApiPostDeploymentPauseRequest) Region(region string) ApiPostDeploymentPauseRequest {
	r.region = &region
	return r
}
// Filters results based on the specified namespace.
func (r ApiPostDeploymentPauseRequest) Namespace(namespace string) ApiPostDeploymentPauseRequest {
	r.namespace = &namespace
	return r
}
// A Nomad ACL token.
func (r ApiPostDeploymentPauseRequest) XNomadToken(xNomadToken string) ApiPostDeploymentPauseRequest {
	r.xNomadToken = &xNomadToken
	return r
}
// Can be used to ensure operations are only run once.
func (r ApiPostDeploymentPauseRequest) IdempotencyToken(idempotencyToken string) ApiPostDeploymentPauseRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiPostDeploymentPauseRequest) Execute() (*DeploymentUpdateResponse, *http.Response, error) {
	return r.ApiService.PostDeploymentPauseExecute(r)
}

/*
PostDeploymentPause Method for PostDeploymentPause

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deploymentID Deployment ID.
 @return ApiPostDeploymentPauseRequest
*/
func (a *DeploymentsApiService) PostDeploymentPause(ctx context.Context, deploymentID string) ApiPostDeploymentPauseRequest {
	return ApiPostDeploymentPauseRequest{
		ApiService: a,
		ctx: ctx,
		deploymentID: deploymentID,
	}
}

// Execute executes the request
//  @return DeploymentUpdateResponse
func (a *DeploymentsApiService) PostDeploymentPauseExecute(r ApiPostDeploymentPauseRequest) (*DeploymentUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeploymentUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentsApiService.PostDeploymentPause")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/pause/{deploymentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentID"+"}", url.PathEscape(parameterToString(r.deploymentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deploymentPauseRequest == nil {
		return localVarReturnValue, nil, reportError("deploymentPauseRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.deploymentPauseRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostDeploymentPromoteRequest struct {
	ctx context.Context
	ApiService *DeploymentsApiService
	deploymentID string
	deploymentPromoteRequest *DeploymentPromoteRequest
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiPostDeploymentPromoteRequest) DeploymentPromoteRequest(deploymentPromoteRequest DeploymentPromoteRequest) ApiPostDeploymentPromoteRequest {
	r.deploymentPromoteRequest = &deploymentPromoteRequest
	return r
}
// Filters results based on the specified region.
func (r ApiPostDeploymentPromoteRequest) Region(region string) ApiPostDeploymentPromoteRequest {
	r.region = &region
	return r
}
// Filters results based on the specified namespace.
func (r ApiPostDeploymentPromoteRequest) Namespace(namespace string) ApiPostDeploymentPromoteRequest {
	r.namespace = &namespace
	return r
}
// A Nomad ACL token.
func (r ApiPostDeploymentPromoteRequest) XNomadToken(xNomadToken string) ApiPostDeploymentPromoteRequest {
	r.xNomadToken = &xNomadToken
	return r
}
// Can be used to ensure operations are only run once.
func (r ApiPostDeploymentPromoteRequest) IdempotencyToken(idempotencyToken string) ApiPostDeploymentPromoteRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiPostDeploymentPromoteRequest) Execute() (*DeploymentUpdateResponse, *http.Response, error) {
	return r.ApiService.PostDeploymentPromoteExecute(r)
}

/*
PostDeploymentPromote Method for PostDeploymentPromote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deploymentID Deployment ID.
 @return ApiPostDeploymentPromoteRequest
*/
func (a *DeploymentsApiService) PostDeploymentPromote(ctx context.Context, deploymentID string) ApiPostDeploymentPromoteRequest {
	return ApiPostDeploymentPromoteRequest{
		ApiService: a,
		ctx: ctx,
		deploymentID: deploymentID,
	}
}

// Execute executes the request
//  @return DeploymentUpdateResponse
func (a *DeploymentsApiService) PostDeploymentPromoteExecute(r ApiPostDeploymentPromoteRequest) (*DeploymentUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeploymentUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentsApiService.PostDeploymentPromote")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/promote/{deploymentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentID"+"}", url.PathEscape(parameterToString(r.deploymentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deploymentPromoteRequest == nil {
		return localVarReturnValue, nil, reportError("deploymentPromoteRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.deploymentPromoteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostDeploymentUnblockRequest struct {
	ctx context.Context
	ApiService *DeploymentsApiService
	deploymentID string
	deploymentUnblockRequest *DeploymentUnblockRequest
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiPostDeploymentUnblockRequest) DeploymentUnblockRequest(deploymentUnblockRequest DeploymentUnblockRequest) ApiPostDeploymentUnblockRequest {
	r.deploymentUnblockRequest = &deploymentUnblockRequest
	return r
}
// Filters results based on the specified region.
func (r ApiPostDeploymentUnblockRequest) Region(region string) ApiPostDeploymentUnblockRequest {
	r.region = &region
	return r
}
// Filters results based on the specified namespace.
func (r ApiPostDeploymentUnblockRequest) Namespace(namespace string) ApiPostDeploymentUnblockRequest {
	r.namespace = &namespace
	return r
}
// A Nomad ACL token.
func (r ApiPostDeploymentUnblockRequest) XNomadToken(xNomadToken string) ApiPostDeploymentUnblockRequest {
	r.xNomadToken = &xNomadToken
	return r
}
// Can be used to ensure operations are only run once.
func (r ApiPostDeploymentUnblockRequest) IdempotencyToken(idempotencyToken string) ApiPostDeploymentUnblockRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiPostDeploymentUnblockRequest) Execute() (*DeploymentUpdateResponse, *http.Response, error) {
	return r.ApiService.PostDeploymentUnblockExecute(r)
}

/*
PostDeploymentUnblock Method for PostDeploymentUnblock

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deploymentID Deployment ID.
 @return ApiPostDeploymentUnblockRequest
*/
func (a *DeploymentsApiService) PostDeploymentUnblock(ctx context.Context, deploymentID string) ApiPostDeploymentUnblockRequest {
	return ApiPostDeploymentUnblockRequest{
		ApiService: a,
		ctx: ctx,
		deploymentID: deploymentID,
	}
}

// Execute executes the request
//  @return DeploymentUpdateResponse
func (a *DeploymentsApiService) PostDeploymentUnblockExecute(r ApiPostDeploymentUnblockRequest) (*DeploymentUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeploymentUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentsApiService.PostDeploymentUnblock")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/unblock/{deploymentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentID"+"}", url.PathEscape(parameterToString(r.deploymentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deploymentUnblockRequest == nil {
		return localVarReturnValue, nil, reportError("deploymentUnblockRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.deploymentUnblockRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
