/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// PointValue struct for PointValue
type PointValue struct {
	Name *string `json:"Name,omitempty"`
	Points *[]float32 `json:"Points,omitempty"`
}

// NewPointValue instantiates a new PointValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPointValue() *PointValue {
	this := PointValue{}
	return &this
}

// NewPointValueWithDefaults instantiates a new PointValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPointValueWithDefaults() *PointValue {
	this := PointValue{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PointValue) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointValue) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PointValue) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PointValue) SetName(v string) {
	o.Name = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *PointValue) GetPoints() []float32 {
	if o == nil || o.Points == nil {
		var ret []float32
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointValue) GetPointsOk() (*[]float32, bool) {
	if o == nil || o.Points == nil {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *PointValue) HasPoints() bool {
	if o != nil && o.Points != nil {
		return true
	}

	return false
}

// SetPoints gets a reference to the given []float32 and assigns it to the Points field.
func (o *PointValue) SetPoints(v []float32) {
	o.Points = &v
}

func (o PointValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Points != nil {
		toSerialize["Points"] = o.Points
	}
	return json.Marshal(toSerialize)
}

type NullablePointValue struct {
	value *PointValue
	isSet bool
}

func (v NullablePointValue) Get() *PointValue {
	return v.value
}

func (v *NullablePointValue) Set(val *PointValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePointValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePointValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePointValue(val *PointValue) *NullablePointValue {
	return &NullablePointValue{value: val, isSet: true}
}

func (v NullablePointValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePointValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


