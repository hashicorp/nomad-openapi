/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// NodesApiService NodesApi service
type NodesApiService service

type ApiGetNodeRequest struct {
	ctx _context.Context
	ApiService *NodesApiService
	nodeId string
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiGetNodeRequest) Region(region string) ApiGetNodeRequest {
	r.region = &region
	return r
}
func (r ApiGetNodeRequest) Namespace(namespace string) ApiGetNodeRequest {
	r.namespace = &namespace
	return r
}
func (r ApiGetNodeRequest) Index(index int32) ApiGetNodeRequest {
	r.index = &index
	return r
}
func (r ApiGetNodeRequest) Wait(wait string) ApiGetNodeRequest {
	r.wait = &wait
	return r
}
func (r ApiGetNodeRequest) Stale(stale string) ApiGetNodeRequest {
	r.stale = &stale
	return r
}
func (r ApiGetNodeRequest) Prefix(prefix string) ApiGetNodeRequest {
	r.prefix = &prefix
	return r
}
func (r ApiGetNodeRequest) XNomadToken(xNomadToken string) ApiGetNodeRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiGetNodeRequest) PerPage(perPage int32) ApiGetNodeRequest {
	r.perPage = &perPage
	return r
}
func (r ApiGetNodeRequest) NextToken(nextToken string) ApiGetNodeRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiGetNodeRequest) Execute() (Node, *_nethttp.Response, error) {
	return r.ApiService.GetNodeExecute(r)
}

/*
 * GetNode Method for GetNode
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param nodeId The ID of the node.
 * @return ApiGetNodeRequest
 */
func (a *NodesApiService) GetNode(ctx _context.Context, nodeId string) ApiGetNodeRequest {
	return ApiGetNodeRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

/*
 * Execute executes the request
 * @return Node
 */
func (a *NodesApiService) GetNodeExecute(r ApiGetNodeRequest) (Node, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Node
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.GetNode")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/node/{nodeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", _neturl.PathEscape(parameterToString(r.nodeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNodeAllocationsRequest struct {
	ctx _context.Context
	ApiService *NodesApiService
	nodeId string
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiGetNodeAllocationsRequest) Region(region string) ApiGetNodeAllocationsRequest {
	r.region = &region
	return r
}
func (r ApiGetNodeAllocationsRequest) Namespace(namespace string) ApiGetNodeAllocationsRequest {
	r.namespace = &namespace
	return r
}
func (r ApiGetNodeAllocationsRequest) Index(index int32) ApiGetNodeAllocationsRequest {
	r.index = &index
	return r
}
func (r ApiGetNodeAllocationsRequest) Wait(wait string) ApiGetNodeAllocationsRequest {
	r.wait = &wait
	return r
}
func (r ApiGetNodeAllocationsRequest) Stale(stale string) ApiGetNodeAllocationsRequest {
	r.stale = &stale
	return r
}
func (r ApiGetNodeAllocationsRequest) Prefix(prefix string) ApiGetNodeAllocationsRequest {
	r.prefix = &prefix
	return r
}
func (r ApiGetNodeAllocationsRequest) XNomadToken(xNomadToken string) ApiGetNodeAllocationsRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiGetNodeAllocationsRequest) PerPage(perPage int32) ApiGetNodeAllocationsRequest {
	r.perPage = &perPage
	return r
}
func (r ApiGetNodeAllocationsRequest) NextToken(nextToken string) ApiGetNodeAllocationsRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiGetNodeAllocationsRequest) Execute() ([]AllocationListStub, *_nethttp.Response, error) {
	return r.ApiService.GetNodeAllocationsExecute(r)
}

/*
 * GetNodeAllocations Method for GetNodeAllocations
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param nodeId The ID of the node.
 * @return ApiGetNodeAllocationsRequest
 */
func (a *NodesApiService) GetNodeAllocations(ctx _context.Context, nodeId string) ApiGetNodeAllocationsRequest {
	return ApiGetNodeAllocationsRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

/*
 * Execute executes the request
 * @return []AllocationListStub
 */
func (a *NodesApiService) GetNodeAllocationsExecute(r ApiGetNodeAllocationsRequest) ([]AllocationListStub, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AllocationListStub
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.GetNodeAllocations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/node/{nodeId}/allocations"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", _neturl.PathEscape(parameterToString(r.nodeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNodesRequest struct {
	ctx _context.Context
	ApiService *NodesApiService
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
	resources *bool
}

func (r ApiGetNodesRequest) Region(region string) ApiGetNodesRequest {
	r.region = &region
	return r
}
func (r ApiGetNodesRequest) Namespace(namespace string) ApiGetNodesRequest {
	r.namespace = &namespace
	return r
}
func (r ApiGetNodesRequest) Index(index int32) ApiGetNodesRequest {
	r.index = &index
	return r
}
func (r ApiGetNodesRequest) Wait(wait string) ApiGetNodesRequest {
	r.wait = &wait
	return r
}
func (r ApiGetNodesRequest) Stale(stale string) ApiGetNodesRequest {
	r.stale = &stale
	return r
}
func (r ApiGetNodesRequest) Prefix(prefix string) ApiGetNodesRequest {
	r.prefix = &prefix
	return r
}
func (r ApiGetNodesRequest) XNomadToken(xNomadToken string) ApiGetNodesRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiGetNodesRequest) PerPage(perPage int32) ApiGetNodesRequest {
	r.perPage = &perPage
	return r
}
func (r ApiGetNodesRequest) NextToken(nextToken string) ApiGetNodesRequest {
	r.nextToken = &nextToken
	return r
}
func (r ApiGetNodesRequest) Resources(resources bool) ApiGetNodesRequest {
	r.resources = &resources
	return r
}

func (r ApiGetNodesRequest) Execute() ([]NodeListStub, *_nethttp.Response, error) {
	return r.ApiService.GetNodesExecute(r)
}

/*
 * GetNodes Method for GetNodes
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetNodesRequest
 */
func (a *NodesApiService) GetNodes(ctx _context.Context) ApiGetNodesRequest {
	return ApiGetNodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []NodeListStub
 */
func (a *NodesApiService) GetNodesExecute(r ApiGetNodesRequest) ([]NodeListStub, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []NodeListStub
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.GetNodes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	if r.resources != nil {
		localVarQueryParams.Add("resources", parameterToString(*r.resources, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNodeDrainRequest struct {
	ctx _context.Context
	ApiService *NodesApiService
	nodeId string
	nodeUpdateDrainRequest *NodeUpdateDrainRequest
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiUpdateNodeDrainRequest) NodeUpdateDrainRequest(nodeUpdateDrainRequest NodeUpdateDrainRequest) ApiUpdateNodeDrainRequest {
	r.nodeUpdateDrainRequest = &nodeUpdateDrainRequest
	return r
}
func (r ApiUpdateNodeDrainRequest) Region(region string) ApiUpdateNodeDrainRequest {
	r.region = &region
	return r
}
func (r ApiUpdateNodeDrainRequest) Namespace(namespace string) ApiUpdateNodeDrainRequest {
	r.namespace = &namespace
	return r
}
func (r ApiUpdateNodeDrainRequest) Index(index int32) ApiUpdateNodeDrainRequest {
	r.index = &index
	return r
}
func (r ApiUpdateNodeDrainRequest) Wait(wait string) ApiUpdateNodeDrainRequest {
	r.wait = &wait
	return r
}
func (r ApiUpdateNodeDrainRequest) Stale(stale string) ApiUpdateNodeDrainRequest {
	r.stale = &stale
	return r
}
func (r ApiUpdateNodeDrainRequest) Prefix(prefix string) ApiUpdateNodeDrainRequest {
	r.prefix = &prefix
	return r
}
func (r ApiUpdateNodeDrainRequest) XNomadToken(xNomadToken string) ApiUpdateNodeDrainRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiUpdateNodeDrainRequest) PerPage(perPage int32) ApiUpdateNodeDrainRequest {
	r.perPage = &perPage
	return r
}
func (r ApiUpdateNodeDrainRequest) NextToken(nextToken string) ApiUpdateNodeDrainRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiUpdateNodeDrainRequest) Execute() (NodeDrainUpdateResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateNodeDrainExecute(r)
}

/*
 * UpdateNodeDrain Method for UpdateNodeDrain
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param nodeId The ID of the node.
 * @return ApiUpdateNodeDrainRequest
 */
func (a *NodesApiService) UpdateNodeDrain(ctx _context.Context, nodeId string) ApiUpdateNodeDrainRequest {
	return ApiUpdateNodeDrainRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

/*
 * Execute executes the request
 * @return NodeDrainUpdateResponse
 */
func (a *NodesApiService) UpdateNodeDrainExecute(r ApiUpdateNodeDrainRequest) (NodeDrainUpdateResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeDrainUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.UpdateNodeDrain")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/node/{nodeId}/drain"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", _neturl.PathEscape(parameterToString(r.nodeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.nodeUpdateDrainRequest == nil {
		return localVarReturnValue, nil, reportError("nodeUpdateDrainRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.nodeUpdateDrainRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNodeEligibilityRequest struct {
	ctx _context.Context
	ApiService *NodesApiService
	nodeId string
	nodeUpdateEligibilityRequest *NodeUpdateEligibilityRequest
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiUpdateNodeEligibilityRequest) NodeUpdateEligibilityRequest(nodeUpdateEligibilityRequest NodeUpdateEligibilityRequest) ApiUpdateNodeEligibilityRequest {
	r.nodeUpdateEligibilityRequest = &nodeUpdateEligibilityRequest
	return r
}
func (r ApiUpdateNodeEligibilityRequest) Region(region string) ApiUpdateNodeEligibilityRequest {
	r.region = &region
	return r
}
func (r ApiUpdateNodeEligibilityRequest) Namespace(namespace string) ApiUpdateNodeEligibilityRequest {
	r.namespace = &namespace
	return r
}
func (r ApiUpdateNodeEligibilityRequest) Index(index int32) ApiUpdateNodeEligibilityRequest {
	r.index = &index
	return r
}
func (r ApiUpdateNodeEligibilityRequest) Wait(wait string) ApiUpdateNodeEligibilityRequest {
	r.wait = &wait
	return r
}
func (r ApiUpdateNodeEligibilityRequest) Stale(stale string) ApiUpdateNodeEligibilityRequest {
	r.stale = &stale
	return r
}
func (r ApiUpdateNodeEligibilityRequest) Prefix(prefix string) ApiUpdateNodeEligibilityRequest {
	r.prefix = &prefix
	return r
}
func (r ApiUpdateNodeEligibilityRequest) XNomadToken(xNomadToken string) ApiUpdateNodeEligibilityRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiUpdateNodeEligibilityRequest) PerPage(perPage int32) ApiUpdateNodeEligibilityRequest {
	r.perPage = &perPage
	return r
}
func (r ApiUpdateNodeEligibilityRequest) NextToken(nextToken string) ApiUpdateNodeEligibilityRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiUpdateNodeEligibilityRequest) Execute() (NodeEligibilityUpdateResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateNodeEligibilityExecute(r)
}

/*
 * UpdateNodeEligibility Method for UpdateNodeEligibility
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param nodeId The ID of the node.
 * @return ApiUpdateNodeEligibilityRequest
 */
func (a *NodesApiService) UpdateNodeEligibility(ctx _context.Context, nodeId string) ApiUpdateNodeEligibilityRequest {
	return ApiUpdateNodeEligibilityRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

/*
 * Execute executes the request
 * @return NodeEligibilityUpdateResponse
 */
func (a *NodesApiService) UpdateNodeEligibilityExecute(r ApiUpdateNodeEligibilityRequest) (NodeEligibilityUpdateResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeEligibilityUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.UpdateNodeEligibility")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/node/{nodeId}/eligibility"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", _neturl.PathEscape(parameterToString(r.nodeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.nodeUpdateEligibilityRequest == nil {
		return localVarReturnValue, nil, reportError("nodeUpdateEligibilityRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.nodeUpdateEligibilityRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNodePurgeRequest struct {
	ctx _context.Context
	ApiService *NodesApiService
	nodeId string
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiUpdateNodePurgeRequest) Region(region string) ApiUpdateNodePurgeRequest {
	r.region = &region
	return r
}
func (r ApiUpdateNodePurgeRequest) Namespace(namespace string) ApiUpdateNodePurgeRequest {
	r.namespace = &namespace
	return r
}
func (r ApiUpdateNodePurgeRequest) Index(index int32) ApiUpdateNodePurgeRequest {
	r.index = &index
	return r
}
func (r ApiUpdateNodePurgeRequest) Wait(wait string) ApiUpdateNodePurgeRequest {
	r.wait = &wait
	return r
}
func (r ApiUpdateNodePurgeRequest) Stale(stale string) ApiUpdateNodePurgeRequest {
	r.stale = &stale
	return r
}
func (r ApiUpdateNodePurgeRequest) Prefix(prefix string) ApiUpdateNodePurgeRequest {
	r.prefix = &prefix
	return r
}
func (r ApiUpdateNodePurgeRequest) XNomadToken(xNomadToken string) ApiUpdateNodePurgeRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiUpdateNodePurgeRequest) PerPage(perPage int32) ApiUpdateNodePurgeRequest {
	r.perPage = &perPage
	return r
}
func (r ApiUpdateNodePurgeRequest) NextToken(nextToken string) ApiUpdateNodePurgeRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiUpdateNodePurgeRequest) Execute() (NodePurgeResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateNodePurgeExecute(r)
}

/*
 * UpdateNodePurge Method for UpdateNodePurge
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param nodeId The ID of the node.
 * @return ApiUpdateNodePurgeRequest
 */
func (a *NodesApiService) UpdateNodePurge(ctx _context.Context, nodeId string) ApiUpdateNodePurgeRequest {
	return ApiUpdateNodePurgeRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

/*
 * Execute executes the request
 * @return NodePurgeResponse
 */
func (a *NodesApiService) UpdateNodePurgeExecute(r ApiUpdateNodePurgeRequest) (NodePurgeResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodePurgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.UpdateNodePurge")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/node/{nodeId}/purge"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", _neturl.PathEscape(parameterToString(r.nodeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
