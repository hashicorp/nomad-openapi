/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NamespaceCapabilities struct for NamespaceCapabilities
type NamespaceCapabilities struct {
	DisabledTaskDrivers *[]string `json:"DisabledTaskDrivers,omitempty"`
	EnabledTaskDrivers *[]string `json:"EnabledTaskDrivers,omitempty"`
}

// NewNamespaceCapabilities instantiates a new NamespaceCapabilities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceCapabilities() *NamespaceCapabilities {
	this := NamespaceCapabilities{}
	return &this
}

// NewNamespaceCapabilitiesWithDefaults instantiates a new NamespaceCapabilities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceCapabilitiesWithDefaults() *NamespaceCapabilities {
	this := NamespaceCapabilities{}
	return &this
}

// GetDisabledTaskDrivers returns the DisabledTaskDrivers field value if set, zero value otherwise.
func (o *NamespaceCapabilities) GetDisabledTaskDrivers() []string {
	if o == nil || o.DisabledTaskDrivers == nil {
		var ret []string
		return ret
	}
	return *o.DisabledTaskDrivers
}

// GetDisabledTaskDriversOk returns a tuple with the DisabledTaskDrivers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceCapabilities) GetDisabledTaskDriversOk() (*[]string, bool) {
	if o == nil || o.DisabledTaskDrivers == nil {
		return nil, false
	}
	return o.DisabledTaskDrivers, true
}

// HasDisabledTaskDrivers returns a boolean if a field has been set.
func (o *NamespaceCapabilities) HasDisabledTaskDrivers() bool {
	if o != nil && o.DisabledTaskDrivers != nil {
		return true
	}

	return false
}

// SetDisabledTaskDrivers gets a reference to the given []string and assigns it to the DisabledTaskDrivers field.
func (o *NamespaceCapabilities) SetDisabledTaskDrivers(v []string) {
	o.DisabledTaskDrivers = &v
}

// GetEnabledTaskDrivers returns the EnabledTaskDrivers field value if set, zero value otherwise.
func (o *NamespaceCapabilities) GetEnabledTaskDrivers() []string {
	if o == nil || o.EnabledTaskDrivers == nil {
		var ret []string
		return ret
	}
	return *o.EnabledTaskDrivers
}

// GetEnabledTaskDriversOk returns a tuple with the EnabledTaskDrivers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceCapabilities) GetEnabledTaskDriversOk() (*[]string, bool) {
	if o == nil || o.EnabledTaskDrivers == nil {
		return nil, false
	}
	return o.EnabledTaskDrivers, true
}

// HasEnabledTaskDrivers returns a boolean if a field has been set.
func (o *NamespaceCapabilities) HasEnabledTaskDrivers() bool {
	if o != nil && o.EnabledTaskDrivers != nil {
		return true
	}

	return false
}

// SetEnabledTaskDrivers gets a reference to the given []string and assigns it to the EnabledTaskDrivers field.
func (o *NamespaceCapabilities) SetEnabledTaskDrivers(v []string) {
	o.EnabledTaskDrivers = &v
}

func (o NamespaceCapabilities) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisabledTaskDrivers != nil {
		toSerialize["DisabledTaskDrivers"] = o.DisabledTaskDrivers
	}
	if o.EnabledTaskDrivers != nil {
		toSerialize["EnabledTaskDrivers"] = o.EnabledTaskDrivers
	}
	return json.Marshal(toSerialize)
}

type NullableNamespaceCapabilities struct {
	value *NamespaceCapabilities
	isSet bool
}

func (v NullableNamespaceCapabilities) Get() *NamespaceCapabilities {
	return v.value
}

func (v *NullableNamespaceCapabilities) Set(val *NamespaceCapabilities) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceCapabilities) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceCapabilities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceCapabilities(val *NamespaceCapabilities) *NullableNamespaceCapabilities {
	return &NullableNamespaceCapabilities{value: val, isSet: true}
}

func (v NullableNamespaceCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceCapabilities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


