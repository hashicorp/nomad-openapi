/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MetricsSummary struct for MetricsSummary
type MetricsSummary struct {
	Counters *[]SampledValue `json:"Counters,omitempty"`
	Gauges *[]GaugeValue `json:"Gauges,omitempty"`
	Points *[]PointValue `json:"Points,omitempty"`
	Samples *[]SampledValue `json:"Samples,omitempty"`
	Timestamp *string `json:"Timestamp,omitempty"`
}

// NewMetricsSummary instantiates a new MetricsSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsSummary() *MetricsSummary {
	this := MetricsSummary{}
	return &this
}

// NewMetricsSummaryWithDefaults instantiates a new MetricsSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsSummaryWithDefaults() *MetricsSummary {
	this := MetricsSummary{}
	return &this
}

// GetCounters returns the Counters field value if set, zero value otherwise.
func (o *MetricsSummary) GetCounters() []SampledValue {
	if o == nil || o.Counters == nil {
		var ret []SampledValue
		return ret
	}
	return *o.Counters
}

// GetCountersOk returns a tuple with the Counters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsSummary) GetCountersOk() (*[]SampledValue, bool) {
	if o == nil || o.Counters == nil {
		return nil, false
	}
	return o.Counters, true
}

// HasCounters returns a boolean if a field has been set.
func (o *MetricsSummary) HasCounters() bool {
	if o != nil && o.Counters != nil {
		return true
	}

	return false
}

// SetCounters gets a reference to the given []SampledValue and assigns it to the Counters field.
func (o *MetricsSummary) SetCounters(v []SampledValue) {
	o.Counters = &v
}

// GetGauges returns the Gauges field value if set, zero value otherwise.
func (o *MetricsSummary) GetGauges() []GaugeValue {
	if o == nil || o.Gauges == nil {
		var ret []GaugeValue
		return ret
	}
	return *o.Gauges
}

// GetGaugesOk returns a tuple with the Gauges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsSummary) GetGaugesOk() (*[]GaugeValue, bool) {
	if o == nil || o.Gauges == nil {
		return nil, false
	}
	return o.Gauges, true
}

// HasGauges returns a boolean if a field has been set.
func (o *MetricsSummary) HasGauges() bool {
	if o != nil && o.Gauges != nil {
		return true
	}

	return false
}

// SetGauges gets a reference to the given []GaugeValue and assigns it to the Gauges field.
func (o *MetricsSummary) SetGauges(v []GaugeValue) {
	o.Gauges = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *MetricsSummary) GetPoints() []PointValue {
	if o == nil || o.Points == nil {
		var ret []PointValue
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsSummary) GetPointsOk() (*[]PointValue, bool) {
	if o == nil || o.Points == nil {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *MetricsSummary) HasPoints() bool {
	if o != nil && o.Points != nil {
		return true
	}

	return false
}

// SetPoints gets a reference to the given []PointValue and assigns it to the Points field.
func (o *MetricsSummary) SetPoints(v []PointValue) {
	o.Points = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *MetricsSummary) GetSamples() []SampledValue {
	if o == nil || o.Samples == nil {
		var ret []SampledValue
		return ret
	}
	return *o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsSummary) GetSamplesOk() (*[]SampledValue, bool) {
	if o == nil || o.Samples == nil {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *MetricsSummary) HasSamples() bool {
	if o != nil && o.Samples != nil {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []SampledValue and assigns it to the Samples field.
func (o *MetricsSummary) SetSamples(v []SampledValue) {
	o.Samples = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *MetricsSummary) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsSummary) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MetricsSummary) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *MetricsSummary) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o MetricsSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Counters != nil {
		toSerialize["Counters"] = o.Counters
	}
	if o.Gauges != nil {
		toSerialize["Gauges"] = o.Gauges
	}
	if o.Points != nil {
		toSerialize["Points"] = o.Points
	}
	if o.Samples != nil {
		toSerialize["Samples"] = o.Samples
	}
	if o.Timestamp != nil {
		toSerialize["Timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableMetricsSummary struct {
	value *MetricsSummary
	isSet bool
}

func (v NullableMetricsSummary) Get() *MetricsSummary {
	return v.value
}

func (v *NullableMetricsSummary) Set(val *MetricsSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsSummary(val *MetricsSummary) *NullableMetricsSummary {
	return &NullableMetricsSummary{value: val, isSet: true}
}

func (v NullableMetricsSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


