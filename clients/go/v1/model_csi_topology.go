/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CSITopology struct for CSITopology
type CSITopology struct {
	Segments *map[string]string `json:"Segments,omitempty"`
}

// NewCSITopology instantiates a new CSITopology object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSITopology() *CSITopology {
	this := CSITopology{}
	return &this
}

// NewCSITopologyWithDefaults instantiates a new CSITopology object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSITopologyWithDefaults() *CSITopology {
	this := CSITopology{}
	return &this
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *CSITopology) GetSegments() map[string]string {
	if o == nil || o.Segments == nil {
		var ret map[string]string
		return ret
	}
	return *o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSITopology) GetSegmentsOk() (*map[string]string, bool) {
	if o == nil || o.Segments == nil {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *CSITopology) HasSegments() bool {
	if o != nil && o.Segments != nil {
		return true
	}

	return false
}

// SetSegments gets a reference to the given map[string]string and assigns it to the Segments field.
func (o *CSITopology) SetSegments(v map[string]string) {
	o.Segments = &v
}

func (o CSITopology) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Segments != nil {
		toSerialize["Segments"] = o.Segments
	}
	return json.Marshal(toSerialize)
}

type NullableCSITopology struct {
	value *CSITopology
	isSet bool
}

func (v NullableCSITopology) Get() *CSITopology {
	return v.value
}

func (v *NullableCSITopology) Set(val *CSITopology) {
	v.value = val
	v.isSet = true
}

func (v NullableCSITopology) IsSet() bool {
	return v.isSet
}

func (v *NullableCSITopology) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSITopology(val *CSITopology) *NullableCSITopology {
	return &NullableCSITopology{value: val, isSet: true}
}

func (v NullableCSITopology) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSITopology) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


