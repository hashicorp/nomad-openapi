/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Attribute struct for Attribute
type Attribute struct {
	Bool *bool `json:"Bool,omitempty"`
	Float *float64 `json:"Float,omitempty"`
	Int *int64 `json:"Int,omitempty"`
	String *string `json:"String,omitempty"`
	Unit *string `json:"Unit,omitempty"`
}

// NewAttribute instantiates a new Attribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttribute() *Attribute {
	this := Attribute{}
	return &this
}

// NewAttributeWithDefaults instantiates a new Attribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeWithDefaults() *Attribute {
	this := Attribute{}
	return &this
}

// GetBool returns the Bool field value if set, zero value otherwise.
func (o *Attribute) GetBool() bool {
	if o == nil || o.Bool == nil {
		var ret bool
		return ret
	}
	return *o.Bool
}

// GetBoolOk returns a tuple with the Bool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attribute) GetBoolOk() (*bool, bool) {
	if o == nil || o.Bool == nil {
		return nil, false
	}
	return o.Bool, true
}

// HasBool returns a boolean if a field has been set.
func (o *Attribute) HasBool() bool {
	if o != nil && o.Bool != nil {
		return true
	}

	return false
}

// SetBool gets a reference to the given bool and assigns it to the Bool field.
func (o *Attribute) SetBool(v bool) {
	o.Bool = &v
}

// GetFloat returns the Float field value if set, zero value otherwise.
func (o *Attribute) GetFloat() float64 {
	if o == nil || o.Float == nil {
		var ret float64
		return ret
	}
	return *o.Float
}

// GetFloatOk returns a tuple with the Float field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attribute) GetFloatOk() (*float64, bool) {
	if o == nil || o.Float == nil {
		return nil, false
	}
	return o.Float, true
}

// HasFloat returns a boolean if a field has been set.
func (o *Attribute) HasFloat() bool {
	if o != nil && o.Float != nil {
		return true
	}

	return false
}

// SetFloat gets a reference to the given float64 and assigns it to the Float field.
func (o *Attribute) SetFloat(v float64) {
	o.Float = &v
}

// GetInt returns the Int field value if set, zero value otherwise.
func (o *Attribute) GetInt() int64 {
	if o == nil || o.Int == nil {
		var ret int64
		return ret
	}
	return *o.Int
}

// GetIntOk returns a tuple with the Int field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attribute) GetIntOk() (*int64, bool) {
	if o == nil || o.Int == nil {
		return nil, false
	}
	return o.Int, true
}

// HasInt returns a boolean if a field has been set.
func (o *Attribute) HasInt() bool {
	if o != nil && o.Int != nil {
		return true
	}

	return false
}

// SetInt gets a reference to the given int64 and assigns it to the Int field.
func (o *Attribute) SetInt(v int64) {
	o.Int = &v
}

// GetString returns the String field value if set, zero value otherwise.
func (o *Attribute) GetString() string {
	if o == nil || o.String == nil {
		var ret string
		return ret
	}
	return *o.String
}

// GetStringOk returns a tuple with the String field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attribute) GetStringOk() (*string, bool) {
	if o == nil || o.String == nil {
		return nil, false
	}
	return o.String, true
}

// HasString returns a boolean if a field has been set.
func (o *Attribute) HasString() bool {
	if o != nil && o.String != nil {
		return true
	}

	return false
}

// SetString gets a reference to the given string and assigns it to the String field.
func (o *Attribute) SetString(v string) {
	o.String = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *Attribute) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attribute) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *Attribute) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *Attribute) SetUnit(v string) {
	o.Unit = &v
}

func (o Attribute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bool != nil {
		toSerialize["Bool"] = o.Bool
	}
	if o.Float != nil {
		toSerialize["Float"] = o.Float
	}
	if o.Int != nil {
		toSerialize["Int"] = o.Int
	}
	if o.String != nil {
		toSerialize["String"] = o.String
	}
	if o.Unit != nil {
		toSerialize["Unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableAttribute struct {
	value *Attribute
	isSet bool
}

func (v NullableAttribute) Get() *Attribute {
	return v.value
}

func (v *NullableAttribute) Set(val *Attribute) {
	v.value = val
	v.isSet = true
}

func (v NullableAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttribute(val *Attribute) *NullableAttribute {
	return &NullableAttribute{value: val, isSet: true}
}

func (v NullableAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


