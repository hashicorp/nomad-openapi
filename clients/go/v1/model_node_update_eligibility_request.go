/*
Nomad

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.4
Contact: support@hashicorp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NodeUpdateEligibilityRequest struct for NodeUpdateEligibilityRequest
type NodeUpdateEligibilityRequest struct {
	Eligibility *string `json:"Eligibility,omitempty"`
	NodeID *string `json:"NodeID,omitempty"`
}

// NewNodeUpdateEligibilityRequest instantiates a new NodeUpdateEligibilityRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeUpdateEligibilityRequest() *NodeUpdateEligibilityRequest {
	this := NodeUpdateEligibilityRequest{}
	return &this
}

// NewNodeUpdateEligibilityRequestWithDefaults instantiates a new NodeUpdateEligibilityRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeUpdateEligibilityRequestWithDefaults() *NodeUpdateEligibilityRequest {
	this := NodeUpdateEligibilityRequest{}
	return &this
}

// GetEligibility returns the Eligibility field value if set, zero value otherwise.
func (o *NodeUpdateEligibilityRequest) GetEligibility() string {
	if o == nil || o.Eligibility == nil {
		var ret string
		return ret
	}
	return *o.Eligibility
}

// GetEligibilityOk returns a tuple with the Eligibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeUpdateEligibilityRequest) GetEligibilityOk() (*string, bool) {
	if o == nil || o.Eligibility == nil {
		return nil, false
	}
	return o.Eligibility, true
}

// HasEligibility returns a boolean if a field has been set.
func (o *NodeUpdateEligibilityRequest) HasEligibility() bool {
	if o != nil && o.Eligibility != nil {
		return true
	}

	return false
}

// SetEligibility gets a reference to the given string and assigns it to the Eligibility field.
func (o *NodeUpdateEligibilityRequest) SetEligibility(v string) {
	o.Eligibility = &v
}

// GetNodeID returns the NodeID field value if set, zero value otherwise.
func (o *NodeUpdateEligibilityRequest) GetNodeID() string {
	if o == nil || o.NodeID == nil {
		var ret string
		return ret
	}
	return *o.NodeID
}

// GetNodeIDOk returns a tuple with the NodeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeUpdateEligibilityRequest) GetNodeIDOk() (*string, bool) {
	if o == nil || o.NodeID == nil {
		return nil, false
	}
	return o.NodeID, true
}

// HasNodeID returns a boolean if a field has been set.
func (o *NodeUpdateEligibilityRequest) HasNodeID() bool {
	if o != nil && o.NodeID != nil {
		return true
	}

	return false
}

// SetNodeID gets a reference to the given string and assigns it to the NodeID field.
func (o *NodeUpdateEligibilityRequest) SetNodeID(v string) {
	o.NodeID = &v
}

func (o NodeUpdateEligibilityRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Eligibility != nil {
		toSerialize["Eligibility"] = o.Eligibility
	}
	if o.NodeID != nil {
		toSerialize["NodeID"] = o.NodeID
	}
	return json.Marshal(toSerialize)
}

type NullableNodeUpdateEligibilityRequest struct {
	value *NodeUpdateEligibilityRequest
	isSet bool
}

func (v NullableNodeUpdateEligibilityRequest) Get() *NodeUpdateEligibilityRequest {
	return v.value
}

func (v *NullableNodeUpdateEligibilityRequest) Set(val *NodeUpdateEligibilityRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeUpdateEligibilityRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeUpdateEligibilityRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeUpdateEligibilityRequest(val *NodeUpdateEligibilityRequest) *NullableNodeUpdateEligibilityRequest {
	return &NullableNodeUpdateEligibilityRequest{value: val, isSet: true}
}

func (v NullableNodeUpdateEligibilityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeUpdateEligibilityRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


