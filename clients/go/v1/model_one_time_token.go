/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// OneTimeToken struct for OneTimeToken
type OneTimeToken struct {
	AccessorID *string `json:"AccessorID,omitempty"`
	CreateIndex *int32 `json:"CreateIndex,omitempty"`
	ExpiresAt *time.Time `json:"ExpiresAt,omitempty"`
	ModifyIndex *int32 `json:"ModifyIndex,omitempty"`
	OneTimeSecretID *string `json:"OneTimeSecretID,omitempty"`
}

// NewOneTimeToken instantiates a new OneTimeToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOneTimeToken() *OneTimeToken {
	this := OneTimeToken{}
	return &this
}

// NewOneTimeTokenWithDefaults instantiates a new OneTimeToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOneTimeTokenWithDefaults() *OneTimeToken {
	this := OneTimeToken{}
	return &this
}

// GetAccessorID returns the AccessorID field value if set, zero value otherwise.
func (o *OneTimeToken) GetAccessorID() string {
	if o == nil || o.AccessorID == nil {
		var ret string
		return ret
	}
	return *o.AccessorID
}

// GetAccessorIDOk returns a tuple with the AccessorID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OneTimeToken) GetAccessorIDOk() (*string, bool) {
	if o == nil || o.AccessorID == nil {
		return nil, false
	}
	return o.AccessorID, true
}

// HasAccessorID returns a boolean if a field has been set.
func (o *OneTimeToken) HasAccessorID() bool {
	if o != nil && o.AccessorID != nil {
		return true
	}

	return false
}

// SetAccessorID gets a reference to the given string and assigns it to the AccessorID field.
func (o *OneTimeToken) SetAccessorID(v string) {
	o.AccessorID = &v
}

// GetCreateIndex returns the CreateIndex field value if set, zero value otherwise.
func (o *OneTimeToken) GetCreateIndex() int32 {
	if o == nil || o.CreateIndex == nil {
		var ret int32
		return ret
	}
	return *o.CreateIndex
}

// GetCreateIndexOk returns a tuple with the CreateIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OneTimeToken) GetCreateIndexOk() (*int32, bool) {
	if o == nil || o.CreateIndex == nil {
		return nil, false
	}
	return o.CreateIndex, true
}

// HasCreateIndex returns a boolean if a field has been set.
func (o *OneTimeToken) HasCreateIndex() bool {
	if o != nil && o.CreateIndex != nil {
		return true
	}

	return false
}

// SetCreateIndex gets a reference to the given int32 and assigns it to the CreateIndex field.
func (o *OneTimeToken) SetCreateIndex(v int32) {
	o.CreateIndex = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *OneTimeToken) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OneTimeToken) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *OneTimeToken) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *OneTimeToken) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetModifyIndex returns the ModifyIndex field value if set, zero value otherwise.
func (o *OneTimeToken) GetModifyIndex() int32 {
	if o == nil || o.ModifyIndex == nil {
		var ret int32
		return ret
	}
	return *o.ModifyIndex
}

// GetModifyIndexOk returns a tuple with the ModifyIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OneTimeToken) GetModifyIndexOk() (*int32, bool) {
	if o == nil || o.ModifyIndex == nil {
		return nil, false
	}
	return o.ModifyIndex, true
}

// HasModifyIndex returns a boolean if a field has been set.
func (o *OneTimeToken) HasModifyIndex() bool {
	if o != nil && o.ModifyIndex != nil {
		return true
	}

	return false
}

// SetModifyIndex gets a reference to the given int32 and assigns it to the ModifyIndex field.
func (o *OneTimeToken) SetModifyIndex(v int32) {
	o.ModifyIndex = &v
}

// GetOneTimeSecretID returns the OneTimeSecretID field value if set, zero value otherwise.
func (o *OneTimeToken) GetOneTimeSecretID() string {
	if o == nil || o.OneTimeSecretID == nil {
		var ret string
		return ret
	}
	return *o.OneTimeSecretID
}

// GetOneTimeSecretIDOk returns a tuple with the OneTimeSecretID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OneTimeToken) GetOneTimeSecretIDOk() (*string, bool) {
	if o == nil || o.OneTimeSecretID == nil {
		return nil, false
	}
	return o.OneTimeSecretID, true
}

// HasOneTimeSecretID returns a boolean if a field has been set.
func (o *OneTimeToken) HasOneTimeSecretID() bool {
	if o != nil && o.OneTimeSecretID != nil {
		return true
	}

	return false
}

// SetOneTimeSecretID gets a reference to the given string and assigns it to the OneTimeSecretID field.
func (o *OneTimeToken) SetOneTimeSecretID(v string) {
	o.OneTimeSecretID = &v
}

func (o OneTimeToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessorID != nil {
		toSerialize["AccessorID"] = o.AccessorID
	}
	if o.CreateIndex != nil {
		toSerialize["CreateIndex"] = o.CreateIndex
	}
	if o.ExpiresAt != nil {
		toSerialize["ExpiresAt"] = o.ExpiresAt
	}
	if o.ModifyIndex != nil {
		toSerialize["ModifyIndex"] = o.ModifyIndex
	}
	if o.OneTimeSecretID != nil {
		toSerialize["OneTimeSecretID"] = o.OneTimeSecretID
	}
	return json.Marshal(toSerialize)
}

type NullableOneTimeToken struct {
	value *OneTimeToken
	isSet bool
}

func (v NullableOneTimeToken) Get() *OneTimeToken {
	return v.value
}

func (v *NullableOneTimeToken) Set(val *OneTimeToken) {
	v.value = val
	v.isSet = true
}

func (v NullableOneTimeToken) IsSet() bool {
	return v.isSet
}

func (v *NullableOneTimeToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneTimeToken(val *OneTimeToken) *NullableOneTimeToken {
	return &NullableOneTimeToken{value: val, isSet: true}
}

func (v NullableOneTimeToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneTimeToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


