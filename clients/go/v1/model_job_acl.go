/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// JobACL struct for JobACL
type JobACL struct {
	Group *string `json:"Group,omitempty"`
	JobID *string `json:"JobID,omitempty"`
	Namespace *string `json:"Namespace,omitempty"`
	Task *string `json:"Task,omitempty"`
}

// NewJobACL instantiates a new JobACL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobACL() *JobACL {
	this := JobACL{}
	return &this
}

// NewJobACLWithDefaults instantiates a new JobACL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobACLWithDefaults() *JobACL {
	this := JobACL{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *JobACL) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobACL) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *JobACL) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *JobACL) SetGroup(v string) {
	o.Group = &v
}

// GetJobID returns the JobID field value if set, zero value otherwise.
func (o *JobACL) GetJobID() string {
	if o == nil || o.JobID == nil {
		var ret string
		return ret
	}
	return *o.JobID
}

// GetJobIDOk returns a tuple with the JobID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobACL) GetJobIDOk() (*string, bool) {
	if o == nil || o.JobID == nil {
		return nil, false
	}
	return o.JobID, true
}

// HasJobID returns a boolean if a field has been set.
func (o *JobACL) HasJobID() bool {
	if o != nil && o.JobID != nil {
		return true
	}

	return false
}

// SetJobID gets a reference to the given string and assigns it to the JobID field.
func (o *JobACL) SetJobID(v string) {
	o.JobID = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *JobACL) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobACL) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *JobACL) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *JobACL) SetNamespace(v string) {
	o.Namespace = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *JobACL) GetTask() string {
	if o == nil || o.Task == nil {
		var ret string
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobACL) GetTaskOk() (*string, bool) {
	if o == nil || o.Task == nil {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *JobACL) HasTask() bool {
	if o != nil && o.Task != nil {
		return true
	}

	return false
}

// SetTask gets a reference to the given string and assigns it to the Task field.
func (o *JobACL) SetTask(v string) {
	o.Task = &v
}

func (o JobACL) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Group != nil {
		toSerialize["Group"] = o.Group
	}
	if o.JobID != nil {
		toSerialize["JobID"] = o.JobID
	}
	if o.Namespace != nil {
		toSerialize["Namespace"] = o.Namespace
	}
	if o.Task != nil {
		toSerialize["Task"] = o.Task
	}
	return json.Marshal(toSerialize)
}

type NullableJobACL struct {
	value *JobACL
	isSet bool
}

func (v NullableJobACL) Get() *JobACL {
	return v.value
}

func (v *NullableJobACL) Set(val *JobACL) {
	v.value = val
	v.isSet = true
}

func (v NullableJobACL) IsSet() bool {
	return v.isSet
}

func (v *NullableJobACL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobACL(val *JobACL) *NullableJobACL {
	return &NullableJobACL{value: val, isSet: true}
}

func (v NullableJobACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobACL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


