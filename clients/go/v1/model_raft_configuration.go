/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RaftConfiguration struct for RaftConfiguration
type RaftConfiguration struct {
	Index *int32 `json:"Index,omitempty"`
	Servers *[]RaftServer `json:"Servers,omitempty"`
}

// NewRaftConfiguration instantiates a new RaftConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRaftConfiguration() *RaftConfiguration {
	this := RaftConfiguration{}
	return &this
}

// NewRaftConfigurationWithDefaults instantiates a new RaftConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRaftConfigurationWithDefaults() *RaftConfiguration {
	this := RaftConfiguration{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *RaftConfiguration) GetIndex() int32 {
	if o == nil || o.Index == nil {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RaftConfiguration) GetIndexOk() (*int32, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *RaftConfiguration) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *RaftConfiguration) SetIndex(v int32) {
	o.Index = &v
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *RaftConfiguration) GetServers() []RaftServer {
	if o == nil || o.Servers == nil {
		var ret []RaftServer
		return ret
	}
	return *o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RaftConfiguration) GetServersOk() (*[]RaftServer, bool) {
	if o == nil || o.Servers == nil {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *RaftConfiguration) HasServers() bool {
	if o != nil && o.Servers != nil {
		return true
	}

	return false
}

// SetServers gets a reference to the given []RaftServer and assigns it to the Servers field.
func (o *RaftConfiguration) SetServers(v []RaftServer) {
	o.Servers = &v
}

func (o RaftConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Index != nil {
		toSerialize["Index"] = o.Index
	}
	if o.Servers != nil {
		toSerialize["Servers"] = o.Servers
	}
	return json.Marshal(toSerialize)
}

type NullableRaftConfiguration struct {
	value *RaftConfiguration
	isSet bool
}

func (v NullableRaftConfiguration) Get() *RaftConfiguration {
	return v.value
}

func (v *NullableRaftConfiguration) Set(val *RaftConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableRaftConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableRaftConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRaftConfiguration(val *RaftConfiguration) *NullableRaftConfiguration {
	return &NullableRaftConfiguration{value: val, isSet: true}
}

func (v NullableRaftConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRaftConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


