/*
Nomad

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.4
Contact: support@hashicorp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SampledValue struct for SampledValue
type SampledValue struct {
	Count *int32 `json:"Count,omitempty"`
	Labels *map[string]string `json:"Labels,omitempty"`
	Max *float64 `json:"Max,omitempty"`
	Mean *float64 `json:"Mean,omitempty"`
	Min *float64 `json:"Min,omitempty"`
	Name *string `json:"Name,omitempty"`
	Rate *float64 `json:"Rate,omitempty"`
	Stddev *float64 `json:"Stddev,omitempty"`
	Sum *float64 `json:"Sum,omitempty"`
}

// NewSampledValue instantiates a new SampledValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSampledValue() *SampledValue {
	this := SampledValue{}
	return &this
}

// NewSampledValueWithDefaults instantiates a new SampledValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSampledValueWithDefaults() *SampledValue {
	this := SampledValue{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *SampledValue) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledValue) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *SampledValue) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *SampledValue) SetCount(v int32) {
	o.Count = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *SampledValue) GetLabels() map[string]string {
	if o == nil || o.Labels == nil {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledValue) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *SampledValue) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *SampledValue) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *SampledValue) GetMax() float64 {
	if o == nil || o.Max == nil {
		var ret float64
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledValue) GetMaxOk() (*float64, bool) {
	if o == nil || o.Max == nil {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *SampledValue) HasMax() bool {
	if o != nil && o.Max != nil {
		return true
	}

	return false
}

// SetMax gets a reference to the given float64 and assigns it to the Max field.
func (o *SampledValue) SetMax(v float64) {
	o.Max = &v
}

// GetMean returns the Mean field value if set, zero value otherwise.
func (o *SampledValue) GetMean() float64 {
	if o == nil || o.Mean == nil {
		var ret float64
		return ret
	}
	return *o.Mean
}

// GetMeanOk returns a tuple with the Mean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledValue) GetMeanOk() (*float64, bool) {
	if o == nil || o.Mean == nil {
		return nil, false
	}
	return o.Mean, true
}

// HasMean returns a boolean if a field has been set.
func (o *SampledValue) HasMean() bool {
	if o != nil && o.Mean != nil {
		return true
	}

	return false
}

// SetMean gets a reference to the given float64 and assigns it to the Mean field.
func (o *SampledValue) SetMean(v float64) {
	o.Mean = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *SampledValue) GetMin() float64 {
	if o == nil || o.Min == nil {
		var ret float64
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledValue) GetMinOk() (*float64, bool) {
	if o == nil || o.Min == nil {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *SampledValue) HasMin() bool {
	if o != nil && o.Min != nil {
		return true
	}

	return false
}

// SetMin gets a reference to the given float64 and assigns it to the Min field.
func (o *SampledValue) SetMin(v float64) {
	o.Min = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SampledValue) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledValue) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SampledValue) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SampledValue) SetName(v string) {
	o.Name = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *SampledValue) GetRate() float64 {
	if o == nil || o.Rate == nil {
		var ret float64
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledValue) GetRateOk() (*float64, bool) {
	if o == nil || o.Rate == nil {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *SampledValue) HasRate() bool {
	if o != nil && o.Rate != nil {
		return true
	}

	return false
}

// SetRate gets a reference to the given float64 and assigns it to the Rate field.
func (o *SampledValue) SetRate(v float64) {
	o.Rate = &v
}

// GetStddev returns the Stddev field value if set, zero value otherwise.
func (o *SampledValue) GetStddev() float64 {
	if o == nil || o.Stddev == nil {
		var ret float64
		return ret
	}
	return *o.Stddev
}

// GetStddevOk returns a tuple with the Stddev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledValue) GetStddevOk() (*float64, bool) {
	if o == nil || o.Stddev == nil {
		return nil, false
	}
	return o.Stddev, true
}

// HasStddev returns a boolean if a field has been set.
func (o *SampledValue) HasStddev() bool {
	if o != nil && o.Stddev != nil {
		return true
	}

	return false
}

// SetStddev gets a reference to the given float64 and assigns it to the Stddev field.
func (o *SampledValue) SetStddev(v float64) {
	o.Stddev = &v
}

// GetSum returns the Sum field value if set, zero value otherwise.
func (o *SampledValue) GetSum() float64 {
	if o == nil || o.Sum == nil {
		var ret float64
		return ret
	}
	return *o.Sum
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledValue) GetSumOk() (*float64, bool) {
	if o == nil || o.Sum == nil {
		return nil, false
	}
	return o.Sum, true
}

// HasSum returns a boolean if a field has been set.
func (o *SampledValue) HasSum() bool {
	if o != nil && o.Sum != nil {
		return true
	}

	return false
}

// SetSum gets a reference to the given float64 and assigns it to the Sum field.
func (o *SampledValue) SetSum(v float64) {
	o.Sum = &v
}

func (o SampledValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["Count"] = o.Count
	}
	if o.Labels != nil {
		toSerialize["Labels"] = o.Labels
	}
	if o.Max != nil {
		toSerialize["Max"] = o.Max
	}
	if o.Mean != nil {
		toSerialize["Mean"] = o.Mean
	}
	if o.Min != nil {
		toSerialize["Min"] = o.Min
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Rate != nil {
		toSerialize["Rate"] = o.Rate
	}
	if o.Stddev != nil {
		toSerialize["Stddev"] = o.Stddev
	}
	if o.Sum != nil {
		toSerialize["Sum"] = o.Sum
	}
	return json.Marshal(toSerialize)
}

type NullableSampledValue struct {
	value *SampledValue
	isSet bool
}

func (v NullableSampledValue) Get() *SampledValue {
	return v.value
}

func (v *NullableSampledValue) Set(val *SampledValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSampledValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSampledValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSampledValue(val *SampledValue) *NullableSampledValue {
	return &NullableSampledValue{value: val, isSet: true}
}

func (v NullableSampledValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSampledValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


