/*
Nomad

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.4
Contact: support@hashicorp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// EvalOptions struct for EvalOptions
type EvalOptions struct {
	ForceReschedule *bool `json:"ForceReschedule,omitempty"`
}

// NewEvalOptions instantiates a new EvalOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvalOptions() *EvalOptions {
	this := EvalOptions{}
	return &this
}

// NewEvalOptionsWithDefaults instantiates a new EvalOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvalOptionsWithDefaults() *EvalOptions {
	this := EvalOptions{}
	return &this
}

// GetForceReschedule returns the ForceReschedule field value if set, zero value otherwise.
func (o *EvalOptions) GetForceReschedule() bool {
	if o == nil || o.ForceReschedule == nil {
		var ret bool
		return ret
	}
	return *o.ForceReschedule
}

// GetForceRescheduleOk returns a tuple with the ForceReschedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvalOptions) GetForceRescheduleOk() (*bool, bool) {
	if o == nil || o.ForceReschedule == nil {
		return nil, false
	}
	return o.ForceReschedule, true
}

// HasForceReschedule returns a boolean if a field has been set.
func (o *EvalOptions) HasForceReschedule() bool {
	if o != nil && o.ForceReschedule != nil {
		return true
	}

	return false
}

// SetForceReschedule gets a reference to the given bool and assigns it to the ForceReschedule field.
func (o *EvalOptions) SetForceReschedule(v bool) {
	o.ForceReschedule = &v
}

func (o EvalOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ForceReschedule != nil {
		toSerialize["ForceReschedule"] = o.ForceReschedule
	}
	return json.Marshal(toSerialize)
}

type NullableEvalOptions struct {
	value *EvalOptions
	isSet bool
}

func (v NullableEvalOptions) Get() *EvalOptions {
	return v.value
}

func (v *NullableEvalOptions) Set(val *EvalOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableEvalOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableEvalOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvalOptions(val *EvalOptions) *NullableEvalOptions {
	return &NullableEvalOptions{value: val, isSet: true}
}

func (v NullableEvalOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvalOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


