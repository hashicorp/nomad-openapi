/*
Nomad

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.4
Contact: support@hashicorp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NodeDeviceResource struct for NodeDeviceResource
type NodeDeviceResource struct {
	Attributes *map[string]Attribute `json:"Attributes,omitempty"`
	Instances []NodeDevice `json:"Instances,omitempty"`
	Name *string `json:"Name,omitempty"`
	Type *string `json:"Type,omitempty"`
	Vendor *string `json:"Vendor,omitempty"`
}

// NewNodeDeviceResource instantiates a new NodeDeviceResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeDeviceResource() *NodeDeviceResource {
	this := NodeDeviceResource{}
	return &this
}

// NewNodeDeviceResourceWithDefaults instantiates a new NodeDeviceResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeDeviceResourceWithDefaults() *NodeDeviceResource {
	this := NodeDeviceResource{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *NodeDeviceResource) GetAttributes() map[string]Attribute {
	if o == nil || o.Attributes == nil {
		var ret map[string]Attribute
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDeviceResource) GetAttributesOk() (*map[string]Attribute, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *NodeDeviceResource) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]Attribute and assigns it to the Attributes field.
func (o *NodeDeviceResource) SetAttributes(v map[string]Attribute) {
	o.Attributes = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *NodeDeviceResource) GetInstances() []NodeDevice {
	if o == nil || o.Instances == nil {
		var ret []NodeDevice
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDeviceResource) GetInstancesOk() ([]NodeDevice, bool) {
	if o == nil || o.Instances == nil {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *NodeDeviceResource) HasInstances() bool {
	if o != nil && o.Instances != nil {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []NodeDevice and assigns it to the Instances field.
func (o *NodeDeviceResource) SetInstances(v []NodeDevice) {
	o.Instances = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NodeDeviceResource) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDeviceResource) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NodeDeviceResource) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NodeDeviceResource) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NodeDeviceResource) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDeviceResource) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NodeDeviceResource) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NodeDeviceResource) SetType(v string) {
	o.Type = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *NodeDeviceResource) GetVendor() string {
	if o == nil || o.Vendor == nil {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDeviceResource) GetVendorOk() (*string, bool) {
	if o == nil || o.Vendor == nil {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *NodeDeviceResource) HasVendor() bool {
	if o != nil && o.Vendor != nil {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *NodeDeviceResource) SetVendor(v string) {
	o.Vendor = &v
}

func (o NodeDeviceResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Attributes != nil {
		toSerialize["Attributes"] = o.Attributes
	}
	if o.Instances != nil {
		toSerialize["Instances"] = o.Instances
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.Vendor != nil {
		toSerialize["Vendor"] = o.Vendor
	}
	return json.Marshal(toSerialize)
}

type NullableNodeDeviceResource struct {
	value *NodeDeviceResource
	isSet bool
}

func (v NullableNodeDeviceResource) Get() *NodeDeviceResource {
	return v.value
}

func (v *NullableNodeDeviceResource) Set(val *NodeDeviceResource) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeDeviceResource) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeDeviceResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeDeviceResource(val *NodeDeviceResource) *NullableNodeDeviceResource {
	return &NullableNodeDeviceResource{value: val, isSet: true}
}

func (v NullableNodeDeviceResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeDeviceResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


