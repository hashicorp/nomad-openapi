/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// EnterpriseApiService EnterpriseApi service
type EnterpriseApiService service

type ApiCreateQuotaSpecRequest struct {
	ctx _context.Context
	ApiService *EnterpriseApiService
	quotaSpec *QuotaSpec
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiCreateQuotaSpecRequest) QuotaSpec(quotaSpec QuotaSpec) ApiCreateQuotaSpecRequest {
	r.quotaSpec = &quotaSpec
	return r
}
func (r ApiCreateQuotaSpecRequest) Region(region string) ApiCreateQuotaSpecRequest {
	r.region = &region
	return r
}
func (r ApiCreateQuotaSpecRequest) Namespace(namespace string) ApiCreateQuotaSpecRequest {
	r.namespace = &namespace
	return r
}
func (r ApiCreateQuotaSpecRequest) XNomadToken(xNomadToken string) ApiCreateQuotaSpecRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiCreateQuotaSpecRequest) IdempotencyToken(idempotencyToken string) ApiCreateQuotaSpecRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiCreateQuotaSpecRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CreateQuotaSpecExecute(r)
}

/*
 * CreateQuotaSpec Method for CreateQuotaSpec
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateQuotaSpecRequest
 */
func (a *EnterpriseApiService) CreateQuotaSpec(ctx _context.Context) ApiCreateQuotaSpecRequest {
	return ApiCreateQuotaSpecRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *EnterpriseApiService) CreateQuotaSpecExecute(r ApiCreateQuotaSpecRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseApiService.CreateQuotaSpec")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.quotaSpec == nil {
		return nil, reportError("quotaSpec is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.quotaSpec
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteQuotaSpecRequest struct {
	ctx _context.Context
	ApiService *EnterpriseApiService
	specName string
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiDeleteQuotaSpecRequest) Region(region string) ApiDeleteQuotaSpecRequest {
	r.region = &region
	return r
}
func (r ApiDeleteQuotaSpecRequest) Namespace(namespace string) ApiDeleteQuotaSpecRequest {
	r.namespace = &namespace
	return r
}
func (r ApiDeleteQuotaSpecRequest) XNomadToken(xNomadToken string) ApiDeleteQuotaSpecRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiDeleteQuotaSpecRequest) IdempotencyToken(idempotencyToken string) ApiDeleteQuotaSpecRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiDeleteQuotaSpecRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteQuotaSpecExecute(r)
}

/*
 * DeleteQuotaSpec Method for DeleteQuotaSpec
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param specName The quota spec identifier.
 * @return ApiDeleteQuotaSpecRequest
 */
func (a *EnterpriseApiService) DeleteQuotaSpec(ctx _context.Context, specName string) ApiDeleteQuotaSpecRequest {
	return ApiDeleteQuotaSpecRequest{
		ApiService: a,
		ctx: ctx,
		specName: specName,
	}
}

/*
 * Execute executes the request
 */
func (a *EnterpriseApiService) DeleteQuotaSpecExecute(r ApiDeleteQuotaSpecRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseApiService.DeleteQuotaSpec")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/{specName}"
	localVarPath = strings.Replace(localVarPath, "{"+"specName"+"}", _neturl.PathEscape(parameterToString(r.specName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetQuotaSpecRequest struct {
	ctx _context.Context
	ApiService *EnterpriseApiService
	specName string
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiGetQuotaSpecRequest) Region(region string) ApiGetQuotaSpecRequest {
	r.region = &region
	return r
}
func (r ApiGetQuotaSpecRequest) Namespace(namespace string) ApiGetQuotaSpecRequest {
	r.namespace = &namespace
	return r
}
func (r ApiGetQuotaSpecRequest) Index(index int32) ApiGetQuotaSpecRequest {
	r.index = &index
	return r
}
func (r ApiGetQuotaSpecRequest) Wait(wait string) ApiGetQuotaSpecRequest {
	r.wait = &wait
	return r
}
func (r ApiGetQuotaSpecRequest) Stale(stale string) ApiGetQuotaSpecRequest {
	r.stale = &stale
	return r
}
func (r ApiGetQuotaSpecRequest) Prefix(prefix string) ApiGetQuotaSpecRequest {
	r.prefix = &prefix
	return r
}
func (r ApiGetQuotaSpecRequest) XNomadToken(xNomadToken string) ApiGetQuotaSpecRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiGetQuotaSpecRequest) PerPage(perPage int32) ApiGetQuotaSpecRequest {
	r.perPage = &perPage
	return r
}
func (r ApiGetQuotaSpecRequest) NextToken(nextToken string) ApiGetQuotaSpecRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiGetQuotaSpecRequest) Execute() (QuotaSpec, *_nethttp.Response, error) {
	return r.ApiService.GetQuotaSpecExecute(r)
}

/*
 * GetQuotaSpec Method for GetQuotaSpec
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param specName The quota spec identifier.
 * @return ApiGetQuotaSpecRequest
 */
func (a *EnterpriseApiService) GetQuotaSpec(ctx _context.Context, specName string) ApiGetQuotaSpecRequest {
	return ApiGetQuotaSpecRequest{
		ApiService: a,
		ctx: ctx,
		specName: specName,
	}
}

/*
 * Execute executes the request
 * @return QuotaSpec
 */
func (a *EnterpriseApiService) GetQuotaSpecExecute(r ApiGetQuotaSpecRequest) (QuotaSpec, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  QuotaSpec
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseApiService.GetQuotaSpec")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/{specName}"
	localVarPath = strings.Replace(localVarPath, "{"+"specName"+"}", _neturl.PathEscape(parameterToString(r.specName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetQuotasRequest struct {
	ctx _context.Context
	ApiService *EnterpriseApiService
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiGetQuotasRequest) Region(region string) ApiGetQuotasRequest {
	r.region = &region
	return r
}
func (r ApiGetQuotasRequest) Namespace(namespace string) ApiGetQuotasRequest {
	r.namespace = &namespace
	return r
}
func (r ApiGetQuotasRequest) Index(index int32) ApiGetQuotasRequest {
	r.index = &index
	return r
}
func (r ApiGetQuotasRequest) Wait(wait string) ApiGetQuotasRequest {
	r.wait = &wait
	return r
}
func (r ApiGetQuotasRequest) Stale(stale string) ApiGetQuotasRequest {
	r.stale = &stale
	return r
}
func (r ApiGetQuotasRequest) Prefix(prefix string) ApiGetQuotasRequest {
	r.prefix = &prefix
	return r
}
func (r ApiGetQuotasRequest) XNomadToken(xNomadToken string) ApiGetQuotasRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiGetQuotasRequest) PerPage(perPage int32) ApiGetQuotasRequest {
	r.perPage = &perPage
	return r
}
func (r ApiGetQuotasRequest) NextToken(nextToken string) ApiGetQuotasRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiGetQuotasRequest) Execute() ([]interface{}, *_nethttp.Response, error) {
	return r.ApiService.GetQuotasExecute(r)
}

/*
 * GetQuotas Method for GetQuotas
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetQuotasRequest
 */
func (a *EnterpriseApiService) GetQuotas(ctx _context.Context) ApiGetQuotasRequest {
	return ApiGetQuotasRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []interface{}
 */
func (a *EnterpriseApiService) GetQuotasExecute(r ApiGetQuotasRequest) ([]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseApiService.GetQuotas")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quotas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostQuotaSpecRequest struct {
	ctx _context.Context
	ApiService *EnterpriseApiService
	specName string
	quotaSpec *QuotaSpec
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiPostQuotaSpecRequest) QuotaSpec(quotaSpec QuotaSpec) ApiPostQuotaSpecRequest {
	r.quotaSpec = &quotaSpec
	return r
}
func (r ApiPostQuotaSpecRequest) Region(region string) ApiPostQuotaSpecRequest {
	r.region = &region
	return r
}
func (r ApiPostQuotaSpecRequest) Namespace(namespace string) ApiPostQuotaSpecRequest {
	r.namespace = &namespace
	return r
}
func (r ApiPostQuotaSpecRequest) XNomadToken(xNomadToken string) ApiPostQuotaSpecRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiPostQuotaSpecRequest) IdempotencyToken(idempotencyToken string) ApiPostQuotaSpecRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiPostQuotaSpecRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PostQuotaSpecExecute(r)
}

/*
 * PostQuotaSpec Method for PostQuotaSpec
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param specName The quota spec identifier.
 * @return ApiPostQuotaSpecRequest
 */
func (a *EnterpriseApiService) PostQuotaSpec(ctx _context.Context, specName string) ApiPostQuotaSpecRequest {
	return ApiPostQuotaSpecRequest{
		ApiService: a,
		ctx: ctx,
		specName: specName,
	}
}

/*
 * Execute executes the request
 */
func (a *EnterpriseApiService) PostQuotaSpecExecute(r ApiPostQuotaSpecRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseApiService.PostQuotaSpec")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/{specName}"
	localVarPath = strings.Replace(localVarPath, "{"+"specName"+"}", _neturl.PathEscape(parameterToString(r.specName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.quotaSpec == nil {
		return nil, reportError("quotaSpec is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.quotaSpec
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
