/*
Nomad

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.4
Contact: support@hashicorp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// ServerHealth struct for ServerHealth
type ServerHealth struct {
	Address *string `json:"Address,omitempty"`
	Healthy *bool `json:"Healthy,omitempty"`
	ID *string `json:"ID,omitempty"`
	LastContact *int64 `json:"LastContact,omitempty"`
	LastIndex *int32 `json:"LastIndex,omitempty"`
	LastTerm *int32 `json:"LastTerm,omitempty"`
	Leader *bool `json:"Leader,omitempty"`
	Name *string `json:"Name,omitempty"`
	SerfStatus *string `json:"SerfStatus,omitempty"`
	StableSince NullableTime `json:"StableSince,omitempty"`
	Version *string `json:"Version,omitempty"`
	Voter *bool `json:"Voter,omitempty"`
}

// NewServerHealth instantiates a new ServerHealth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerHealth() *ServerHealth {
	this := ServerHealth{}
	return &this
}

// NewServerHealthWithDefaults instantiates a new ServerHealth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerHealthWithDefaults() *ServerHealth {
	this := ServerHealth{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ServerHealth) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerHealth) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ServerHealth) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ServerHealth) SetAddress(v string) {
	o.Address = &v
}

// GetHealthy returns the Healthy field value if set, zero value otherwise.
func (o *ServerHealth) GetHealthy() bool {
	if o == nil || o.Healthy == nil {
		var ret bool
		return ret
	}
	return *o.Healthy
}

// GetHealthyOk returns a tuple with the Healthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerHealth) GetHealthyOk() (*bool, bool) {
	if o == nil || o.Healthy == nil {
		return nil, false
	}
	return o.Healthy, true
}

// HasHealthy returns a boolean if a field has been set.
func (o *ServerHealth) HasHealthy() bool {
	if o != nil && o.Healthy != nil {
		return true
	}

	return false
}

// SetHealthy gets a reference to the given bool and assigns it to the Healthy field.
func (o *ServerHealth) SetHealthy(v bool) {
	o.Healthy = &v
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *ServerHealth) GetID() string {
	if o == nil || o.ID == nil {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerHealth) GetIDOk() (*string, bool) {
	if o == nil || o.ID == nil {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *ServerHealth) HasID() bool {
	if o != nil && o.ID != nil {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *ServerHealth) SetID(v string) {
	o.ID = &v
}

// GetLastContact returns the LastContact field value if set, zero value otherwise.
func (o *ServerHealth) GetLastContact() int64 {
	if o == nil || o.LastContact == nil {
		var ret int64
		return ret
	}
	return *o.LastContact
}

// GetLastContactOk returns a tuple with the LastContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerHealth) GetLastContactOk() (*int64, bool) {
	if o == nil || o.LastContact == nil {
		return nil, false
	}
	return o.LastContact, true
}

// HasLastContact returns a boolean if a field has been set.
func (o *ServerHealth) HasLastContact() bool {
	if o != nil && o.LastContact != nil {
		return true
	}

	return false
}

// SetLastContact gets a reference to the given int64 and assigns it to the LastContact field.
func (o *ServerHealth) SetLastContact(v int64) {
	o.LastContact = &v
}

// GetLastIndex returns the LastIndex field value if set, zero value otherwise.
func (o *ServerHealth) GetLastIndex() int32 {
	if o == nil || o.LastIndex == nil {
		var ret int32
		return ret
	}
	return *o.LastIndex
}

// GetLastIndexOk returns a tuple with the LastIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerHealth) GetLastIndexOk() (*int32, bool) {
	if o == nil || o.LastIndex == nil {
		return nil, false
	}
	return o.LastIndex, true
}

// HasLastIndex returns a boolean if a field has been set.
func (o *ServerHealth) HasLastIndex() bool {
	if o != nil && o.LastIndex != nil {
		return true
	}

	return false
}

// SetLastIndex gets a reference to the given int32 and assigns it to the LastIndex field.
func (o *ServerHealth) SetLastIndex(v int32) {
	o.LastIndex = &v
}

// GetLastTerm returns the LastTerm field value if set, zero value otherwise.
func (o *ServerHealth) GetLastTerm() int32 {
	if o == nil || o.LastTerm == nil {
		var ret int32
		return ret
	}
	return *o.LastTerm
}

// GetLastTermOk returns a tuple with the LastTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerHealth) GetLastTermOk() (*int32, bool) {
	if o == nil || o.LastTerm == nil {
		return nil, false
	}
	return o.LastTerm, true
}

// HasLastTerm returns a boolean if a field has been set.
func (o *ServerHealth) HasLastTerm() bool {
	if o != nil && o.LastTerm != nil {
		return true
	}

	return false
}

// SetLastTerm gets a reference to the given int32 and assigns it to the LastTerm field.
func (o *ServerHealth) SetLastTerm(v int32) {
	o.LastTerm = &v
}

// GetLeader returns the Leader field value if set, zero value otherwise.
func (o *ServerHealth) GetLeader() bool {
	if o == nil || o.Leader == nil {
		var ret bool
		return ret
	}
	return *o.Leader
}

// GetLeaderOk returns a tuple with the Leader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerHealth) GetLeaderOk() (*bool, bool) {
	if o == nil || o.Leader == nil {
		return nil, false
	}
	return o.Leader, true
}

// HasLeader returns a boolean if a field has been set.
func (o *ServerHealth) HasLeader() bool {
	if o != nil && o.Leader != nil {
		return true
	}

	return false
}

// SetLeader gets a reference to the given bool and assigns it to the Leader field.
func (o *ServerHealth) SetLeader(v bool) {
	o.Leader = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServerHealth) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerHealth) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServerHealth) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ServerHealth) SetName(v string) {
	o.Name = &v
}

// GetSerfStatus returns the SerfStatus field value if set, zero value otherwise.
func (o *ServerHealth) GetSerfStatus() string {
	if o == nil || o.SerfStatus == nil {
		var ret string
		return ret
	}
	return *o.SerfStatus
}

// GetSerfStatusOk returns a tuple with the SerfStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerHealth) GetSerfStatusOk() (*string, bool) {
	if o == nil || o.SerfStatus == nil {
		return nil, false
	}
	return o.SerfStatus, true
}

// HasSerfStatus returns a boolean if a field has been set.
func (o *ServerHealth) HasSerfStatus() bool {
	if o != nil && o.SerfStatus != nil {
		return true
	}

	return false
}

// SetSerfStatus gets a reference to the given string and assigns it to the SerfStatus field.
func (o *ServerHealth) SetSerfStatus(v string) {
	o.SerfStatus = &v
}

// GetStableSince returns the StableSince field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerHealth) GetStableSince() time.Time {
	if o == nil || o.StableSince.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StableSince.Get()
}

// GetStableSinceOk returns a tuple with the StableSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerHealth) GetStableSinceOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StableSince.Get(), o.StableSince.IsSet()
}

// HasStableSince returns a boolean if a field has been set.
func (o *ServerHealth) HasStableSince() bool {
	if o != nil && o.StableSince.IsSet() {
		return true
	}

	return false
}

// SetStableSince gets a reference to the given NullableTime and assigns it to the StableSince field.
func (o *ServerHealth) SetStableSince(v time.Time) {
	o.StableSince.Set(&v)
}
// SetStableSinceNil sets the value for StableSince to be an explicit nil
func (o *ServerHealth) SetStableSinceNil() {
	o.StableSince.Set(nil)
}

// UnsetStableSince ensures that no value is present for StableSince, not even an explicit nil
func (o *ServerHealth) UnsetStableSince() {
	o.StableSince.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ServerHealth) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerHealth) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ServerHealth) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ServerHealth) SetVersion(v string) {
	o.Version = &v
}

// GetVoter returns the Voter field value if set, zero value otherwise.
func (o *ServerHealth) GetVoter() bool {
	if o == nil || o.Voter == nil {
		var ret bool
		return ret
	}
	return *o.Voter
}

// GetVoterOk returns a tuple with the Voter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerHealth) GetVoterOk() (*bool, bool) {
	if o == nil || o.Voter == nil {
		return nil, false
	}
	return o.Voter, true
}

// HasVoter returns a boolean if a field has been set.
func (o *ServerHealth) HasVoter() bool {
	if o != nil && o.Voter != nil {
		return true
	}

	return false
}

// SetVoter gets a reference to the given bool and assigns it to the Voter field.
func (o *ServerHealth) SetVoter(v bool) {
	o.Voter = &v
}

func (o ServerHealth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["Address"] = o.Address
	}
	if o.Healthy != nil {
		toSerialize["Healthy"] = o.Healthy
	}
	if o.ID != nil {
		toSerialize["ID"] = o.ID
	}
	if o.LastContact != nil {
		toSerialize["LastContact"] = o.LastContact
	}
	if o.LastIndex != nil {
		toSerialize["LastIndex"] = o.LastIndex
	}
	if o.LastTerm != nil {
		toSerialize["LastTerm"] = o.LastTerm
	}
	if o.Leader != nil {
		toSerialize["Leader"] = o.Leader
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.SerfStatus != nil {
		toSerialize["SerfStatus"] = o.SerfStatus
	}
	if o.StableSince.IsSet() {
		toSerialize["StableSince"] = o.StableSince.Get()
	}
	if o.Version != nil {
		toSerialize["Version"] = o.Version
	}
	if o.Voter != nil {
		toSerialize["Voter"] = o.Voter
	}
	return json.Marshal(toSerialize)
}

type NullableServerHealth struct {
	value *ServerHealth
	isSet bool
}

func (v NullableServerHealth) Get() *ServerHealth {
	return v.value
}

func (v *NullableServerHealth) Set(val *ServerHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableServerHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableServerHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerHealth(val *ServerHealth) *NullableServerHealth {
	return &NullableServerHealth{value: val, isSet: true}
}

func (v NullableServerHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


