/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// WaitConfig struct for WaitConfig
type WaitConfig struct {
	Max *int64 `json:"Max,omitempty"`
	Min *int64 `json:"Min,omitempty"`
}

// NewWaitConfig instantiates a new WaitConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWaitConfig() *WaitConfig {
	this := WaitConfig{}
	return &this
}

// NewWaitConfigWithDefaults instantiates a new WaitConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWaitConfigWithDefaults() *WaitConfig {
	this := WaitConfig{}
	return &this
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *WaitConfig) GetMax() int64 {
	if o == nil || o.Max == nil {
		var ret int64
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitConfig) GetMaxOk() (*int64, bool) {
	if o == nil || o.Max == nil {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *WaitConfig) HasMax() bool {
	if o != nil && o.Max != nil {
		return true
	}

	return false
}

// SetMax gets a reference to the given int64 and assigns it to the Max field.
func (o *WaitConfig) SetMax(v int64) {
	o.Max = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *WaitConfig) GetMin() int64 {
	if o == nil || o.Min == nil {
		var ret int64
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitConfig) GetMinOk() (*int64, bool) {
	if o == nil || o.Min == nil {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *WaitConfig) HasMin() bool {
	if o != nil && o.Min != nil {
		return true
	}

	return false
}

// SetMin gets a reference to the given int64 and assigns it to the Min field.
func (o *WaitConfig) SetMin(v int64) {
	o.Min = &v
}

func (o WaitConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Max != nil {
		toSerialize["Max"] = o.Max
	}
	if o.Min != nil {
		toSerialize["Min"] = o.Min
	}
	return json.Marshal(toSerialize)
}

type NullableWaitConfig struct {
	value *WaitConfig
	isSet bool
}

func (v NullableWaitConfig) Get() *WaitConfig {
	return v.value
}

func (v *NullableWaitConfig) Set(val *WaitConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableWaitConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableWaitConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaitConfig(val *WaitConfig) *NullableWaitConfig {
	return &NullableWaitConfig{value: val, isSet: true}
}

func (v NullableWaitConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaitConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


