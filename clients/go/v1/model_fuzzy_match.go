/*
Nomad

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.4
Contact: support@hashicorp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// FuzzyMatch struct for FuzzyMatch
type FuzzyMatch struct {
	ID *string `json:"ID,omitempty"`
	Scope []string `json:"Scope,omitempty"`
}

// NewFuzzyMatch instantiates a new FuzzyMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFuzzyMatch() *FuzzyMatch {
	this := FuzzyMatch{}
	return &this
}

// NewFuzzyMatchWithDefaults instantiates a new FuzzyMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFuzzyMatchWithDefaults() *FuzzyMatch {
	this := FuzzyMatch{}
	return &this
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *FuzzyMatch) GetID() string {
	if o == nil || o.ID == nil {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuzzyMatch) GetIDOk() (*string, bool) {
	if o == nil || o.ID == nil {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *FuzzyMatch) HasID() bool {
	if o != nil && o.ID != nil {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *FuzzyMatch) SetID(v string) {
	o.ID = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *FuzzyMatch) GetScope() []string {
	if o == nil || o.Scope == nil {
		var ret []string
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuzzyMatch) GetScopeOk() ([]string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *FuzzyMatch) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given []string and assigns it to the Scope field.
func (o *FuzzyMatch) SetScope(v []string) {
	o.Scope = v
}

func (o FuzzyMatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ID != nil {
		toSerialize["ID"] = o.ID
	}
	if o.Scope != nil {
		toSerialize["Scope"] = o.Scope
	}
	return json.Marshal(toSerialize)
}

type NullableFuzzyMatch struct {
	value *FuzzyMatch
	isSet bool
}

func (v NullableFuzzyMatch) Get() *FuzzyMatch {
	return v.value
}

func (v *NullableFuzzyMatch) Set(val *FuzzyMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableFuzzyMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableFuzzyMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFuzzyMatch(val *FuzzyMatch) *NullableFuzzyMatch {
	return &NullableFuzzyMatch{value: val, isSet: true}
}

func (v NullableFuzzyMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFuzzyMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


