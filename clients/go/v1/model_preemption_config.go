/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// PreemptionConfig struct for PreemptionConfig
type PreemptionConfig struct {
	BatchSchedulerEnabled *bool `json:"BatchSchedulerEnabled,omitempty"`
	ServiceSchedulerEnabled *bool `json:"ServiceSchedulerEnabled,omitempty"`
	SysBatchSchedulerEnabled *bool `json:"SysBatchSchedulerEnabled,omitempty"`
	SystemSchedulerEnabled *bool `json:"SystemSchedulerEnabled,omitempty"`
}

// NewPreemptionConfig instantiates a new PreemptionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreemptionConfig() *PreemptionConfig {
	this := PreemptionConfig{}
	return &this
}

// NewPreemptionConfigWithDefaults instantiates a new PreemptionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreemptionConfigWithDefaults() *PreemptionConfig {
	this := PreemptionConfig{}
	return &this
}

// GetBatchSchedulerEnabled returns the BatchSchedulerEnabled field value if set, zero value otherwise.
func (o *PreemptionConfig) GetBatchSchedulerEnabled() bool {
	if o == nil || o.BatchSchedulerEnabled == nil {
		var ret bool
		return ret
	}
	return *o.BatchSchedulerEnabled
}

// GetBatchSchedulerEnabledOk returns a tuple with the BatchSchedulerEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreemptionConfig) GetBatchSchedulerEnabledOk() (*bool, bool) {
	if o == nil || o.BatchSchedulerEnabled == nil {
		return nil, false
	}
	return o.BatchSchedulerEnabled, true
}

// HasBatchSchedulerEnabled returns a boolean if a field has been set.
func (o *PreemptionConfig) HasBatchSchedulerEnabled() bool {
	if o != nil && o.BatchSchedulerEnabled != nil {
		return true
	}

	return false
}

// SetBatchSchedulerEnabled gets a reference to the given bool and assigns it to the BatchSchedulerEnabled field.
func (o *PreemptionConfig) SetBatchSchedulerEnabled(v bool) {
	o.BatchSchedulerEnabled = &v
}

// GetServiceSchedulerEnabled returns the ServiceSchedulerEnabled field value if set, zero value otherwise.
func (o *PreemptionConfig) GetServiceSchedulerEnabled() bool {
	if o == nil || o.ServiceSchedulerEnabled == nil {
		var ret bool
		return ret
	}
	return *o.ServiceSchedulerEnabled
}

// GetServiceSchedulerEnabledOk returns a tuple with the ServiceSchedulerEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreemptionConfig) GetServiceSchedulerEnabledOk() (*bool, bool) {
	if o == nil || o.ServiceSchedulerEnabled == nil {
		return nil, false
	}
	return o.ServiceSchedulerEnabled, true
}

// HasServiceSchedulerEnabled returns a boolean if a field has been set.
func (o *PreemptionConfig) HasServiceSchedulerEnabled() bool {
	if o != nil && o.ServiceSchedulerEnabled != nil {
		return true
	}

	return false
}

// SetServiceSchedulerEnabled gets a reference to the given bool and assigns it to the ServiceSchedulerEnabled field.
func (o *PreemptionConfig) SetServiceSchedulerEnabled(v bool) {
	o.ServiceSchedulerEnabled = &v
}

// GetSysBatchSchedulerEnabled returns the SysBatchSchedulerEnabled field value if set, zero value otherwise.
func (o *PreemptionConfig) GetSysBatchSchedulerEnabled() bool {
	if o == nil || o.SysBatchSchedulerEnabled == nil {
		var ret bool
		return ret
	}
	return *o.SysBatchSchedulerEnabled
}

// GetSysBatchSchedulerEnabledOk returns a tuple with the SysBatchSchedulerEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreemptionConfig) GetSysBatchSchedulerEnabledOk() (*bool, bool) {
	if o == nil || o.SysBatchSchedulerEnabled == nil {
		return nil, false
	}
	return o.SysBatchSchedulerEnabled, true
}

// HasSysBatchSchedulerEnabled returns a boolean if a field has been set.
func (o *PreemptionConfig) HasSysBatchSchedulerEnabled() bool {
	if o != nil && o.SysBatchSchedulerEnabled != nil {
		return true
	}

	return false
}

// SetSysBatchSchedulerEnabled gets a reference to the given bool and assigns it to the SysBatchSchedulerEnabled field.
func (o *PreemptionConfig) SetSysBatchSchedulerEnabled(v bool) {
	o.SysBatchSchedulerEnabled = &v
}

// GetSystemSchedulerEnabled returns the SystemSchedulerEnabled field value if set, zero value otherwise.
func (o *PreemptionConfig) GetSystemSchedulerEnabled() bool {
	if o == nil || o.SystemSchedulerEnabled == nil {
		var ret bool
		return ret
	}
	return *o.SystemSchedulerEnabled
}

// GetSystemSchedulerEnabledOk returns a tuple with the SystemSchedulerEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreemptionConfig) GetSystemSchedulerEnabledOk() (*bool, bool) {
	if o == nil || o.SystemSchedulerEnabled == nil {
		return nil, false
	}
	return o.SystemSchedulerEnabled, true
}

// HasSystemSchedulerEnabled returns a boolean if a field has been set.
func (o *PreemptionConfig) HasSystemSchedulerEnabled() bool {
	if o != nil && o.SystemSchedulerEnabled != nil {
		return true
	}

	return false
}

// SetSystemSchedulerEnabled gets a reference to the given bool and assigns it to the SystemSchedulerEnabled field.
func (o *PreemptionConfig) SetSystemSchedulerEnabled(v bool) {
	o.SystemSchedulerEnabled = &v
}

func (o PreemptionConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BatchSchedulerEnabled != nil {
		toSerialize["BatchSchedulerEnabled"] = o.BatchSchedulerEnabled
	}
	if o.ServiceSchedulerEnabled != nil {
		toSerialize["ServiceSchedulerEnabled"] = o.ServiceSchedulerEnabled
	}
	if o.SysBatchSchedulerEnabled != nil {
		toSerialize["SysBatchSchedulerEnabled"] = o.SysBatchSchedulerEnabled
	}
	if o.SystemSchedulerEnabled != nil {
		toSerialize["SystemSchedulerEnabled"] = o.SystemSchedulerEnabled
	}
	return json.Marshal(toSerialize)
}

type NullablePreemptionConfig struct {
	value *PreemptionConfig
	isSet bool
}

func (v NullablePreemptionConfig) Get() *PreemptionConfig {
	return v.value
}

func (v *NullablePreemptionConfig) Set(val *PreemptionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePreemptionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePreemptionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreemptionConfig(val *PreemptionConfig) *NullablePreemptionConfig {
	return &NullablePreemptionConfig{value: val, isSet: true}
}

func (v NullablePreemptionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreemptionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


