/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// NodeEvent struct for NodeEvent
type NodeEvent struct {
	CreateIndex *int32 `json:"CreateIndex,omitempty"`
	Details *map[string]string `json:"Details,omitempty"`
	Message *string `json:"Message,omitempty"`
	Subsystem *string `json:"Subsystem,omitempty"`
	Timestamp *time.Time `json:"Timestamp,omitempty"`
}

// NewNodeEvent instantiates a new NodeEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeEvent() *NodeEvent {
	this := NodeEvent{}
	return &this
}

// NewNodeEventWithDefaults instantiates a new NodeEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeEventWithDefaults() *NodeEvent {
	this := NodeEvent{}
	return &this
}

// GetCreateIndex returns the CreateIndex field value if set, zero value otherwise.
func (o *NodeEvent) GetCreateIndex() int32 {
	if o == nil || o.CreateIndex == nil {
		var ret int32
		return ret
	}
	return *o.CreateIndex
}

// GetCreateIndexOk returns a tuple with the CreateIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeEvent) GetCreateIndexOk() (*int32, bool) {
	if o == nil || o.CreateIndex == nil {
		return nil, false
	}
	return o.CreateIndex, true
}

// HasCreateIndex returns a boolean if a field has been set.
func (o *NodeEvent) HasCreateIndex() bool {
	if o != nil && o.CreateIndex != nil {
		return true
	}

	return false
}

// SetCreateIndex gets a reference to the given int32 and assigns it to the CreateIndex field.
func (o *NodeEvent) SetCreateIndex(v int32) {
	o.CreateIndex = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *NodeEvent) GetDetails() map[string]string {
	if o == nil || o.Details == nil {
		var ret map[string]string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeEvent) GetDetailsOk() (*map[string]string, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *NodeEvent) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]string and assigns it to the Details field.
func (o *NodeEvent) SetDetails(v map[string]string) {
	o.Details = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *NodeEvent) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeEvent) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *NodeEvent) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *NodeEvent) SetMessage(v string) {
	o.Message = &v
}

// GetSubsystem returns the Subsystem field value if set, zero value otherwise.
func (o *NodeEvent) GetSubsystem() string {
	if o == nil || o.Subsystem == nil {
		var ret string
		return ret
	}
	return *o.Subsystem
}

// GetSubsystemOk returns a tuple with the Subsystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeEvent) GetSubsystemOk() (*string, bool) {
	if o == nil || o.Subsystem == nil {
		return nil, false
	}
	return o.Subsystem, true
}

// HasSubsystem returns a boolean if a field has been set.
func (o *NodeEvent) HasSubsystem() bool {
	if o != nil && o.Subsystem != nil {
		return true
	}

	return false
}

// SetSubsystem gets a reference to the given string and assigns it to the Subsystem field.
func (o *NodeEvent) SetSubsystem(v string) {
	o.Subsystem = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *NodeEvent) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *NodeEvent) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *NodeEvent) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o NodeEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreateIndex != nil {
		toSerialize["CreateIndex"] = o.CreateIndex
	}
	if o.Details != nil {
		toSerialize["Details"] = o.Details
	}
	if o.Message != nil {
		toSerialize["Message"] = o.Message
	}
	if o.Subsystem != nil {
		toSerialize["Subsystem"] = o.Subsystem
	}
	if o.Timestamp != nil {
		toSerialize["Timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableNodeEvent struct {
	value *NodeEvent
	isSet bool
}

func (v NullableNodeEvent) Get() *NodeEvent {
	return v.value
}

func (v *NullableNodeEvent) Set(val *NodeEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeEvent(val *NodeEvent) *NullableNodeEvent {
	return &NullableNodeEvent{value: val, isSet: true}
}

func (v NullableNodeEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


