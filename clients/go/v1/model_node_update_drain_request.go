/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NodeUpdateDrainRequest struct for NodeUpdateDrainRequest
type NodeUpdateDrainRequest struct {
	DrainSpec *DrainSpec `json:"DrainSpec,omitempty"`
	MarkEligible *bool `json:"MarkEligible,omitempty"`
	Meta *map[string]string `json:"Meta,omitempty"`
	NodeID *string `json:"NodeID,omitempty"`
}

// NewNodeUpdateDrainRequest instantiates a new NodeUpdateDrainRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeUpdateDrainRequest() *NodeUpdateDrainRequest {
	this := NodeUpdateDrainRequest{}
	return &this
}

// NewNodeUpdateDrainRequestWithDefaults instantiates a new NodeUpdateDrainRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeUpdateDrainRequestWithDefaults() *NodeUpdateDrainRequest {
	this := NodeUpdateDrainRequest{}
	return &this
}

// GetDrainSpec returns the DrainSpec field value if set, zero value otherwise.
func (o *NodeUpdateDrainRequest) GetDrainSpec() DrainSpec {
	if o == nil || o.DrainSpec == nil {
		var ret DrainSpec
		return ret
	}
	return *o.DrainSpec
}

// GetDrainSpecOk returns a tuple with the DrainSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeUpdateDrainRequest) GetDrainSpecOk() (*DrainSpec, bool) {
	if o == nil || o.DrainSpec == nil {
		return nil, false
	}
	return o.DrainSpec, true
}

// HasDrainSpec returns a boolean if a field has been set.
func (o *NodeUpdateDrainRequest) HasDrainSpec() bool {
	if o != nil && o.DrainSpec != nil {
		return true
	}

	return false
}

// SetDrainSpec gets a reference to the given DrainSpec and assigns it to the DrainSpec field.
func (o *NodeUpdateDrainRequest) SetDrainSpec(v DrainSpec) {
	o.DrainSpec = &v
}

// GetMarkEligible returns the MarkEligible field value if set, zero value otherwise.
func (o *NodeUpdateDrainRequest) GetMarkEligible() bool {
	if o == nil || o.MarkEligible == nil {
		var ret bool
		return ret
	}
	return *o.MarkEligible
}

// GetMarkEligibleOk returns a tuple with the MarkEligible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeUpdateDrainRequest) GetMarkEligibleOk() (*bool, bool) {
	if o == nil || o.MarkEligible == nil {
		return nil, false
	}
	return o.MarkEligible, true
}

// HasMarkEligible returns a boolean if a field has been set.
func (o *NodeUpdateDrainRequest) HasMarkEligible() bool {
	if o != nil && o.MarkEligible != nil {
		return true
	}

	return false
}

// SetMarkEligible gets a reference to the given bool and assigns it to the MarkEligible field.
func (o *NodeUpdateDrainRequest) SetMarkEligible(v bool) {
	o.MarkEligible = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *NodeUpdateDrainRequest) GetMeta() map[string]string {
	if o == nil || o.Meta == nil {
		var ret map[string]string
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeUpdateDrainRequest) GetMetaOk() (*map[string]string, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *NodeUpdateDrainRequest) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]string and assigns it to the Meta field.
func (o *NodeUpdateDrainRequest) SetMeta(v map[string]string) {
	o.Meta = &v
}

// GetNodeID returns the NodeID field value if set, zero value otherwise.
func (o *NodeUpdateDrainRequest) GetNodeID() string {
	if o == nil || o.NodeID == nil {
		var ret string
		return ret
	}
	return *o.NodeID
}

// GetNodeIDOk returns a tuple with the NodeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeUpdateDrainRequest) GetNodeIDOk() (*string, bool) {
	if o == nil || o.NodeID == nil {
		return nil, false
	}
	return o.NodeID, true
}

// HasNodeID returns a boolean if a field has been set.
func (o *NodeUpdateDrainRequest) HasNodeID() bool {
	if o != nil && o.NodeID != nil {
		return true
	}

	return false
}

// SetNodeID gets a reference to the given string and assigns it to the NodeID field.
func (o *NodeUpdateDrainRequest) SetNodeID(v string) {
	o.NodeID = &v
}

func (o NodeUpdateDrainRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DrainSpec != nil {
		toSerialize["DrainSpec"] = o.DrainSpec
	}
	if o.MarkEligible != nil {
		toSerialize["MarkEligible"] = o.MarkEligible
	}
	if o.Meta != nil {
		toSerialize["Meta"] = o.Meta
	}
	if o.NodeID != nil {
		toSerialize["NodeID"] = o.NodeID
	}
	return json.Marshal(toSerialize)
}

type NullableNodeUpdateDrainRequest struct {
	value *NodeUpdateDrainRequest
	isSet bool
}

func (v NullableNodeUpdateDrainRequest) Get() *NodeUpdateDrainRequest {
	return v.value
}

func (v *NullableNodeUpdateDrainRequest) Set(val *NodeUpdateDrainRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeUpdateDrainRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeUpdateDrainRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeUpdateDrainRequest(val *NodeUpdateDrainRequest) *NullableNodeUpdateDrainRequest {
	return &NullableNodeUpdateDrainRequest{value: val, isSet: true}
}

func (v NullableNodeUpdateDrainRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeUpdateDrainRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


