/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NodeReservedDiskResources struct for NodeReservedDiskResources
type NodeReservedDiskResources struct {
	DiskMB *int32 `json:"DiskMB,omitempty"`
}

// NewNodeReservedDiskResources instantiates a new NodeReservedDiskResources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeReservedDiskResources() *NodeReservedDiskResources {
	this := NodeReservedDiskResources{}
	return &this
}

// NewNodeReservedDiskResourcesWithDefaults instantiates a new NodeReservedDiskResources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeReservedDiskResourcesWithDefaults() *NodeReservedDiskResources {
	this := NodeReservedDiskResources{}
	return &this
}

// GetDiskMB returns the DiskMB field value if set, zero value otherwise.
func (o *NodeReservedDiskResources) GetDiskMB() int32 {
	if o == nil || o.DiskMB == nil {
		var ret int32
		return ret
	}
	return *o.DiskMB
}

// GetDiskMBOk returns a tuple with the DiskMB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeReservedDiskResources) GetDiskMBOk() (*int32, bool) {
	if o == nil || o.DiskMB == nil {
		return nil, false
	}
	return o.DiskMB, true
}

// HasDiskMB returns a boolean if a field has been set.
func (o *NodeReservedDiskResources) HasDiskMB() bool {
	if o != nil && o.DiskMB != nil {
		return true
	}

	return false
}

// SetDiskMB gets a reference to the given int32 and assigns it to the DiskMB field.
func (o *NodeReservedDiskResources) SetDiskMB(v int32) {
	o.DiskMB = &v
}

func (o NodeReservedDiskResources) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskMB != nil {
		toSerialize["DiskMB"] = o.DiskMB
	}
	return json.Marshal(toSerialize)
}

type NullableNodeReservedDiskResources struct {
	value *NodeReservedDiskResources
	isSet bool
}

func (v NullableNodeReservedDiskResources) Get() *NodeReservedDiskResources {
	return v.value
}

func (v *NullableNodeReservedDiskResources) Set(val *NodeReservedDiskResources) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeReservedDiskResources) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeReservedDiskResources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeReservedDiskResources(val *NodeReservedDiskResources) *NullableNodeReservedDiskResources {
	return &NullableNodeReservedDiskResources{value: val, isSet: true}
}

func (v NullableNodeReservedDiskResources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeReservedDiskResources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


