/*
Nomad

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.4
Contact: support@hashicorp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// CSIInfo struct for CSIInfo
type CSIInfo struct {
	AllocID *string `json:"AllocID,omitempty"`
	ControllerInfo NullableCSIControllerInfo `json:"ControllerInfo,omitempty"`
	HealthDescription *string `json:"HealthDescription,omitempty"`
	Healthy *bool `json:"Healthy,omitempty"`
	NodeInfo NullableCSINodeInfo `json:"NodeInfo,omitempty"`
	PluginID *string `json:"PluginID,omitempty"`
	RequiresControllerPlugin *bool `json:"RequiresControllerPlugin,omitempty"`
	RequiresTopologies *bool `json:"RequiresTopologies,omitempty"`
	UpdateTime NullableTime `json:"UpdateTime,omitempty"`
}

// NewCSIInfo instantiates a new CSIInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSIInfo() *CSIInfo {
	this := CSIInfo{}
	return &this
}

// NewCSIInfoWithDefaults instantiates a new CSIInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSIInfoWithDefaults() *CSIInfo {
	this := CSIInfo{}
	return &this
}

// GetAllocID returns the AllocID field value if set, zero value otherwise.
func (o *CSIInfo) GetAllocID() string {
	if o == nil || o.AllocID == nil {
		var ret string
		return ret
	}
	return *o.AllocID
}

// GetAllocIDOk returns a tuple with the AllocID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSIInfo) GetAllocIDOk() (*string, bool) {
	if o == nil || o.AllocID == nil {
		return nil, false
	}
	return o.AllocID, true
}

// HasAllocID returns a boolean if a field has been set.
func (o *CSIInfo) HasAllocID() bool {
	if o != nil && o.AllocID != nil {
		return true
	}

	return false
}

// SetAllocID gets a reference to the given string and assigns it to the AllocID field.
func (o *CSIInfo) SetAllocID(v string) {
	o.AllocID = &v
}

// GetControllerInfo returns the ControllerInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSIInfo) GetControllerInfo() CSIControllerInfo {
	if o == nil || o.ControllerInfo.Get() == nil {
		var ret CSIControllerInfo
		return ret
	}
	return *o.ControllerInfo.Get()
}

// GetControllerInfoOk returns a tuple with the ControllerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSIInfo) GetControllerInfoOk() (*CSIControllerInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ControllerInfo.Get(), o.ControllerInfo.IsSet()
}

// HasControllerInfo returns a boolean if a field has been set.
func (o *CSIInfo) HasControllerInfo() bool {
	if o != nil && o.ControllerInfo.IsSet() {
		return true
	}

	return false
}

// SetControllerInfo gets a reference to the given NullableCSIControllerInfo and assigns it to the ControllerInfo field.
func (o *CSIInfo) SetControllerInfo(v CSIControllerInfo) {
	o.ControllerInfo.Set(&v)
}
// SetControllerInfoNil sets the value for ControllerInfo to be an explicit nil
func (o *CSIInfo) SetControllerInfoNil() {
	o.ControllerInfo.Set(nil)
}

// UnsetControllerInfo ensures that no value is present for ControllerInfo, not even an explicit nil
func (o *CSIInfo) UnsetControllerInfo() {
	o.ControllerInfo.Unset()
}

// GetHealthDescription returns the HealthDescription field value if set, zero value otherwise.
func (o *CSIInfo) GetHealthDescription() string {
	if o == nil || o.HealthDescription == nil {
		var ret string
		return ret
	}
	return *o.HealthDescription
}

// GetHealthDescriptionOk returns a tuple with the HealthDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSIInfo) GetHealthDescriptionOk() (*string, bool) {
	if o == nil || o.HealthDescription == nil {
		return nil, false
	}
	return o.HealthDescription, true
}

// HasHealthDescription returns a boolean if a field has been set.
func (o *CSIInfo) HasHealthDescription() bool {
	if o != nil && o.HealthDescription != nil {
		return true
	}

	return false
}

// SetHealthDescription gets a reference to the given string and assigns it to the HealthDescription field.
func (o *CSIInfo) SetHealthDescription(v string) {
	o.HealthDescription = &v
}

// GetHealthy returns the Healthy field value if set, zero value otherwise.
func (o *CSIInfo) GetHealthy() bool {
	if o == nil || o.Healthy == nil {
		var ret bool
		return ret
	}
	return *o.Healthy
}

// GetHealthyOk returns a tuple with the Healthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSIInfo) GetHealthyOk() (*bool, bool) {
	if o == nil || o.Healthy == nil {
		return nil, false
	}
	return o.Healthy, true
}

// HasHealthy returns a boolean if a field has been set.
func (o *CSIInfo) HasHealthy() bool {
	if o != nil && o.Healthy != nil {
		return true
	}

	return false
}

// SetHealthy gets a reference to the given bool and assigns it to the Healthy field.
func (o *CSIInfo) SetHealthy(v bool) {
	o.Healthy = &v
}

// GetNodeInfo returns the NodeInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSIInfo) GetNodeInfo() CSINodeInfo {
	if o == nil || o.NodeInfo.Get() == nil {
		var ret CSINodeInfo
		return ret
	}
	return *o.NodeInfo.Get()
}

// GetNodeInfoOk returns a tuple with the NodeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSIInfo) GetNodeInfoOk() (*CSINodeInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeInfo.Get(), o.NodeInfo.IsSet()
}

// HasNodeInfo returns a boolean if a field has been set.
func (o *CSIInfo) HasNodeInfo() bool {
	if o != nil && o.NodeInfo.IsSet() {
		return true
	}

	return false
}

// SetNodeInfo gets a reference to the given NullableCSINodeInfo and assigns it to the NodeInfo field.
func (o *CSIInfo) SetNodeInfo(v CSINodeInfo) {
	o.NodeInfo.Set(&v)
}
// SetNodeInfoNil sets the value for NodeInfo to be an explicit nil
func (o *CSIInfo) SetNodeInfoNil() {
	o.NodeInfo.Set(nil)
}

// UnsetNodeInfo ensures that no value is present for NodeInfo, not even an explicit nil
func (o *CSIInfo) UnsetNodeInfo() {
	o.NodeInfo.Unset()
}

// GetPluginID returns the PluginID field value if set, zero value otherwise.
func (o *CSIInfo) GetPluginID() string {
	if o == nil || o.PluginID == nil {
		var ret string
		return ret
	}
	return *o.PluginID
}

// GetPluginIDOk returns a tuple with the PluginID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSIInfo) GetPluginIDOk() (*string, bool) {
	if o == nil || o.PluginID == nil {
		return nil, false
	}
	return o.PluginID, true
}

// HasPluginID returns a boolean if a field has been set.
func (o *CSIInfo) HasPluginID() bool {
	if o != nil && o.PluginID != nil {
		return true
	}

	return false
}

// SetPluginID gets a reference to the given string and assigns it to the PluginID field.
func (o *CSIInfo) SetPluginID(v string) {
	o.PluginID = &v
}

// GetRequiresControllerPlugin returns the RequiresControllerPlugin field value if set, zero value otherwise.
func (o *CSIInfo) GetRequiresControllerPlugin() bool {
	if o == nil || o.RequiresControllerPlugin == nil {
		var ret bool
		return ret
	}
	return *o.RequiresControllerPlugin
}

// GetRequiresControllerPluginOk returns a tuple with the RequiresControllerPlugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSIInfo) GetRequiresControllerPluginOk() (*bool, bool) {
	if o == nil || o.RequiresControllerPlugin == nil {
		return nil, false
	}
	return o.RequiresControllerPlugin, true
}

// HasRequiresControllerPlugin returns a boolean if a field has been set.
func (o *CSIInfo) HasRequiresControllerPlugin() bool {
	if o != nil && o.RequiresControllerPlugin != nil {
		return true
	}

	return false
}

// SetRequiresControllerPlugin gets a reference to the given bool and assigns it to the RequiresControllerPlugin field.
func (o *CSIInfo) SetRequiresControllerPlugin(v bool) {
	o.RequiresControllerPlugin = &v
}

// GetRequiresTopologies returns the RequiresTopologies field value if set, zero value otherwise.
func (o *CSIInfo) GetRequiresTopologies() bool {
	if o == nil || o.RequiresTopologies == nil {
		var ret bool
		return ret
	}
	return *o.RequiresTopologies
}

// GetRequiresTopologiesOk returns a tuple with the RequiresTopologies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSIInfo) GetRequiresTopologiesOk() (*bool, bool) {
	if o == nil || o.RequiresTopologies == nil {
		return nil, false
	}
	return o.RequiresTopologies, true
}

// HasRequiresTopologies returns a boolean if a field has been set.
func (o *CSIInfo) HasRequiresTopologies() bool {
	if o != nil && o.RequiresTopologies != nil {
		return true
	}

	return false
}

// SetRequiresTopologies gets a reference to the given bool and assigns it to the RequiresTopologies field.
func (o *CSIInfo) SetRequiresTopologies(v bool) {
	o.RequiresTopologies = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSIInfo) GetUpdateTime() time.Time {
	if o == nil || o.UpdateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime.Get()
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSIInfo) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UpdateTime.Get(), o.UpdateTime.IsSet()
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *CSIInfo) HasUpdateTime() bool {
	if o != nil && o.UpdateTime.IsSet() {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given NullableTime and assigns it to the UpdateTime field.
func (o *CSIInfo) SetUpdateTime(v time.Time) {
	o.UpdateTime.Set(&v)
}
// SetUpdateTimeNil sets the value for UpdateTime to be an explicit nil
func (o *CSIInfo) SetUpdateTimeNil() {
	o.UpdateTime.Set(nil)
}

// UnsetUpdateTime ensures that no value is present for UpdateTime, not even an explicit nil
func (o *CSIInfo) UnsetUpdateTime() {
	o.UpdateTime.Unset()
}

func (o CSIInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllocID != nil {
		toSerialize["AllocID"] = o.AllocID
	}
	if o.ControllerInfo.IsSet() {
		toSerialize["ControllerInfo"] = o.ControllerInfo.Get()
	}
	if o.HealthDescription != nil {
		toSerialize["HealthDescription"] = o.HealthDescription
	}
	if o.Healthy != nil {
		toSerialize["Healthy"] = o.Healthy
	}
	if o.NodeInfo.IsSet() {
		toSerialize["NodeInfo"] = o.NodeInfo.Get()
	}
	if o.PluginID != nil {
		toSerialize["PluginID"] = o.PluginID
	}
	if o.RequiresControllerPlugin != nil {
		toSerialize["RequiresControllerPlugin"] = o.RequiresControllerPlugin
	}
	if o.RequiresTopologies != nil {
		toSerialize["RequiresTopologies"] = o.RequiresTopologies
	}
	if o.UpdateTime.IsSet() {
		toSerialize["UpdateTime"] = o.UpdateTime.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCSIInfo struct {
	value *CSIInfo
	isSet bool
}

func (v NullableCSIInfo) Get() *CSIInfo {
	return v.value
}

func (v *NullableCSIInfo) Set(val *CSIInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCSIInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCSIInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSIInfo(val *CSIInfo) *NullableCSIInfo {
	return &NullableCSIInfo{value: val, isSet: true}
}

func (v NullableCSIInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSIInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


