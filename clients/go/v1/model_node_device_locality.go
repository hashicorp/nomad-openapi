/*
Nomad

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.4
Contact: support@hashicorp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NodeDeviceLocality struct for NodeDeviceLocality
type NodeDeviceLocality struct {
	PciBusID *string `json:"PciBusID,omitempty"`
}

// NewNodeDeviceLocality instantiates a new NodeDeviceLocality object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeDeviceLocality() *NodeDeviceLocality {
	this := NodeDeviceLocality{}
	return &this
}

// NewNodeDeviceLocalityWithDefaults instantiates a new NodeDeviceLocality object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeDeviceLocalityWithDefaults() *NodeDeviceLocality {
	this := NodeDeviceLocality{}
	return &this
}

// GetPciBusID returns the PciBusID field value if set, zero value otherwise.
func (o *NodeDeviceLocality) GetPciBusID() string {
	if o == nil || o.PciBusID == nil {
		var ret string
		return ret
	}
	return *o.PciBusID
}

// GetPciBusIDOk returns a tuple with the PciBusID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDeviceLocality) GetPciBusIDOk() (*string, bool) {
	if o == nil || o.PciBusID == nil {
		return nil, false
	}
	return o.PciBusID, true
}

// HasPciBusID returns a boolean if a field has been set.
func (o *NodeDeviceLocality) HasPciBusID() bool {
	if o != nil && o.PciBusID != nil {
		return true
	}

	return false
}

// SetPciBusID gets a reference to the given string and assigns it to the PciBusID field.
func (o *NodeDeviceLocality) SetPciBusID(v string) {
	o.PciBusID = &v
}

func (o NodeDeviceLocality) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PciBusID != nil {
		toSerialize["PciBusID"] = o.PciBusID
	}
	return json.Marshal(toSerialize)
}

type NullableNodeDeviceLocality struct {
	value *NodeDeviceLocality
	isSet bool
}

func (v NullableNodeDeviceLocality) Get() *NodeDeviceLocality {
	return v.value
}

func (v *NullableNodeDeviceLocality) Set(val *NodeDeviceLocality) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeDeviceLocality) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeDeviceLocality) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeDeviceLocality(val *NodeDeviceLocality) *NullableNodeDeviceLocality {
	return &NullableNodeDeviceLocality{value: val, isSet: true}
}

func (v NullableNodeDeviceLocality) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeDeviceLocality) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


