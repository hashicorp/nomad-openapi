package main

import (
	"net/http"

	"github.com/hashicorp/nomad/api"
)

func (v *v1api) getACLPaths() []*apiPath {
	tags := []string{"ACL"}

	return []*apiPath{
		//s.mux.HandleFunc("/v1/acl/policies", s.wrap(s.ACLPoliciesRequest))
		{
			Template: "/acl/policies",
			Operations: []*operation{
				newOperation(http.MethodGet,
					httpServer.ACLPoliciesRequest,
					tags,
					"GetACLPolicies",
					nil,
					defaultQueryOpts,
					newResponseConfig(200,
						arraySchema,
						api.ACLPolicyListStub{},
						defaultQueryMeta,
						"GetACLPoliciesResponse",
					),
				),
			},
		},
		//s.mux.HandleFunc("/v1/acl/policy/", s.wrap(s.ACLPolicySpecificRequest))
		{
			Template: "/acl/policy/{policyName}",
			Operations: []*operation{
				newOperation(http.MethodGet,
					httpServer.ACLPolicySpecificRequest,
					tags,
					"GetACLPolicy",
					nil,
					appendParams(defaultQueryOpts, &aclPolicyNameParam),
					newResponseConfig(200,
						objectSchema,
						api.ACLPolicy{},
						defaultQueryMeta,
						"GetACLPolicyResponse",
					),
				),
				newOperation(http.MethodPost,
					httpServer.ACLPolicySpecificRequest,
					tags,
					"PostACLPolicy",
					newRequestBody(objectSchema, api.ACLPolicy{}),
					appendParams(defaultWriteOpts, &aclPolicyNameParam),
					newResponseConfig(200,
						nilSchema,
						nil,
						defaultWriteMeta,
						"PostACLPolicyResponse",
					),
				),
				newOperation(http.MethodDelete,
					httpServer.ACLPolicySpecificRequest,
					tags,
					"DeleteACLPolicy",
					nil,
					appendParams(defaultWriteOpts, &aclPolicyNameParam),
					newResponseConfig(200,
						nilSchema,
						nil,
						defaultWriteMeta,
						"DeleteACLPolicyResponse",
					),
				),
			},
		},
		//s.mux.HandleFunc("/v1/acl/token/onetime", s.wrap(s.UpsertOneTimeToken))
		{
			Template: "/acl/token/onetime",
			Operations: []*operation{
				newOperation(http.MethodPost,
					httpServer.UpsertOneTimeToken,
					tags,
					"PostACLTokenOnetime",
					nil,
					defaultWriteOpts,
					newResponseConfig(200,
						objectSchema,
						api.OneTimeToken{},
						defaultWriteMeta,
						"PostACLTokenOnetimeResponse",
					),
				),
			},
		},
		//s.mux.HandleFunc("/v1/acl/token/onetime/exchange", s.wrap(s.ExchangeOneTimeToken))
		{
			Template: "/acl/token/onetime/exchange",
			Operations: []*operation{
				newOperation(http.MethodPost,
					httpServer.ExchangeOneTimeToken,
					tags,
					"PostACLTokenOnetimeExchange",
					newRequestBody(objectSchema, api.OneTimeTokenExchangeRequest{}),
					defaultWriteOpts,
					newResponseConfig(200,
						objectSchema,
						api.ACLToken{},
						defaultWriteMeta,
						"PostACLTokenOnetimeExchangeResponse",
					),
				),
			},
		},
		//s.mux.HandleFunc("/v1/acl/bootstrap", s.wrap(s.ACLTokenBootstrap))
		{
			Template: "/acl/bootstrap",
			Operations: []*operation{
				newOperation(http.MethodPost,
					httpServer.ACLTokenBootstrap,
					tags,
					"PostACLBootstrap",
					nil,
					defaultWriteOpts,
					newResponseConfig(200,
						arraySchema,
						api.ACLToken{},
						defaultWriteMeta,
						"PostACLBootstrapResponse",
					),
				),
			},
		},
		//s.mux.HandleFunc("/v1/acl/tokens", s.wrap(s.ACLTokensRequest))
		{
			Template: "/acl/tokens",
			Operations: []*operation{
				newOperation(http.MethodGet,
					httpServer.ACLTokensRequest,
					tags,
					"GetACLTokens",
					nil,
					defaultQueryOpts,
					newResponseConfig(200,
						arraySchema,
						api.ACLTokenListStub{},
						defaultQueryMeta,
						"GetACLTokensResponse",
					),
				),
			},
		},
		//s.mux.HandleFunc("/v1/acl/token", s.wrap(s.ACLTokenSpecificRequest))
		{
			Template: "/acl/token",
			Operations: []*operation{
				newOperation(http.MethodGet,
					httpServer.ACLTokenSpecificRequest,
					tags,
					"GetACLTokenSelf",
					nil,
					defaultQueryOpts,
					newResponseConfig(200,
						objectSchema,
						api.ACLToken{},
						defaultQueryMeta,
						"GetACLTokenSelfResponse",
					),
				),
			},
		},
		//s.mux.HandleFunc("/v1/acl/token/", s.wrap(s.ACLTokenSpecificRequest))
		{
			Template: "/acl/token/{tokenAccessor}",
			Operations: []*operation{
				newOperation(http.MethodGet,
					httpServer.ACLTokenSpecificRequest,
					tags,
					"GetACLToken",
					nil,
					appendParams(defaultQueryOpts, &tokenAccessorParam),
					newResponseConfig(200,
						objectSchema,
						api.ACLToken{},
						defaultQueryMeta,
						"GetACLTokenResponse",
					),
				),
				newOperation(http.MethodPost,
					httpServer.ACLTokenSpecificRequest,
					tags,
					"PostACLToken",
					newRequestBody(objectSchema, api.ACLToken{}),
					appendParams(defaultWriteOpts, &tokenAccessorParam),
					newResponseConfig(200,
						arraySchema,
						api.ACLToken{},
						defaultWriteMeta,
						"PostACLTokenResponse",
					),
				),
				newOperation(http.MethodDelete,
					httpServer.ACLTokenSpecificRequest,
					tags,
					"DeleteACLToken",
					nil,
					appendParams(defaultWriteOpts, &tokenAccessorParam),
					newResponseConfig(200,
						nilSchema,
						nil,
						defaultWriteMeta,
						"DeleteACLTokenResponse",
					),
				),
			},
		},
	}
}
